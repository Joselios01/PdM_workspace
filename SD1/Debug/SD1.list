
SD1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005af0  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006b8  08005c9c  08005c9c  00015c9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006354  08006354  00020024  2**0
                  CONTENTS
  4 .ARM          00000008  08006354  08006354  00016354  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800635c  0800635c  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800635c  0800635c  0001635c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006360  08006360  00016360  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  08006364  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020024  2**0
                  CONTENTS
 10 .bss          0000133c  20000024  20000024  00020024  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20001360  20001360  00020024  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e366  00000000  00000000  00020054  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002139  00000000  00000000  0002e3ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c08  00000000  00000000  000304f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000b20  00000000  00000000  00031100  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024871  00000000  00000000  00031c20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012e87  00000000  00000000  00056491  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d54f0  00000000  00000000  00069318  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0013e808  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000311c  00000000  00000000  0013e858  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000024 	.word	0x20000024
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08005c84 	.word	0x08005c84

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000028 	.word	0x20000028
 80001e8:	08005c84 	.word	0x08005c84

080001ec <strlen>:
 80001ec:	4603      	mov	r3, r0
 80001ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f2:	2a00      	cmp	r2, #0
 80001f4:	d1fb      	bne.n	80001ee <strlen+0x2>
 80001f6:	1a18      	subs	r0, r3, r0
 80001f8:	3801      	subs	r0, #1
 80001fa:	4770      	bx	lr

080001fc <__aeabi_uldivmod>:
 80001fc:	b953      	cbnz	r3, 8000214 <__aeabi_uldivmod+0x18>
 80001fe:	b94a      	cbnz	r2, 8000214 <__aeabi_uldivmod+0x18>
 8000200:	2900      	cmp	r1, #0
 8000202:	bf08      	it	eq
 8000204:	2800      	cmpeq	r0, #0
 8000206:	bf1c      	itt	ne
 8000208:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 800020c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000210:	f000 b974 	b.w	80004fc <__aeabi_idiv0>
 8000214:	f1ad 0c08 	sub.w	ip, sp, #8
 8000218:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800021c:	f000 f806 	bl	800022c <__udivmoddi4>
 8000220:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000224:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000228:	b004      	add	sp, #16
 800022a:	4770      	bx	lr

0800022c <__udivmoddi4>:
 800022c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000230:	9d08      	ldr	r5, [sp, #32]
 8000232:	4604      	mov	r4, r0
 8000234:	468e      	mov	lr, r1
 8000236:	2b00      	cmp	r3, #0
 8000238:	d14d      	bne.n	80002d6 <__udivmoddi4+0xaa>
 800023a:	428a      	cmp	r2, r1
 800023c:	4694      	mov	ip, r2
 800023e:	d969      	bls.n	8000314 <__udivmoddi4+0xe8>
 8000240:	fab2 f282 	clz	r2, r2
 8000244:	b152      	cbz	r2, 800025c <__udivmoddi4+0x30>
 8000246:	fa01 f302 	lsl.w	r3, r1, r2
 800024a:	f1c2 0120 	rsb	r1, r2, #32
 800024e:	fa20 f101 	lsr.w	r1, r0, r1
 8000252:	fa0c fc02 	lsl.w	ip, ip, r2
 8000256:	ea41 0e03 	orr.w	lr, r1, r3
 800025a:	4094      	lsls	r4, r2
 800025c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000260:	0c21      	lsrs	r1, r4, #16
 8000262:	fbbe f6f8 	udiv	r6, lr, r8
 8000266:	fa1f f78c 	uxth.w	r7, ip
 800026a:	fb08 e316 	mls	r3, r8, r6, lr
 800026e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000272:	fb06 f107 	mul.w	r1, r6, r7
 8000276:	4299      	cmp	r1, r3
 8000278:	d90a      	bls.n	8000290 <__udivmoddi4+0x64>
 800027a:	eb1c 0303 	adds.w	r3, ip, r3
 800027e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000282:	f080 811f 	bcs.w	80004c4 <__udivmoddi4+0x298>
 8000286:	4299      	cmp	r1, r3
 8000288:	f240 811c 	bls.w	80004c4 <__udivmoddi4+0x298>
 800028c:	3e02      	subs	r6, #2
 800028e:	4463      	add	r3, ip
 8000290:	1a5b      	subs	r3, r3, r1
 8000292:	b2a4      	uxth	r4, r4
 8000294:	fbb3 f0f8 	udiv	r0, r3, r8
 8000298:	fb08 3310 	mls	r3, r8, r0, r3
 800029c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a0:	fb00 f707 	mul.w	r7, r0, r7
 80002a4:	42a7      	cmp	r7, r4
 80002a6:	d90a      	bls.n	80002be <__udivmoddi4+0x92>
 80002a8:	eb1c 0404 	adds.w	r4, ip, r4
 80002ac:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002b0:	f080 810a 	bcs.w	80004c8 <__udivmoddi4+0x29c>
 80002b4:	42a7      	cmp	r7, r4
 80002b6:	f240 8107 	bls.w	80004c8 <__udivmoddi4+0x29c>
 80002ba:	4464      	add	r4, ip
 80002bc:	3802      	subs	r0, #2
 80002be:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002c2:	1be4      	subs	r4, r4, r7
 80002c4:	2600      	movs	r6, #0
 80002c6:	b11d      	cbz	r5, 80002d0 <__udivmoddi4+0xa4>
 80002c8:	40d4      	lsrs	r4, r2
 80002ca:	2300      	movs	r3, #0
 80002cc:	e9c5 4300 	strd	r4, r3, [r5]
 80002d0:	4631      	mov	r1, r6
 80002d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d909      	bls.n	80002ee <__udivmoddi4+0xc2>
 80002da:	2d00      	cmp	r5, #0
 80002dc:	f000 80ef 	beq.w	80004be <__udivmoddi4+0x292>
 80002e0:	2600      	movs	r6, #0
 80002e2:	e9c5 0100 	strd	r0, r1, [r5]
 80002e6:	4630      	mov	r0, r6
 80002e8:	4631      	mov	r1, r6
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	fab3 f683 	clz	r6, r3
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	d14a      	bne.n	800038c <__udivmoddi4+0x160>
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d302      	bcc.n	8000300 <__udivmoddi4+0xd4>
 80002fa:	4282      	cmp	r2, r0
 80002fc:	f200 80f9 	bhi.w	80004f2 <__udivmoddi4+0x2c6>
 8000300:	1a84      	subs	r4, r0, r2
 8000302:	eb61 0303 	sbc.w	r3, r1, r3
 8000306:	2001      	movs	r0, #1
 8000308:	469e      	mov	lr, r3
 800030a:	2d00      	cmp	r5, #0
 800030c:	d0e0      	beq.n	80002d0 <__udivmoddi4+0xa4>
 800030e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000312:	e7dd      	b.n	80002d0 <__udivmoddi4+0xa4>
 8000314:	b902      	cbnz	r2, 8000318 <__udivmoddi4+0xec>
 8000316:	deff      	udf	#255	; 0xff
 8000318:	fab2 f282 	clz	r2, r2
 800031c:	2a00      	cmp	r2, #0
 800031e:	f040 8092 	bne.w	8000446 <__udivmoddi4+0x21a>
 8000322:	eba1 010c 	sub.w	r1, r1, ip
 8000326:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800032a:	fa1f fe8c 	uxth.w	lr, ip
 800032e:	2601      	movs	r6, #1
 8000330:	0c20      	lsrs	r0, r4, #16
 8000332:	fbb1 f3f7 	udiv	r3, r1, r7
 8000336:	fb07 1113 	mls	r1, r7, r3, r1
 800033a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800033e:	fb0e f003 	mul.w	r0, lr, r3
 8000342:	4288      	cmp	r0, r1
 8000344:	d908      	bls.n	8000358 <__udivmoddi4+0x12c>
 8000346:	eb1c 0101 	adds.w	r1, ip, r1
 800034a:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x12a>
 8000350:	4288      	cmp	r0, r1
 8000352:	f200 80cb 	bhi.w	80004ec <__udivmoddi4+0x2c0>
 8000356:	4643      	mov	r3, r8
 8000358:	1a09      	subs	r1, r1, r0
 800035a:	b2a4      	uxth	r4, r4
 800035c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000360:	fb07 1110 	mls	r1, r7, r0, r1
 8000364:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000368:	fb0e fe00 	mul.w	lr, lr, r0
 800036c:	45a6      	cmp	lr, r4
 800036e:	d908      	bls.n	8000382 <__udivmoddi4+0x156>
 8000370:	eb1c 0404 	adds.w	r4, ip, r4
 8000374:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000378:	d202      	bcs.n	8000380 <__udivmoddi4+0x154>
 800037a:	45a6      	cmp	lr, r4
 800037c:	f200 80bb 	bhi.w	80004f6 <__udivmoddi4+0x2ca>
 8000380:	4608      	mov	r0, r1
 8000382:	eba4 040e 	sub.w	r4, r4, lr
 8000386:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800038a:	e79c      	b.n	80002c6 <__udivmoddi4+0x9a>
 800038c:	f1c6 0720 	rsb	r7, r6, #32
 8000390:	40b3      	lsls	r3, r6
 8000392:	fa22 fc07 	lsr.w	ip, r2, r7
 8000396:	ea4c 0c03 	orr.w	ip, ip, r3
 800039a:	fa20 f407 	lsr.w	r4, r0, r7
 800039e:	fa01 f306 	lsl.w	r3, r1, r6
 80003a2:	431c      	orrs	r4, r3
 80003a4:	40f9      	lsrs	r1, r7
 80003a6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003aa:	fa00 f306 	lsl.w	r3, r0, r6
 80003ae:	fbb1 f8f9 	udiv	r8, r1, r9
 80003b2:	0c20      	lsrs	r0, r4, #16
 80003b4:	fa1f fe8c 	uxth.w	lr, ip
 80003b8:	fb09 1118 	mls	r1, r9, r8, r1
 80003bc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c0:	fb08 f00e 	mul.w	r0, r8, lr
 80003c4:	4288      	cmp	r0, r1
 80003c6:	fa02 f206 	lsl.w	r2, r2, r6
 80003ca:	d90b      	bls.n	80003e4 <__udivmoddi4+0x1b8>
 80003cc:	eb1c 0101 	adds.w	r1, ip, r1
 80003d0:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003d4:	f080 8088 	bcs.w	80004e8 <__udivmoddi4+0x2bc>
 80003d8:	4288      	cmp	r0, r1
 80003da:	f240 8085 	bls.w	80004e8 <__udivmoddi4+0x2bc>
 80003de:	f1a8 0802 	sub.w	r8, r8, #2
 80003e2:	4461      	add	r1, ip
 80003e4:	1a09      	subs	r1, r1, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb1 f0f9 	udiv	r0, r1, r9
 80003ec:	fb09 1110 	mls	r1, r9, r0, r1
 80003f0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003f4:	fb00 fe0e 	mul.w	lr, r0, lr
 80003f8:	458e      	cmp	lr, r1
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x1e2>
 80003fc:	eb1c 0101 	adds.w	r1, ip, r1
 8000400:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000404:	d26c      	bcs.n	80004e0 <__udivmoddi4+0x2b4>
 8000406:	458e      	cmp	lr, r1
 8000408:	d96a      	bls.n	80004e0 <__udivmoddi4+0x2b4>
 800040a:	3802      	subs	r0, #2
 800040c:	4461      	add	r1, ip
 800040e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000412:	fba0 9402 	umull	r9, r4, r0, r2
 8000416:	eba1 010e 	sub.w	r1, r1, lr
 800041a:	42a1      	cmp	r1, r4
 800041c:	46c8      	mov	r8, r9
 800041e:	46a6      	mov	lr, r4
 8000420:	d356      	bcc.n	80004d0 <__udivmoddi4+0x2a4>
 8000422:	d053      	beq.n	80004cc <__udivmoddi4+0x2a0>
 8000424:	b15d      	cbz	r5, 800043e <__udivmoddi4+0x212>
 8000426:	ebb3 0208 	subs.w	r2, r3, r8
 800042a:	eb61 010e 	sbc.w	r1, r1, lr
 800042e:	fa01 f707 	lsl.w	r7, r1, r7
 8000432:	fa22 f306 	lsr.w	r3, r2, r6
 8000436:	40f1      	lsrs	r1, r6
 8000438:	431f      	orrs	r7, r3
 800043a:	e9c5 7100 	strd	r7, r1, [r5]
 800043e:	2600      	movs	r6, #0
 8000440:	4631      	mov	r1, r6
 8000442:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000446:	f1c2 0320 	rsb	r3, r2, #32
 800044a:	40d8      	lsrs	r0, r3
 800044c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000450:	fa21 f303 	lsr.w	r3, r1, r3
 8000454:	4091      	lsls	r1, r2
 8000456:	4301      	orrs	r1, r0
 8000458:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800045c:	fa1f fe8c 	uxth.w	lr, ip
 8000460:	fbb3 f0f7 	udiv	r0, r3, r7
 8000464:	fb07 3610 	mls	r6, r7, r0, r3
 8000468:	0c0b      	lsrs	r3, r1, #16
 800046a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800046e:	fb00 f60e 	mul.w	r6, r0, lr
 8000472:	429e      	cmp	r6, r3
 8000474:	fa04 f402 	lsl.w	r4, r4, r2
 8000478:	d908      	bls.n	800048c <__udivmoddi4+0x260>
 800047a:	eb1c 0303 	adds.w	r3, ip, r3
 800047e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000482:	d22f      	bcs.n	80004e4 <__udivmoddi4+0x2b8>
 8000484:	429e      	cmp	r6, r3
 8000486:	d92d      	bls.n	80004e4 <__udivmoddi4+0x2b8>
 8000488:	3802      	subs	r0, #2
 800048a:	4463      	add	r3, ip
 800048c:	1b9b      	subs	r3, r3, r6
 800048e:	b289      	uxth	r1, r1
 8000490:	fbb3 f6f7 	udiv	r6, r3, r7
 8000494:	fb07 3316 	mls	r3, r7, r6, r3
 8000498:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049c:	fb06 f30e 	mul.w	r3, r6, lr
 80004a0:	428b      	cmp	r3, r1
 80004a2:	d908      	bls.n	80004b6 <__udivmoddi4+0x28a>
 80004a4:	eb1c 0101 	adds.w	r1, ip, r1
 80004a8:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80004ac:	d216      	bcs.n	80004dc <__udivmoddi4+0x2b0>
 80004ae:	428b      	cmp	r3, r1
 80004b0:	d914      	bls.n	80004dc <__udivmoddi4+0x2b0>
 80004b2:	3e02      	subs	r6, #2
 80004b4:	4461      	add	r1, ip
 80004b6:	1ac9      	subs	r1, r1, r3
 80004b8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004bc:	e738      	b.n	8000330 <__udivmoddi4+0x104>
 80004be:	462e      	mov	r6, r5
 80004c0:	4628      	mov	r0, r5
 80004c2:	e705      	b.n	80002d0 <__udivmoddi4+0xa4>
 80004c4:	4606      	mov	r6, r0
 80004c6:	e6e3      	b.n	8000290 <__udivmoddi4+0x64>
 80004c8:	4618      	mov	r0, r3
 80004ca:	e6f8      	b.n	80002be <__udivmoddi4+0x92>
 80004cc:	454b      	cmp	r3, r9
 80004ce:	d2a9      	bcs.n	8000424 <__udivmoddi4+0x1f8>
 80004d0:	ebb9 0802 	subs.w	r8, r9, r2
 80004d4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004d8:	3801      	subs	r0, #1
 80004da:	e7a3      	b.n	8000424 <__udivmoddi4+0x1f8>
 80004dc:	4646      	mov	r6, r8
 80004de:	e7ea      	b.n	80004b6 <__udivmoddi4+0x28a>
 80004e0:	4620      	mov	r0, r4
 80004e2:	e794      	b.n	800040e <__udivmoddi4+0x1e2>
 80004e4:	4640      	mov	r0, r8
 80004e6:	e7d1      	b.n	800048c <__udivmoddi4+0x260>
 80004e8:	46d0      	mov	r8, sl
 80004ea:	e77b      	b.n	80003e4 <__udivmoddi4+0x1b8>
 80004ec:	3b02      	subs	r3, #2
 80004ee:	4461      	add	r1, ip
 80004f0:	e732      	b.n	8000358 <__udivmoddi4+0x12c>
 80004f2:	4630      	mov	r0, r6
 80004f4:	e709      	b.n	800030a <__udivmoddi4+0xde>
 80004f6:	4464      	add	r4, ip
 80004f8:	3802      	subs	r0, #2
 80004fa:	e742      	b.n	8000382 <__udivmoddi4+0x156>

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8000504:	2200      	movs	r2, #0
 8000506:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800050a:	4804      	ldr	r0, [pc, #16]	; (800051c <SELECT+0x1c>)
 800050c:	f001 fc84 	bl	8001e18 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000510:	2001      	movs	r0, #1
 8000512:	f001 f9cb 	bl	80018ac <HAL_Delay>
}
 8000516:	bf00      	nop
 8000518:	bd80      	pop	{r7, pc}
 800051a:	bf00      	nop
 800051c:	40020000 	.word	0x40020000

08000520 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8000524:	2201      	movs	r2, #1
 8000526:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800052a:	4804      	ldr	r0, [pc, #16]	; (800053c <DESELECT+0x1c>)
 800052c:	f001 fc74 	bl	8001e18 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000530:	2001      	movs	r0, #1
 8000532:	f001 f9bb 	bl	80018ac <HAL_Delay>
}
 8000536:	bf00      	nop
 8000538:	bd80      	pop	{r7, pc}
 800053a:	bf00      	nop
 800053c:	40020000 	.word	0x40020000

08000540 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b082      	sub	sp, #8
 8000544:	af00      	add	r7, sp, #0
 8000546:	4603      	mov	r3, r0
 8000548:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800054a:	bf00      	nop
 800054c:	4b08      	ldr	r3, [pc, #32]	; (8000570 <SPI_TxByte+0x30>)
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	689b      	ldr	r3, [r3, #8]
 8000552:	f003 0302 	and.w	r3, r3, #2
 8000556:	2b02      	cmp	r3, #2
 8000558:	d1f8      	bne.n	800054c <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 800055a:	1df9      	adds	r1, r7, #7
 800055c:	2364      	movs	r3, #100	; 0x64
 800055e:	2201      	movs	r2, #1
 8000560:	4803      	ldr	r0, [pc, #12]	; (8000570 <SPI_TxByte+0x30>)
 8000562:	f002 f994 	bl	800288e <HAL_SPI_Transmit>
}
 8000566:	bf00      	nop
 8000568:	3708      	adds	r7, #8
 800056a:	46bd      	mov	sp, r7
 800056c:	bd80      	pop	{r7, pc}
 800056e:	bf00      	nop
 8000570:	20001084 	.word	0x20001084

08000574 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b082      	sub	sp, #8
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]
 800057c:	460b      	mov	r3, r1
 800057e:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000580:	bf00      	nop
 8000582:	4b08      	ldr	r3, [pc, #32]	; (80005a4 <SPI_TxBuffer+0x30>)
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	689b      	ldr	r3, [r3, #8]
 8000588:	f003 0302 	and.w	r3, r3, #2
 800058c:	2b02      	cmp	r3, #2
 800058e:	d1f8      	bne.n	8000582 <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8000590:	887a      	ldrh	r2, [r7, #2]
 8000592:	2364      	movs	r3, #100	; 0x64
 8000594:	6879      	ldr	r1, [r7, #4]
 8000596:	4803      	ldr	r0, [pc, #12]	; (80005a4 <SPI_TxBuffer+0x30>)
 8000598:	f002 f979 	bl	800288e <HAL_SPI_Transmit>
}
 800059c:	bf00      	nop
 800059e:	3708      	adds	r7, #8
 80005a0:	46bd      	mov	sp, r7
 80005a2:	bd80      	pop	{r7, pc}
 80005a4:	20001084 	.word	0x20001084

080005a8 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b084      	sub	sp, #16
 80005ac:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 80005ae:	23ff      	movs	r3, #255	; 0xff
 80005b0:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80005b2:	bf00      	nop
 80005b4:	4b09      	ldr	r3, [pc, #36]	; (80005dc <SPI_RxByte+0x34>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	689b      	ldr	r3, [r3, #8]
 80005ba:	f003 0302 	and.w	r3, r3, #2
 80005be:	2b02      	cmp	r3, #2
 80005c0:	d1f8      	bne.n	80005b4 <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 80005c2:	1dba      	adds	r2, r7, #6
 80005c4:	1df9      	adds	r1, r7, #7
 80005c6:	2364      	movs	r3, #100	; 0x64
 80005c8:	9300      	str	r3, [sp, #0]
 80005ca:	2301      	movs	r3, #1
 80005cc:	4803      	ldr	r0, [pc, #12]	; (80005dc <SPI_RxByte+0x34>)
 80005ce:	f002 fa9a 	bl	8002b06 <HAL_SPI_TransmitReceive>

	return data;
 80005d2:	79bb      	ldrb	r3, [r7, #6]
}
 80005d4:	4618      	mov	r0, r3
 80005d6:	3708      	adds	r7, #8
 80005d8:	46bd      	mov	sp, r7
 80005da:	bd80      	pop	{r7, pc}
 80005dc:	20001084 	.word	0x20001084

080005e0 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b082      	sub	sp, #8
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 80005e8:	f7ff ffde 	bl	80005a8 <SPI_RxByte>
 80005ec:	4603      	mov	r3, r0
 80005ee:	461a      	mov	r2, r3
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	701a      	strb	r2, [r3, #0]
}
 80005f4:	bf00      	nop
 80005f6:	3708      	adds	r7, #8
 80005f8:	46bd      	mov	sp, r7
 80005fa:	bd80      	pop	{r7, pc}

080005fc <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b082      	sub	sp, #8
 8000600:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 8000602:	4b0a      	ldr	r3, [pc, #40]	; (800062c <SD_ReadyWait+0x30>)
 8000604:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000608:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 800060a:	f7ff ffcd 	bl	80005a8 <SPI_RxByte>
 800060e:	4603      	mov	r3, r0
 8000610:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 8000612:	79fb      	ldrb	r3, [r7, #7]
 8000614:	2bff      	cmp	r3, #255	; 0xff
 8000616:	d003      	beq.n	8000620 <SD_ReadyWait+0x24>
 8000618:	4b04      	ldr	r3, [pc, #16]	; (800062c <SD_ReadyWait+0x30>)
 800061a:	881b      	ldrh	r3, [r3, #0]
 800061c:	2b00      	cmp	r3, #0
 800061e:	d1f4      	bne.n	800060a <SD_ReadyWait+0xe>

	return res;
 8000620:	79fb      	ldrb	r3, [r7, #7]
}
 8000622:	4618      	mov	r0, r3
 8000624:	3708      	adds	r7, #8
 8000626:	46bd      	mov	sp, r7
 8000628:	bd80      	pop	{r7, pc}
 800062a:	bf00      	nop
 800062c:	20000042 	.word	0x20000042

08000630 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b084      	sub	sp, #16
 8000634:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 8000636:	f641 73ff 	movw	r3, #8191	; 0x1fff
 800063a:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 800063c:	f7ff ff70 	bl	8000520 <DESELECT>
	for(int i = 0; i < 10; i++)
 8000640:	2300      	movs	r3, #0
 8000642:	60bb      	str	r3, [r7, #8]
 8000644:	e005      	b.n	8000652 <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 8000646:	20ff      	movs	r0, #255	; 0xff
 8000648:	f7ff ff7a 	bl	8000540 <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 800064c:	68bb      	ldr	r3, [r7, #8]
 800064e:	3301      	adds	r3, #1
 8000650:	60bb      	str	r3, [r7, #8]
 8000652:	68bb      	ldr	r3, [r7, #8]
 8000654:	2b09      	cmp	r3, #9
 8000656:	ddf6      	ble.n	8000646 <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 8000658:	f7ff ff52 	bl	8000500 <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 800065c:	2340      	movs	r3, #64	; 0x40
 800065e:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 8000660:	2300      	movs	r3, #0
 8000662:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 8000664:	2300      	movs	r3, #0
 8000666:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 8000668:	2300      	movs	r3, #0
 800066a:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 800066c:	2300      	movs	r3, #0
 800066e:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 8000670:	2395      	movs	r3, #149	; 0x95
 8000672:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 8000674:	463b      	mov	r3, r7
 8000676:	2106      	movs	r1, #6
 8000678:	4618      	mov	r0, r3
 800067a:	f7ff ff7b 	bl	8000574 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 800067e:	e002      	b.n	8000686 <SD_PowerOn+0x56>
	{
		cnt--;
 8000680:	68fb      	ldr	r3, [r7, #12]
 8000682:	3b01      	subs	r3, #1
 8000684:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 8000686:	f7ff ff8f 	bl	80005a8 <SPI_RxByte>
 800068a:	4603      	mov	r3, r0
 800068c:	2b01      	cmp	r3, #1
 800068e:	d002      	beq.n	8000696 <SD_PowerOn+0x66>
 8000690:	68fb      	ldr	r3, [r7, #12]
 8000692:	2b00      	cmp	r3, #0
 8000694:	d1f4      	bne.n	8000680 <SD_PowerOn+0x50>
	}

	DESELECT();
 8000696:	f7ff ff43 	bl	8000520 <DESELECT>
	SPI_TxByte(0XFF);
 800069a:	20ff      	movs	r0, #255	; 0xff
 800069c:	f7ff ff50 	bl	8000540 <SPI_TxByte>

	PowerFlag = 1;
 80006a0:	4b03      	ldr	r3, [pc, #12]	; (80006b0 <SD_PowerOn+0x80>)
 80006a2:	2201      	movs	r2, #1
 80006a4:	701a      	strb	r2, [r3, #0]
}
 80006a6:	bf00      	nop
 80006a8:	3710      	adds	r7, #16
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	bf00      	nop
 80006b0:	20000045 	.word	0x20000045

080006b4 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void)
{
 80006b4:	b480      	push	{r7}
 80006b6:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 80006b8:	4b03      	ldr	r3, [pc, #12]	; (80006c8 <SD_PowerOff+0x14>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	701a      	strb	r2, [r3, #0]
}
 80006be:	bf00      	nop
 80006c0:	46bd      	mov	sp, r7
 80006c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c6:	4770      	bx	lr
 80006c8:	20000045 	.word	0x20000045

080006cc <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void)
{
 80006cc:	b480      	push	{r7}
 80006ce:	af00      	add	r7, sp, #0
	return PowerFlag;
 80006d0:	4b03      	ldr	r3, [pc, #12]	; (80006e0 <SD_CheckPower+0x14>)
 80006d2:	781b      	ldrb	r3, [r3, #0]
}
 80006d4:	4618      	mov	r0, r3
 80006d6:	46bd      	mov	sp, r7
 80006d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006dc:	4770      	bx	lr
 80006de:	bf00      	nop
 80006e0:	20000045 	.word	0x20000045

080006e4 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b084      	sub	sp, #16
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
 80006ec:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 80006ee:	4b13      	ldr	r3, [pc, #76]	; (800073c <SD_RxDataBlock+0x58>)
 80006f0:	22c8      	movs	r2, #200	; 0xc8
 80006f2:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 80006f4:	f7ff ff58 	bl	80005a8 <SPI_RxByte>
 80006f8:	4603      	mov	r3, r0
 80006fa:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 80006fc:	7bfb      	ldrb	r3, [r7, #15]
 80006fe:	2bff      	cmp	r3, #255	; 0xff
 8000700:	d103      	bne.n	800070a <SD_RxDataBlock+0x26>
 8000702:	4b0e      	ldr	r3, [pc, #56]	; (800073c <SD_RxDataBlock+0x58>)
 8000704:	881b      	ldrh	r3, [r3, #0]
 8000706:	2b00      	cmp	r3, #0
 8000708:	d1f4      	bne.n	80006f4 <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 800070a:	7bfb      	ldrb	r3, [r7, #15]
 800070c:	2bfe      	cmp	r3, #254	; 0xfe
 800070e:	d001      	beq.n	8000714 <SD_RxDataBlock+0x30>
 8000710:	2300      	movs	r3, #0
 8000712:	e00f      	b.n	8000734 <SD_RxDataBlock+0x50>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	1c5a      	adds	r2, r3, #1
 8000718:	607a      	str	r2, [r7, #4]
 800071a:	4618      	mov	r0, r3
 800071c:	f7ff ff60 	bl	80005e0 <SPI_RxBytePtr>
	} while(len--);
 8000720:	683b      	ldr	r3, [r7, #0]
 8000722:	1e5a      	subs	r2, r3, #1
 8000724:	603a      	str	r2, [r7, #0]
 8000726:	2b00      	cmp	r3, #0
 8000728:	d1f4      	bne.n	8000714 <SD_RxDataBlock+0x30>

	/* discard CRC */
	SPI_RxByte();
 800072a:	f7ff ff3d 	bl	80005a8 <SPI_RxByte>
	SPI_RxByte();
 800072e:	f7ff ff3b 	bl	80005a8 <SPI_RxByte>

	return TRUE;
 8000732:	2301      	movs	r3, #1
}
 8000734:	4618      	mov	r0, r3
 8000736:	3710      	adds	r7, #16
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}
 800073c:	20000040 	.word	0x20000040

08000740 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b084      	sub	sp, #16
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
 8000748:	460b      	mov	r3, r1
 800074a:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 800074c:	2300      	movs	r3, #0
 800074e:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 8000750:	f7ff ff54 	bl	80005fc <SD_ReadyWait>
 8000754:	4603      	mov	r3, r0
 8000756:	2bff      	cmp	r3, #255	; 0xff
 8000758:	d001      	beq.n	800075e <SD_TxDataBlock+0x1e>
 800075a:	2300      	movs	r3, #0
 800075c:	e02f      	b.n	80007be <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 800075e:	78fb      	ldrb	r3, [r7, #3]
 8000760:	4618      	mov	r0, r3
 8000762:	f7ff feed 	bl	8000540 <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 8000766:	78fb      	ldrb	r3, [r7, #3]
 8000768:	2bfd      	cmp	r3, #253	; 0xfd
 800076a:	d020      	beq.n	80007ae <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 800076c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000770:	6878      	ldr	r0, [r7, #4]
 8000772:	f7ff feff 	bl	8000574 <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 8000776:	f7ff ff17 	bl	80005a8 <SPI_RxByte>
		SPI_RxByte();
 800077a:	f7ff ff15 	bl	80005a8 <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 800077e:	e00b      	b.n	8000798 <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 8000780:	f7ff ff12 	bl	80005a8 <SPI_RxByte>
 8000784:	4603      	mov	r3, r0
 8000786:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 8000788:	7bfb      	ldrb	r3, [r7, #15]
 800078a:	f003 031f 	and.w	r3, r3, #31
 800078e:	2b05      	cmp	r3, #5
 8000790:	d006      	beq.n	80007a0 <SD_TxDataBlock+0x60>
			i++;
 8000792:	7bbb      	ldrb	r3, [r7, #14]
 8000794:	3301      	adds	r3, #1
 8000796:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 8000798:	7bbb      	ldrb	r3, [r7, #14]
 800079a:	2b40      	cmp	r3, #64	; 0x40
 800079c:	d9f0      	bls.n	8000780 <SD_TxDataBlock+0x40>
 800079e:	e000      	b.n	80007a2 <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 80007a0:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 80007a2:	bf00      	nop
 80007a4:	f7ff ff00 	bl	80005a8 <SPI_RxByte>
 80007a8:	4603      	mov	r3, r0
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d0fa      	beq.n	80007a4 <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 80007ae:	7bfb      	ldrb	r3, [r7, #15]
 80007b0:	f003 031f 	and.w	r3, r3, #31
 80007b4:	2b05      	cmp	r3, #5
 80007b6:	d101      	bne.n	80007bc <SD_TxDataBlock+0x7c>
 80007b8:	2301      	movs	r3, #1
 80007ba:	e000      	b.n	80007be <SD_TxDataBlock+0x7e>

	return FALSE;
 80007bc:	2300      	movs	r3, #0
}
 80007be:	4618      	mov	r0, r3
 80007c0:	3710      	adds	r7, #16
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bd80      	pop	{r7, pc}

080007c6 <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 80007c6:	b580      	push	{r7, lr}
 80007c8:	b084      	sub	sp, #16
 80007ca:	af00      	add	r7, sp, #0
 80007cc:	4603      	mov	r3, r0
 80007ce:	6039      	str	r1, [r7, #0]
 80007d0:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 80007d2:	f7ff ff13 	bl	80005fc <SD_ReadyWait>
 80007d6:	4603      	mov	r3, r0
 80007d8:	2bff      	cmp	r3, #255	; 0xff
 80007da:	d001      	beq.n	80007e0 <SD_SendCmd+0x1a>
 80007dc:	23ff      	movs	r3, #255	; 0xff
 80007de:	e042      	b.n	8000866 <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 80007e0:	79fb      	ldrb	r3, [r7, #7]
 80007e2:	4618      	mov	r0, r3
 80007e4:	f7ff feac 	bl	8000540 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 80007e8:	683b      	ldr	r3, [r7, #0]
 80007ea:	0e1b      	lsrs	r3, r3, #24
 80007ec:	b2db      	uxtb	r3, r3
 80007ee:	4618      	mov	r0, r3
 80007f0:	f7ff fea6 	bl	8000540 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 80007f4:	683b      	ldr	r3, [r7, #0]
 80007f6:	0c1b      	lsrs	r3, r3, #16
 80007f8:	b2db      	uxtb	r3, r3
 80007fa:	4618      	mov	r0, r3
 80007fc:	f7ff fea0 	bl	8000540 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 8000800:	683b      	ldr	r3, [r7, #0]
 8000802:	0a1b      	lsrs	r3, r3, #8
 8000804:	b2db      	uxtb	r3, r3
 8000806:	4618      	mov	r0, r3
 8000808:	f7ff fe9a 	bl	8000540 <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 800080c:	683b      	ldr	r3, [r7, #0]
 800080e:	b2db      	uxtb	r3, r3
 8000810:	4618      	mov	r0, r3
 8000812:	f7ff fe95 	bl	8000540 <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 8000816:	79fb      	ldrb	r3, [r7, #7]
 8000818:	2b40      	cmp	r3, #64	; 0x40
 800081a:	d102      	bne.n	8000822 <SD_SendCmd+0x5c>
 800081c:	2395      	movs	r3, #149	; 0x95
 800081e:	73fb      	strb	r3, [r7, #15]
 8000820:	e007      	b.n	8000832 <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 8000822:	79fb      	ldrb	r3, [r7, #7]
 8000824:	2b48      	cmp	r3, #72	; 0x48
 8000826:	d102      	bne.n	800082e <SD_SendCmd+0x68>
 8000828:	2387      	movs	r3, #135	; 0x87
 800082a:	73fb      	strb	r3, [r7, #15]
 800082c:	e001      	b.n	8000832 <SD_SendCmd+0x6c>
	else crc = 1;
 800082e:	2301      	movs	r3, #1
 8000830:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 8000832:	7bfb      	ldrb	r3, [r7, #15]
 8000834:	4618      	mov	r0, r3
 8000836:	f7ff fe83 	bl	8000540 <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 800083a:	79fb      	ldrb	r3, [r7, #7]
 800083c:	2b4c      	cmp	r3, #76	; 0x4c
 800083e:	d101      	bne.n	8000844 <SD_SendCmd+0x7e>
 8000840:	f7ff feb2 	bl	80005a8 <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 8000844:	230a      	movs	r3, #10
 8000846:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 8000848:	f7ff feae 	bl	80005a8 <SPI_RxByte>
 800084c:	4603      	mov	r3, r0
 800084e:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 8000850:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000854:	2b00      	cmp	r3, #0
 8000856:	da05      	bge.n	8000864 <SD_SendCmd+0x9e>
 8000858:	7bbb      	ldrb	r3, [r7, #14]
 800085a:	3b01      	subs	r3, #1
 800085c:	73bb      	strb	r3, [r7, #14]
 800085e:	7bbb      	ldrb	r3, [r7, #14]
 8000860:	2b00      	cmp	r3, #0
 8000862:	d1f1      	bne.n	8000848 <SD_SendCmd+0x82>

	return res;
 8000864:	7b7b      	ldrb	r3, [r7, #13]
}
 8000866:	4618      	mov	r0, r3
 8000868:	3710      	adds	r7, #16
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}
	...

08000870 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv)
{
 8000870:	b590      	push	{r4, r7, lr}
 8000872:	b085      	sub	sp, #20
 8000874:	af00      	add	r7, sp, #0
 8000876:	4603      	mov	r3, r0
 8000878:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 800087a:	79fb      	ldrb	r3, [r7, #7]
 800087c:	2b00      	cmp	r3, #0
 800087e:	d001      	beq.n	8000884 <SD_disk_initialize+0x14>
 8000880:	2301      	movs	r3, #1
 8000882:	e0d1      	b.n	8000a28 <SD_disk_initialize+0x1b8>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 8000884:	4b6a      	ldr	r3, [pc, #424]	; (8000a30 <SD_disk_initialize+0x1c0>)
 8000886:	781b      	ldrb	r3, [r3, #0]
 8000888:	b2db      	uxtb	r3, r3
 800088a:	f003 0302 	and.w	r3, r3, #2
 800088e:	2b00      	cmp	r3, #0
 8000890:	d003      	beq.n	800089a <SD_disk_initialize+0x2a>
 8000892:	4b67      	ldr	r3, [pc, #412]	; (8000a30 <SD_disk_initialize+0x1c0>)
 8000894:	781b      	ldrb	r3, [r3, #0]
 8000896:	b2db      	uxtb	r3, r3
 8000898:	e0c6      	b.n	8000a28 <SD_disk_initialize+0x1b8>

	/* power on */
	SD_PowerOn();
 800089a:	f7ff fec9 	bl	8000630 <SD_PowerOn>

	/* slave select */
	SELECT();
 800089e:	f7ff fe2f 	bl	8000500 <SELECT>

	/* check disk type */
	type = 0;
 80008a2:	2300      	movs	r3, #0
 80008a4:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 80008a6:	2100      	movs	r1, #0
 80008a8:	2040      	movs	r0, #64	; 0x40
 80008aa:	f7ff ff8c 	bl	80007c6 <SD_SendCmd>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b01      	cmp	r3, #1
 80008b2:	f040 80a1 	bne.w	80009f8 <SD_disk_initialize+0x188>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 80008b6:	4b5f      	ldr	r3, [pc, #380]	; (8000a34 <SD_disk_initialize+0x1c4>)
 80008b8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80008bc:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 80008be:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80008c2:	2048      	movs	r0, #72	; 0x48
 80008c4:	f7ff ff7f 	bl	80007c6 <SD_SendCmd>
 80008c8:	4603      	mov	r3, r0
 80008ca:	2b01      	cmp	r3, #1
 80008cc:	d155      	bne.n	800097a <SD_disk_initialize+0x10a>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 80008ce:	2300      	movs	r3, #0
 80008d0:	73fb      	strb	r3, [r7, #15]
 80008d2:	e00c      	b.n	80008ee <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 80008d4:	7bfc      	ldrb	r4, [r7, #15]
 80008d6:	f7ff fe67 	bl	80005a8 <SPI_RxByte>
 80008da:	4603      	mov	r3, r0
 80008dc:	461a      	mov	r2, r3
 80008de:	f104 0310 	add.w	r3, r4, #16
 80008e2:	443b      	add	r3, r7
 80008e4:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 80008e8:	7bfb      	ldrb	r3, [r7, #15]
 80008ea:	3301      	adds	r3, #1
 80008ec:	73fb      	strb	r3, [r7, #15]
 80008ee:	7bfb      	ldrb	r3, [r7, #15]
 80008f0:	2b03      	cmp	r3, #3
 80008f2:	d9ef      	bls.n	80008d4 <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 80008f4:	7abb      	ldrb	r3, [r7, #10]
 80008f6:	2b01      	cmp	r3, #1
 80008f8:	d17e      	bne.n	80009f8 <SD_disk_initialize+0x188>
 80008fa:	7afb      	ldrb	r3, [r7, #11]
 80008fc:	2baa      	cmp	r3, #170	; 0xaa
 80008fe:	d17b      	bne.n	80009f8 <SD_disk_initialize+0x188>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8000900:	2100      	movs	r1, #0
 8000902:	2077      	movs	r0, #119	; 0x77
 8000904:	f7ff ff5f 	bl	80007c6 <SD_SendCmd>
 8000908:	4603      	mov	r3, r0
 800090a:	2b01      	cmp	r3, #1
 800090c:	d807      	bhi.n	800091e <SD_disk_initialize+0xae>
 800090e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8000912:	2069      	movs	r0, #105	; 0x69
 8000914:	f7ff ff57 	bl	80007c6 <SD_SendCmd>
 8000918:	4603      	mov	r3, r0
 800091a:	2b00      	cmp	r3, #0
 800091c:	d004      	beq.n	8000928 <SD_disk_initialize+0xb8>
				} while (Timer1);
 800091e:	4b45      	ldr	r3, [pc, #276]	; (8000a34 <SD_disk_initialize+0x1c4>)
 8000920:	881b      	ldrh	r3, [r3, #0]
 8000922:	2b00      	cmp	r3, #0
 8000924:	d1ec      	bne.n	8000900 <SD_disk_initialize+0x90>
 8000926:	e000      	b.n	800092a <SD_disk_initialize+0xba>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8000928:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 800092a:	4b42      	ldr	r3, [pc, #264]	; (8000a34 <SD_disk_initialize+0x1c4>)
 800092c:	881b      	ldrh	r3, [r3, #0]
 800092e:	2b00      	cmp	r3, #0
 8000930:	d062      	beq.n	80009f8 <SD_disk_initialize+0x188>
 8000932:	2100      	movs	r1, #0
 8000934:	207a      	movs	r0, #122	; 0x7a
 8000936:	f7ff ff46 	bl	80007c6 <SD_SendCmd>
 800093a:	4603      	mov	r3, r0
 800093c:	2b00      	cmp	r3, #0
 800093e:	d15b      	bne.n	80009f8 <SD_disk_initialize+0x188>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 8000940:	2300      	movs	r3, #0
 8000942:	73fb      	strb	r3, [r7, #15]
 8000944:	e00c      	b.n	8000960 <SD_disk_initialize+0xf0>
					{
						ocr[n] = SPI_RxByte();
 8000946:	7bfc      	ldrb	r4, [r7, #15]
 8000948:	f7ff fe2e 	bl	80005a8 <SPI_RxByte>
 800094c:	4603      	mov	r3, r0
 800094e:	461a      	mov	r2, r3
 8000950:	f104 0310 	add.w	r3, r4, #16
 8000954:	443b      	add	r3, r7
 8000956:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 800095a:	7bfb      	ldrb	r3, [r7, #15]
 800095c:	3301      	adds	r3, #1
 800095e:	73fb      	strb	r3, [r7, #15]
 8000960:	7bfb      	ldrb	r3, [r7, #15]
 8000962:	2b03      	cmp	r3, #3
 8000964:	d9ef      	bls.n	8000946 <SD_disk_initialize+0xd6>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 8000966:	7a3b      	ldrb	r3, [r7, #8]
 8000968:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800096c:	2b00      	cmp	r3, #0
 800096e:	d001      	beq.n	8000974 <SD_disk_initialize+0x104>
 8000970:	230c      	movs	r3, #12
 8000972:	e000      	b.n	8000976 <SD_disk_initialize+0x106>
 8000974:	2304      	movs	r3, #4
 8000976:	73bb      	strb	r3, [r7, #14]
 8000978:	e03e      	b.n	80009f8 <SD_disk_initialize+0x188>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 800097a:	2100      	movs	r1, #0
 800097c:	2077      	movs	r0, #119	; 0x77
 800097e:	f7ff ff22 	bl	80007c6 <SD_SendCmd>
 8000982:	4603      	mov	r3, r0
 8000984:	2b01      	cmp	r3, #1
 8000986:	d808      	bhi.n	800099a <SD_disk_initialize+0x12a>
 8000988:	2100      	movs	r1, #0
 800098a:	2069      	movs	r0, #105	; 0x69
 800098c:	f7ff ff1b 	bl	80007c6 <SD_SendCmd>
 8000990:	4603      	mov	r3, r0
 8000992:	2b01      	cmp	r3, #1
 8000994:	d801      	bhi.n	800099a <SD_disk_initialize+0x12a>
 8000996:	2302      	movs	r3, #2
 8000998:	e000      	b.n	800099c <SD_disk_initialize+0x12c>
 800099a:	2301      	movs	r3, #1
 800099c:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 800099e:	7bbb      	ldrb	r3, [r7, #14]
 80009a0:	2b02      	cmp	r3, #2
 80009a2:	d10e      	bne.n	80009c2 <SD_disk_initialize+0x152>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 80009a4:	2100      	movs	r1, #0
 80009a6:	2077      	movs	r0, #119	; 0x77
 80009a8:	f7ff ff0d 	bl	80007c6 <SD_SendCmd>
 80009ac:	4603      	mov	r3, r0
 80009ae:	2b01      	cmp	r3, #1
 80009b0:	d80e      	bhi.n	80009d0 <SD_disk_initialize+0x160>
 80009b2:	2100      	movs	r1, #0
 80009b4:	2069      	movs	r0, #105	; 0x69
 80009b6:	f7ff ff06 	bl	80007c6 <SD_SendCmd>
 80009ba:	4603      	mov	r3, r0
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d107      	bne.n	80009d0 <SD_disk_initialize+0x160>
 80009c0:	e00c      	b.n	80009dc <SD_disk_initialize+0x16c>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 80009c2:	2100      	movs	r1, #0
 80009c4:	2041      	movs	r0, #65	; 0x41
 80009c6:	f7ff fefe 	bl	80007c6 <SD_SendCmd>
 80009ca:	4603      	mov	r3, r0
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d004      	beq.n	80009da <SD_disk_initialize+0x16a>
				}

			} while (Timer1);
 80009d0:	4b18      	ldr	r3, [pc, #96]	; (8000a34 <SD_disk_initialize+0x1c4>)
 80009d2:	881b      	ldrh	r3, [r3, #0]
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d1e2      	bne.n	800099e <SD_disk_initialize+0x12e>
 80009d8:	e000      	b.n	80009dc <SD_disk_initialize+0x16c>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 80009da:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 80009dc:	4b15      	ldr	r3, [pc, #84]	; (8000a34 <SD_disk_initialize+0x1c4>)
 80009de:	881b      	ldrh	r3, [r3, #0]
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d007      	beq.n	80009f4 <SD_disk_initialize+0x184>
 80009e4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009e8:	2050      	movs	r0, #80	; 0x50
 80009ea:	f7ff feec 	bl	80007c6 <SD_SendCmd>
 80009ee:	4603      	mov	r3, r0
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d001      	beq.n	80009f8 <SD_disk_initialize+0x188>
 80009f4:	2300      	movs	r3, #0
 80009f6:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 80009f8:	4a0f      	ldr	r2, [pc, #60]	; (8000a38 <SD_disk_initialize+0x1c8>)
 80009fa:	7bbb      	ldrb	r3, [r7, #14]
 80009fc:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 80009fe:	f7ff fd8f 	bl	8000520 <DESELECT>
	SPI_RxByte();
 8000a02:	f7ff fdd1 	bl	80005a8 <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 8000a06:	7bbb      	ldrb	r3, [r7, #14]
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d008      	beq.n	8000a1e <SD_disk_initialize+0x1ae>
	{
		Stat &= ~STA_NOINIT;
 8000a0c:	4b08      	ldr	r3, [pc, #32]	; (8000a30 <SD_disk_initialize+0x1c0>)
 8000a0e:	781b      	ldrb	r3, [r3, #0]
 8000a10:	b2db      	uxtb	r3, r3
 8000a12:	f023 0301 	bic.w	r3, r3, #1
 8000a16:	b2da      	uxtb	r2, r3
 8000a18:	4b05      	ldr	r3, [pc, #20]	; (8000a30 <SD_disk_initialize+0x1c0>)
 8000a1a:	701a      	strb	r2, [r3, #0]
 8000a1c:	e001      	b.n	8000a22 <SD_disk_initialize+0x1b2>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 8000a1e:	f7ff fe49 	bl	80006b4 <SD_PowerOff>
	}

	return Stat;
 8000a22:	4b03      	ldr	r3, [pc, #12]	; (8000a30 <SD_disk_initialize+0x1c0>)
 8000a24:	781b      	ldrb	r3, [r3, #0]
 8000a26:	b2db      	uxtb	r3, r3
}
 8000a28:	4618      	mov	r0, r3
 8000a2a:	3714      	adds	r7, #20
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	bd90      	pop	{r4, r7, pc}
 8000a30:	20000000 	.word	0x20000000
 8000a34:	20000040 	.word	0x20000040
 8000a38:	20000044 	.word	0x20000044

08000a3c <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	b083      	sub	sp, #12
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	4603      	mov	r3, r0
 8000a44:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 8000a46:	79fb      	ldrb	r3, [r7, #7]
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d001      	beq.n	8000a50 <SD_disk_status+0x14>
 8000a4c:	2301      	movs	r3, #1
 8000a4e:	e002      	b.n	8000a56 <SD_disk_status+0x1a>
	return Stat;
 8000a50:	4b04      	ldr	r3, [pc, #16]	; (8000a64 <SD_disk_status+0x28>)
 8000a52:	781b      	ldrb	r3, [r3, #0]
 8000a54:	b2db      	uxtb	r3, r3
}
 8000a56:	4618      	mov	r0, r3
 8000a58:	370c      	adds	r7, #12
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a60:	4770      	bx	lr
 8000a62:	bf00      	nop
 8000a64:	20000000 	.word	0x20000000

08000a68 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b084      	sub	sp, #16
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	60b9      	str	r1, [r7, #8]
 8000a70:	607a      	str	r2, [r7, #4]
 8000a72:	603b      	str	r3, [r7, #0]
 8000a74:	4603      	mov	r3, r0
 8000a76:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8000a78:	7bfb      	ldrb	r3, [r7, #15]
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d102      	bne.n	8000a84 <SD_disk_read+0x1c>
 8000a7e:	683b      	ldr	r3, [r7, #0]
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d101      	bne.n	8000a88 <SD_disk_read+0x20>
 8000a84:	2304      	movs	r3, #4
 8000a86:	e051      	b.n	8000b2c <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000a88:	4b2a      	ldr	r3, [pc, #168]	; (8000b34 <SD_disk_read+0xcc>)
 8000a8a:	781b      	ldrb	r3, [r3, #0]
 8000a8c:	b2db      	uxtb	r3, r3
 8000a8e:	f003 0301 	and.w	r3, r3, #1
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d001      	beq.n	8000a9a <SD_disk_read+0x32>
 8000a96:	2303      	movs	r3, #3
 8000a98:	e048      	b.n	8000b2c <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8000a9a:	4b27      	ldr	r3, [pc, #156]	; (8000b38 <SD_disk_read+0xd0>)
 8000a9c:	781b      	ldrb	r3, [r3, #0]
 8000a9e:	f003 0304 	and.w	r3, r3, #4
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d102      	bne.n	8000aac <SD_disk_read+0x44>
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	025b      	lsls	r3, r3, #9
 8000aaa:	607b      	str	r3, [r7, #4]

	SELECT();
 8000aac:	f7ff fd28 	bl	8000500 <SELECT>

	if (count == 1)
 8000ab0:	683b      	ldr	r3, [r7, #0]
 8000ab2:	2b01      	cmp	r3, #1
 8000ab4:	d111      	bne.n	8000ada <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8000ab6:	6879      	ldr	r1, [r7, #4]
 8000ab8:	2051      	movs	r0, #81	; 0x51
 8000aba:	f7ff fe84 	bl	80007c6 <SD_SendCmd>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d129      	bne.n	8000b18 <SD_disk_read+0xb0>
 8000ac4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ac8:	68b8      	ldr	r0, [r7, #8]
 8000aca:	f7ff fe0b 	bl	80006e4 <SD_RxDataBlock>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d021      	beq.n	8000b18 <SD_disk_read+0xb0>
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	603b      	str	r3, [r7, #0]
 8000ad8:	e01e      	b.n	8000b18 <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 8000ada:	6879      	ldr	r1, [r7, #4]
 8000adc:	2052      	movs	r0, #82	; 0x52
 8000ade:	f7ff fe72 	bl	80007c6 <SD_SendCmd>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d117      	bne.n	8000b18 <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 8000ae8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000aec:	68b8      	ldr	r0, [r7, #8]
 8000aee:	f7ff fdf9 	bl	80006e4 <SD_RxDataBlock>
 8000af2:	4603      	mov	r3, r0
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d00a      	beq.n	8000b0e <SD_disk_read+0xa6>
				buff += 512;
 8000af8:	68bb      	ldr	r3, [r7, #8]
 8000afa:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000afe:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8000b00:	683b      	ldr	r3, [r7, #0]
 8000b02:	3b01      	subs	r3, #1
 8000b04:	603b      	str	r3, [r7, #0]
 8000b06:	683b      	ldr	r3, [r7, #0]
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d1ed      	bne.n	8000ae8 <SD_disk_read+0x80>
 8000b0c:	e000      	b.n	8000b10 <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 8000b0e:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 8000b10:	2100      	movs	r1, #0
 8000b12:	204c      	movs	r0, #76	; 0x4c
 8000b14:	f7ff fe57 	bl	80007c6 <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 8000b18:	f7ff fd02 	bl	8000520 <DESELECT>
	SPI_RxByte();
 8000b1c:	f7ff fd44 	bl	80005a8 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8000b20:	683b      	ldr	r3, [r7, #0]
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	bf14      	ite	ne
 8000b26:	2301      	movne	r3, #1
 8000b28:	2300      	moveq	r3, #0
 8000b2a:	b2db      	uxtb	r3, r3
}
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	3710      	adds	r7, #16
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bd80      	pop	{r7, pc}
 8000b34:	20000000 	.word	0x20000000
 8000b38:	20000044 	.word	0x20000044

08000b3c <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b084      	sub	sp, #16
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	60b9      	str	r1, [r7, #8]
 8000b44:	607a      	str	r2, [r7, #4]
 8000b46:	603b      	str	r3, [r7, #0]
 8000b48:	4603      	mov	r3, r0
 8000b4a:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8000b4c:	7bfb      	ldrb	r3, [r7, #15]
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d102      	bne.n	8000b58 <SD_disk_write+0x1c>
 8000b52:	683b      	ldr	r3, [r7, #0]
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d101      	bne.n	8000b5c <SD_disk_write+0x20>
 8000b58:	2304      	movs	r3, #4
 8000b5a:	e06b      	b.n	8000c34 <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000b5c:	4b37      	ldr	r3, [pc, #220]	; (8000c3c <SD_disk_write+0x100>)
 8000b5e:	781b      	ldrb	r3, [r3, #0]
 8000b60:	b2db      	uxtb	r3, r3
 8000b62:	f003 0301 	and.w	r3, r3, #1
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d001      	beq.n	8000b6e <SD_disk_write+0x32>
 8000b6a:	2303      	movs	r3, #3
 8000b6c:	e062      	b.n	8000c34 <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 8000b6e:	4b33      	ldr	r3, [pc, #204]	; (8000c3c <SD_disk_write+0x100>)
 8000b70:	781b      	ldrb	r3, [r3, #0]
 8000b72:	b2db      	uxtb	r3, r3
 8000b74:	f003 0304 	and.w	r3, r3, #4
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d001      	beq.n	8000b80 <SD_disk_write+0x44>
 8000b7c:	2302      	movs	r3, #2
 8000b7e:	e059      	b.n	8000c34 <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8000b80:	4b2f      	ldr	r3, [pc, #188]	; (8000c40 <SD_disk_write+0x104>)
 8000b82:	781b      	ldrb	r3, [r3, #0]
 8000b84:	f003 0304 	and.w	r3, r3, #4
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d102      	bne.n	8000b92 <SD_disk_write+0x56>
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	025b      	lsls	r3, r3, #9
 8000b90:	607b      	str	r3, [r7, #4]

	SELECT();
 8000b92:	f7ff fcb5 	bl	8000500 <SELECT>

	if (count == 1)
 8000b96:	683b      	ldr	r3, [r7, #0]
 8000b98:	2b01      	cmp	r3, #1
 8000b9a:	d110      	bne.n	8000bbe <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8000b9c:	6879      	ldr	r1, [r7, #4]
 8000b9e:	2058      	movs	r0, #88	; 0x58
 8000ba0:	f7ff fe11 	bl	80007c6 <SD_SendCmd>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d13a      	bne.n	8000c20 <SD_disk_write+0xe4>
 8000baa:	21fe      	movs	r1, #254	; 0xfe
 8000bac:	68b8      	ldr	r0, [r7, #8]
 8000bae:	f7ff fdc7 	bl	8000740 <SD_TxDataBlock>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d033      	beq.n	8000c20 <SD_disk_write+0xe4>
			count = 0;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	603b      	str	r3, [r7, #0]
 8000bbc:	e030      	b.n	8000c20 <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 8000bbe:	4b20      	ldr	r3, [pc, #128]	; (8000c40 <SD_disk_write+0x104>)
 8000bc0:	781b      	ldrb	r3, [r3, #0]
 8000bc2:	f003 0302 	and.w	r3, r3, #2
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d007      	beq.n	8000bda <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 8000bca:	2100      	movs	r1, #0
 8000bcc:	2077      	movs	r0, #119	; 0x77
 8000bce:	f7ff fdfa 	bl	80007c6 <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 8000bd2:	6839      	ldr	r1, [r7, #0]
 8000bd4:	2057      	movs	r0, #87	; 0x57
 8000bd6:	f7ff fdf6 	bl	80007c6 <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 8000bda:	6879      	ldr	r1, [r7, #4]
 8000bdc:	2059      	movs	r0, #89	; 0x59
 8000bde:	f7ff fdf2 	bl	80007c6 <SD_SendCmd>
 8000be2:	4603      	mov	r3, r0
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d11b      	bne.n	8000c20 <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8000be8:	21fc      	movs	r1, #252	; 0xfc
 8000bea:	68b8      	ldr	r0, [r7, #8]
 8000bec:	f7ff fda8 	bl	8000740 <SD_TxDataBlock>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d00a      	beq.n	8000c0c <SD_disk_write+0xd0>
				buff += 512;
 8000bf6:	68bb      	ldr	r3, [r7, #8]
 8000bf8:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000bfc:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8000bfe:	683b      	ldr	r3, [r7, #0]
 8000c00:	3b01      	subs	r3, #1
 8000c02:	603b      	str	r3, [r7, #0]
 8000c04:	683b      	ldr	r3, [r7, #0]
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d1ee      	bne.n	8000be8 <SD_disk_write+0xac>
 8000c0a:	e000      	b.n	8000c0e <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8000c0c:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 8000c0e:	21fd      	movs	r1, #253	; 0xfd
 8000c10:	2000      	movs	r0, #0
 8000c12:	f7ff fd95 	bl	8000740 <SD_TxDataBlock>
 8000c16:	4603      	mov	r3, r0
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d101      	bne.n	8000c20 <SD_disk_write+0xe4>
			{
				count = 1;
 8000c1c:	2301      	movs	r3, #1
 8000c1e:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 8000c20:	f7ff fc7e 	bl	8000520 <DESELECT>
	SPI_RxByte();
 8000c24:	f7ff fcc0 	bl	80005a8 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8000c28:	683b      	ldr	r3, [r7, #0]
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	bf14      	ite	ne
 8000c2e:	2301      	movne	r3, #1
 8000c30:	2300      	moveq	r3, #0
 8000c32:	b2db      	uxtb	r3, r3
}
 8000c34:	4618      	mov	r0, r3
 8000c36:	3710      	adds	r7, #16
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bd80      	pop	{r7, pc}
 8000c3c:	20000000 	.word	0x20000000
 8000c40:	20000044 	.word	0x20000044

08000c44 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 8000c44:	b590      	push	{r4, r7, lr}
 8000c46:	b08b      	sub	sp, #44	; 0x2c
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	603a      	str	r2, [r7, #0]
 8000c4e:	71fb      	strb	r3, [r7, #7]
 8000c50:	460b      	mov	r3, r1
 8000c52:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 8000c54:	683b      	ldr	r3, [r7, #0]
 8000c56:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 8000c58:	79fb      	ldrb	r3, [r7, #7]
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d001      	beq.n	8000c62 <SD_disk_ioctl+0x1e>
 8000c5e:	2304      	movs	r3, #4
 8000c60:	e115      	b.n	8000e8e <SD_disk_ioctl+0x24a>
	res = RES_ERROR;
 8000c62:	2301      	movs	r3, #1
 8000c64:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (ctrl == CTRL_POWER)
 8000c68:	79bb      	ldrb	r3, [r7, #6]
 8000c6a:	2b05      	cmp	r3, #5
 8000c6c:	d124      	bne.n	8000cb8 <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 8000c6e:	6a3b      	ldr	r3, [r7, #32]
 8000c70:	781b      	ldrb	r3, [r3, #0]
 8000c72:	2b02      	cmp	r3, #2
 8000c74:	d012      	beq.n	8000c9c <SD_disk_ioctl+0x58>
 8000c76:	2b02      	cmp	r3, #2
 8000c78:	dc1a      	bgt.n	8000cb0 <SD_disk_ioctl+0x6c>
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d002      	beq.n	8000c84 <SD_disk_ioctl+0x40>
 8000c7e:	2b01      	cmp	r3, #1
 8000c80:	d006      	beq.n	8000c90 <SD_disk_ioctl+0x4c>
 8000c82:	e015      	b.n	8000cb0 <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 8000c84:	f7ff fd16 	bl	80006b4 <SD_PowerOff>
			res = RES_OK;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000c8e:	e0fc      	b.n	8000e8a <SD_disk_ioctl+0x246>
		case 1:
			SD_PowerOn();		/* Power On */
 8000c90:	f7ff fcce 	bl	8000630 <SD_PowerOn>
			res = RES_OK;
 8000c94:	2300      	movs	r3, #0
 8000c96:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000c9a:	e0f6      	b.n	8000e8a <SD_disk_ioctl+0x246>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 8000c9c:	6a3b      	ldr	r3, [r7, #32]
 8000c9e:	1c5c      	adds	r4, r3, #1
 8000ca0:	f7ff fd14 	bl	80006cc <SD_CheckPower>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 8000ca8:	2300      	movs	r3, #0
 8000caa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000cae:	e0ec      	b.n	8000e8a <SD_disk_ioctl+0x246>
		default:
			res = RES_PARERR;
 8000cb0:	2304      	movs	r3, #4
 8000cb2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000cb6:	e0e8      	b.n	8000e8a <SD_disk_ioctl+0x246>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000cb8:	4b77      	ldr	r3, [pc, #476]	; (8000e98 <SD_disk_ioctl+0x254>)
 8000cba:	781b      	ldrb	r3, [r3, #0]
 8000cbc:	b2db      	uxtb	r3, r3
 8000cbe:	f003 0301 	and.w	r3, r3, #1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d001      	beq.n	8000cca <SD_disk_ioctl+0x86>
 8000cc6:	2303      	movs	r3, #3
 8000cc8:	e0e1      	b.n	8000e8e <SD_disk_ioctl+0x24a>

		SELECT();
 8000cca:	f7ff fc19 	bl	8000500 <SELECT>

		switch (ctrl)
 8000cce:	79bb      	ldrb	r3, [r7, #6]
 8000cd0:	2b0d      	cmp	r3, #13
 8000cd2:	f200 80cb 	bhi.w	8000e6c <SD_disk_ioctl+0x228>
 8000cd6:	a201      	add	r2, pc, #4	; (adr r2, 8000cdc <SD_disk_ioctl+0x98>)
 8000cd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cdc:	08000dd7 	.word	0x08000dd7
 8000ce0:	08000d15 	.word	0x08000d15
 8000ce4:	08000dc7 	.word	0x08000dc7
 8000ce8:	08000e6d 	.word	0x08000e6d
 8000cec:	08000e6d 	.word	0x08000e6d
 8000cf0:	08000e6d 	.word	0x08000e6d
 8000cf4:	08000e6d 	.word	0x08000e6d
 8000cf8:	08000e6d 	.word	0x08000e6d
 8000cfc:	08000e6d 	.word	0x08000e6d
 8000d00:	08000e6d 	.word	0x08000e6d
 8000d04:	08000e6d 	.word	0x08000e6d
 8000d08:	08000de9 	.word	0x08000de9
 8000d0c:	08000e0d 	.word	0x08000e0d
 8000d10:	08000e31 	.word	0x08000e31
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8000d14:	2100      	movs	r1, #0
 8000d16:	2049      	movs	r0, #73	; 0x49
 8000d18:	f7ff fd55 	bl	80007c6 <SD_SendCmd>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	f040 80a8 	bne.w	8000e74 <SD_disk_ioctl+0x230>
 8000d24:	f107 030c 	add.w	r3, r7, #12
 8000d28:	2110      	movs	r1, #16
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	f7ff fcda 	bl	80006e4 <SD_RxDataBlock>
 8000d30:	4603      	mov	r3, r0
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	f000 809e 	beq.w	8000e74 <SD_disk_ioctl+0x230>
			{
				if ((csd[0] >> 6) == 1)
 8000d38:	7b3b      	ldrb	r3, [r7, #12]
 8000d3a:	099b      	lsrs	r3, r3, #6
 8000d3c:	b2db      	uxtb	r3, r3
 8000d3e:	2b01      	cmp	r3, #1
 8000d40:	d10e      	bne.n	8000d60 <SD_disk_ioctl+0x11c>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8000d42:	7d7b      	ldrb	r3, [r7, #21]
 8000d44:	b29a      	uxth	r2, r3
 8000d46:	7d3b      	ldrb	r3, [r7, #20]
 8000d48:	b29b      	uxth	r3, r3
 8000d4a:	021b      	lsls	r3, r3, #8
 8000d4c:	b29b      	uxth	r3, r3
 8000d4e:	4413      	add	r3, r2
 8000d50:	b29b      	uxth	r3, r3
 8000d52:	3301      	adds	r3, #1
 8000d54:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 8000d56:	8bfb      	ldrh	r3, [r7, #30]
 8000d58:	029a      	lsls	r2, r3, #10
 8000d5a:	683b      	ldr	r3, [r7, #0]
 8000d5c:	601a      	str	r2, [r3, #0]
 8000d5e:	e02e      	b.n	8000dbe <SD_disk_ioctl+0x17a>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8000d60:	7c7b      	ldrb	r3, [r7, #17]
 8000d62:	f003 030f 	and.w	r3, r3, #15
 8000d66:	b2da      	uxtb	r2, r3
 8000d68:	7dbb      	ldrb	r3, [r7, #22]
 8000d6a:	09db      	lsrs	r3, r3, #7
 8000d6c:	b2db      	uxtb	r3, r3
 8000d6e:	4413      	add	r3, r2
 8000d70:	b2da      	uxtb	r2, r3
 8000d72:	7d7b      	ldrb	r3, [r7, #21]
 8000d74:	005b      	lsls	r3, r3, #1
 8000d76:	b2db      	uxtb	r3, r3
 8000d78:	f003 0306 	and.w	r3, r3, #6
 8000d7c:	b2db      	uxtb	r3, r3
 8000d7e:	4413      	add	r3, r2
 8000d80:	b2db      	uxtb	r3, r3
 8000d82:	3302      	adds	r3, #2
 8000d84:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8000d88:	7d3b      	ldrb	r3, [r7, #20]
 8000d8a:	099b      	lsrs	r3, r3, #6
 8000d8c:	b2db      	uxtb	r3, r3
 8000d8e:	b29a      	uxth	r2, r3
 8000d90:	7cfb      	ldrb	r3, [r7, #19]
 8000d92:	b29b      	uxth	r3, r3
 8000d94:	009b      	lsls	r3, r3, #2
 8000d96:	b29b      	uxth	r3, r3
 8000d98:	4413      	add	r3, r2
 8000d9a:	b29a      	uxth	r2, r3
 8000d9c:	7cbb      	ldrb	r3, [r7, #18]
 8000d9e:	029b      	lsls	r3, r3, #10
 8000da0:	b29b      	uxth	r3, r3
 8000da2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8000da6:	b29b      	uxth	r3, r3
 8000da8:	4413      	add	r3, r2
 8000daa:	b29b      	uxth	r3, r3
 8000dac:	3301      	adds	r3, #1
 8000dae:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 8000db0:	8bfa      	ldrh	r2, [r7, #30]
 8000db2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000db6:	3b09      	subs	r3, #9
 8000db8:	409a      	lsls	r2, r3
 8000dba:	683b      	ldr	r3, [r7, #0]
 8000dbc:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 8000dc4:	e056      	b.n	8000e74 <SD_disk_ioctl+0x230>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 8000dc6:	683b      	ldr	r3, [r7, #0]
 8000dc8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000dcc:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000dd4:	e055      	b.n	8000e82 <SD_disk_ioctl+0x23e>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8000dd6:	f7ff fc11 	bl	80005fc <SD_ReadyWait>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	2bff      	cmp	r3, #255	; 0xff
 8000dde:	d14b      	bne.n	8000e78 <SD_disk_ioctl+0x234>
 8000de0:	2300      	movs	r3, #0
 8000de2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000de6:	e047      	b.n	8000e78 <SD_disk_ioctl+0x234>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8000de8:	2100      	movs	r1, #0
 8000dea:	2049      	movs	r0, #73	; 0x49
 8000dec:	f7ff fceb 	bl	80007c6 <SD_SendCmd>
 8000df0:	4603      	mov	r3, r0
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d142      	bne.n	8000e7c <SD_disk_ioctl+0x238>
 8000df6:	2110      	movs	r1, #16
 8000df8:	6a38      	ldr	r0, [r7, #32]
 8000dfa:	f7ff fc73 	bl	80006e4 <SD_RxDataBlock>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d03b      	beq.n	8000e7c <SD_disk_ioctl+0x238>
 8000e04:	2300      	movs	r3, #0
 8000e06:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000e0a:	e037      	b.n	8000e7c <SD_disk_ioctl+0x238>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8000e0c:	2100      	movs	r1, #0
 8000e0e:	204a      	movs	r0, #74	; 0x4a
 8000e10:	f7ff fcd9 	bl	80007c6 <SD_SendCmd>
 8000e14:	4603      	mov	r3, r0
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d132      	bne.n	8000e80 <SD_disk_ioctl+0x23c>
 8000e1a:	2110      	movs	r1, #16
 8000e1c:	6a38      	ldr	r0, [r7, #32]
 8000e1e:	f7ff fc61 	bl	80006e4 <SD_RxDataBlock>
 8000e22:	4603      	mov	r3, r0
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d02b      	beq.n	8000e80 <SD_disk_ioctl+0x23c>
 8000e28:	2300      	movs	r3, #0
 8000e2a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000e2e:	e027      	b.n	8000e80 <SD_disk_ioctl+0x23c>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 8000e30:	2100      	movs	r1, #0
 8000e32:	207a      	movs	r0, #122	; 0x7a
 8000e34:	f7ff fcc7 	bl	80007c6 <SD_SendCmd>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d116      	bne.n	8000e6c <SD_disk_ioctl+0x228>
			{
				for (n = 0; n < 4; n++)
 8000e3e:	2300      	movs	r3, #0
 8000e40:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000e44:	e00b      	b.n	8000e5e <SD_disk_ioctl+0x21a>
				{
					*ptr++ = SPI_RxByte();
 8000e46:	6a3c      	ldr	r4, [r7, #32]
 8000e48:	1c63      	adds	r3, r4, #1
 8000e4a:	623b      	str	r3, [r7, #32]
 8000e4c:	f7ff fbac 	bl	80005a8 <SPI_RxByte>
 8000e50:	4603      	mov	r3, r0
 8000e52:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 8000e54:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000e58:	3301      	adds	r3, #1
 8000e5a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000e5e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000e62:	2b03      	cmp	r3, #3
 8000e64:	d9ef      	bls.n	8000e46 <SD_disk_ioctl+0x202>
				}
				res = RES_OK;
 8000e66:	2300      	movs	r3, #0
 8000e68:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
		default:
			res = RES_PARERR;
 8000e6c:	2304      	movs	r3, #4
 8000e6e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000e72:	e006      	b.n	8000e82 <SD_disk_ioctl+0x23e>
			break;
 8000e74:	bf00      	nop
 8000e76:	e004      	b.n	8000e82 <SD_disk_ioctl+0x23e>
			break;
 8000e78:	bf00      	nop
 8000e7a:	e002      	b.n	8000e82 <SD_disk_ioctl+0x23e>
			break;
 8000e7c:	bf00      	nop
 8000e7e:	e000      	b.n	8000e82 <SD_disk_ioctl+0x23e>
			break;
 8000e80:	bf00      	nop
		}

		DESELECT();
 8000e82:	f7ff fb4d 	bl	8000520 <DESELECT>
		SPI_RxByte();
 8000e86:	f7ff fb8f 	bl	80005a8 <SPI_RxByte>
	}

	return res;
 8000e8a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8000e8e:	4618      	mov	r0, r3
 8000e90:	372c      	adds	r7, #44	; 0x2c
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd90      	pop	{r4, r7, pc}
 8000e96:	bf00      	nop
 8000e98:	20000000 	.word	0x20000000

08000e9c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ea0:	f000 fc92 	bl	80017c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ea4:	f000 f9a6 	bl	80011f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ea8:	f000 fa6e 	bl	8001388 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000eac:	f000 fa42 	bl	8001334 <MX_USART3_UART_Init>

  Send_uart("\n\r");
 8000eb0:	481e      	ldr	r0, [pc, #120]	; (8000f2c <main+0x90>)
 8000eb2:	f000 f847 	bl	8000f44 <Send_uart>
  HAL_Delay(1000);
 8000eb6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000eba:	f000 fcf7 	bl	80018ac <HAL_Delay>
  Send_uart("Loading...\n\r");
 8000ebe:	481c      	ldr	r0, [pc, #112]	; (8000f30 <main+0x94>)
 8000ec0:	f000 f840 	bl	8000f44 <Send_uart>
  HAL_Delay(2000);
 8000ec4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000ec8:	f000 fcf0 	bl	80018ac <HAL_Delay>

  MX_SPI1_Init();
 8000ecc:	f000 f9fc 	bl	80012c8 <MX_SPI1_Init>
  MX_FATFS_Init();
 8000ed0:	f002 fc48 	bl	8003764 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */

  fresult = MemSD_Init();
 8000ed4:	f000 f84e 	bl	8000f74 <MemSD_Init>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	461a      	mov	r2, r3
 8000edc:	4b15      	ldr	r3, [pc, #84]	; (8000f34 <main+0x98>)
 8000ede:	701a      	strb	r2, [r3, #0]
  if (fresult != FR_OK)
 8000ee0:	4b14      	ldr	r3, [pc, #80]	; (8000f34 <main+0x98>)
 8000ee2:	781b      	ldrb	r3, [r3, #0]
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d001      	beq.n	8000eec <main+0x50>
	  Error_Handler();
 8000ee8:	f000 fb12 	bl	8001510 <Error_Handler>

  HAL_Delay(1000);
 8000eec:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ef0:	f000 fcdc 	bl	80018ac <HAL_Delay>

  Send_uart("Dir *.* \n\r");
 8000ef4:	4810      	ldr	r0, [pc, #64]	; (8000f38 <main+0x9c>)
 8000ef6:	f000 f825 	bl	8000f44 <Send_uart>
  //Send_uart("\n\r");


  fresult = MemSD_list_dir("");
 8000efa:	4810      	ldr	r0, [pc, #64]	; (8000f3c <main+0xa0>)
 8000efc:	f000 f8da 	bl	80010b4 <MemSD_list_dir>
 8000f00:	4603      	mov	r3, r0
 8000f02:	461a      	mov	r2, r3
 8000f04:	4b0b      	ldr	r3, [pc, #44]	; (8000f34 <main+0x98>)
 8000f06:	701a      	strb	r2, [r3, #0]
  if (fresult != FR_OK)
 8000f08:	4b0a      	ldr	r3, [pc, #40]	; (8000f34 <main+0x98>)
 8000f0a:	781b      	ldrb	r3, [r3, #0]
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d001      	beq.n	8000f14 <main+0x78>
	  Error_Handler();
 8000f10:	f000 fafe 	bl	8001510 <Error_Handler>


  Send_uart("\n\r");
 8000f14:	4805      	ldr	r0, [pc, #20]	; (8000f2c <main+0x90>)
 8000f16:	f000 f815 	bl	8000f44 <Send_uart>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  Send_uart("esta es una prueba. \r");
 8000f1a:	4809      	ldr	r0, [pc, #36]	; (8000f40 <main+0xa4>)
 8000f1c:	f000 f812 	bl	8000f44 <Send_uart>
	  HAL_Delay(1000);
 8000f20:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f24:	f000 fcc2 	bl	80018ac <HAL_Delay>
	  Send_uart("esta es una prueba. \r");
 8000f28:	e7f7      	b.n	8000f1a <main+0x7e>
 8000f2a:	bf00      	nop
 8000f2c:	08005c9c 	.word	0x08005c9c
 8000f30:	08005ca0 	.word	0x08005ca0
 8000f34:	20001080 	.word	0x20001080
 8000f38:	08005cb0 	.word	0x08005cb0
 8000f3c:	08005cbc 	.word	0x08005cbc
 8000f40:	08005cc0 	.word	0x08005cc0

08000f44 <Send_uart>:
}



void Send_uart(char *string)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b084      	sub	sp, #16
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
	uint8_t len = strlen(string);
 8000f4c:	6878      	ldr	r0, [r7, #4]
 8000f4e:	f7ff f94d 	bl	80001ec <strlen>
 8000f52:	4603      	mov	r3, r0
 8000f54:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart3, (uint8_t*) string, len, 2000); // envia string de cualquier longitud y timeout de 2 seg
 8000f56:	7bfb      	ldrb	r3, [r7, #15]
 8000f58:	b29a      	uxth	r2, r3
 8000f5a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000f5e:	6879      	ldr	r1, [r7, #4]
 8000f60:	4803      	ldr	r0, [pc, #12]	; (8000f70 <Send_uart+0x2c>)
 8000f62:	f002 f88a 	bl	800307a <HAL_UART_Transmit>
}
 8000f66:	bf00      	nop
 8000f68:	3710      	adds	r7, #16
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	200010dc 	.word	0x200010dc

08000f74 <MemSD_Init>:



FRESULT MemSD_Init(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b08a      	sub	sp, #40	; 0x28
 8000f78:	af00      	add	r7, sp, #0
	FRESULT resp=FR_DISK_ERR;
 8000f7a:	2301      	movs	r3, #1
 8000f7c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	char cadena[25];
	uint32_t data;

	  resp = f_mount(&fs, "", 1);
 8000f80:	2201      	movs	r2, #1
 8000f82:	4941      	ldr	r1, [pc, #260]	; (8001088 <MemSD_Init+0x114>)
 8000f84:	4841      	ldr	r0, [pc, #260]	; (800108c <MemSD_Init+0x118>)
 8000f86:	f004 fca3 	bl	80058d0 <f_mount>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	  if (resp == FR_OK)
 8000f90:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d171      	bne.n	800107c <MemSD_Init+0x108>
	  {
		  Send_uart("\n\r***************************************");
 8000f98:	483d      	ldr	r0, [pc, #244]	; (8001090 <MemSD_Init+0x11c>)
 8000f9a:	f7ff ffd3 	bl	8000f44 <Send_uart>
		  Send_uart("\n\r    memoria SD reconocida y cargada\n\r");
 8000f9e:	483d      	ldr	r0, [pc, #244]	; (8001094 <MemSD_Init+0x120>)
 8000fa0:	f7ff ffd0 	bl	8000f44 <Send_uart>

		  Send_uart(    "          Data bytes : ");
 8000fa4:	483c      	ldr	r0, [pc, #240]	; (8001098 <MemSD_Init+0x124>)
 8000fa6:	f7ff ffcd 	bl	8000f44 <Send_uart>
		  itoa((uint32_t)fs.csize,cadena,10);
 8000faa:	4b38      	ldr	r3, [pc, #224]	; (800108c <MemSD_Init+0x118>)
 8000fac:	895b      	ldrh	r3, [r3, #10]
 8000fae:	4618      	mov	r0, r3
 8000fb0:	1d3b      	adds	r3, r7, #4
 8000fb2:	220a      	movs	r2, #10
 8000fb4:	4619      	mov	r1, r3
 8000fb6:	f004 fe19 	bl	8005bec <itoa>
		  Send_uart(cadena);
 8000fba:	1d3b      	adds	r3, r7, #4
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f7ff ffc1 	bl	8000f44 <Send_uart>

		  Send_uart("\n\r         Sector size : ");
 8000fc2:	4836      	ldr	r0, [pc, #216]	; (800109c <MemSD_Init+0x128>)
 8000fc4:	f7ff ffbe 	bl	8000f44 <Send_uart>
		  itoa((uint32_t)fs.ssize,cadena,10);
 8000fc8:	4b30      	ldr	r3, [pc, #192]	; (800108c <MemSD_Init+0x118>)
 8000fca:	899b      	ldrh	r3, [r3, #12]
 8000fcc:	4618      	mov	r0, r3
 8000fce:	1d3b      	adds	r3, r7, #4
 8000fd0:	220a      	movs	r2, #10
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	f004 fe0a 	bl	8005bec <itoa>
		  Send_uart(cadena);
 8000fd8:	1d3b      	adds	r3, r7, #4
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f7ff ffb2 	bl	8000f44 <Send_uart>

		  Send_uart("\n\r        Data Sectors : ");
 8000fe0:	482f      	ldr	r0, [pc, #188]	; (80010a0 <MemSD_Init+0x12c>)
 8000fe2:	f7ff ffaf 	bl	8000f44 <Send_uart>
		  itoa((uint32_t)fs.fsize,cadena,10);
 8000fe6:	4b29      	ldr	r3, [pc, #164]	; (800108c <MemSD_Init+0x118>)
 8000fe8:	6a1b      	ldr	r3, [r3, #32]
 8000fea:	4618      	mov	r0, r3
 8000fec:	1d3b      	adds	r3, r7, #4
 8000fee:	220a      	movs	r2, #10
 8000ff0:	4619      	mov	r1, r3
 8000ff2:	f004 fdfb 	bl	8005bec <itoa>
		  Send_uart(cadena);
 8000ff6:	1d3b      	adds	r3, r7, #4
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f7ff ffa3 	bl	8000f44 <Send_uart>

		  Send_uart("\n\r       Cluster usado : ");
 8000ffe:	4829      	ldr	r0, [pc, #164]	; (80010a4 <MemSD_Init+0x130>)
 8001000:	f7ff ffa0 	bl	8000f44 <Send_uart>
		  itoa((uint32_t)fs.last_clst,cadena,10);
 8001004:	4b21      	ldr	r3, [pc, #132]	; (800108c <MemSD_Init+0x118>)
 8001006:	695b      	ldr	r3, [r3, #20]
 8001008:	4618      	mov	r0, r3
 800100a:	1d3b      	adds	r3, r7, #4
 800100c:	220a      	movs	r2, #10
 800100e:	4619      	mov	r1, r3
 8001010:	f004 fdec 	bl	8005bec <itoa>
		  Send_uart(cadena);
 8001014:	1d3b      	adds	r3, r7, #4
 8001016:	4618      	mov	r0, r3
 8001018:	f7ff ff94 	bl	8000f44 <Send_uart>

		  Send_uart("\n\r       Cluster Libre : ");
 800101c:	4822      	ldr	r0, [pc, #136]	; (80010a8 <MemSD_Init+0x134>)
 800101e:	f7ff ff91 	bl	8000f44 <Send_uart>
		  itoa((uint32_t)fs.free_clst,cadena,10);
 8001022:	4b1a      	ldr	r3, [pc, #104]	; (800108c <MemSD_Init+0x118>)
 8001024:	699b      	ldr	r3, [r3, #24]
 8001026:	4618      	mov	r0, r3
 8001028:	1d3b      	adds	r3, r7, #4
 800102a:	220a      	movs	r2, #10
 800102c:	4619      	mov	r1, r3
 800102e:	f004 fddd 	bl	8005bec <itoa>
		  Send_uart(cadena);
 8001032:	1d3b      	adds	r3, r7, #4
 8001034:	4618      	mov	r0, r3
 8001036:	f7ff ff85 	bl	8000f44 <Send_uart>

		  Send_uart("\n\r       Memoria Total : ");
 800103a:	481c      	ldr	r0, [pc, #112]	; (80010ac <MemSD_Init+0x138>)
 800103c:	f7ff ff82 	bl	8000f44 <Send_uart>
		  data = (fs.fsize * fs.ssize);
 8001040:	4b12      	ldr	r3, [pc, #72]	; (800108c <MemSD_Init+0x118>)
 8001042:	6a1b      	ldr	r3, [r3, #32]
 8001044:	4a11      	ldr	r2, [pc, #68]	; (800108c <MemSD_Init+0x118>)
 8001046:	8992      	ldrh	r2, [r2, #12]
 8001048:	fb02 f303 	mul.w	r3, r2, r3
 800104c:	623b      	str	r3, [r7, #32]
		  data = (data * fs.csize);
 800104e:	4b0f      	ldr	r3, [pc, #60]	; (800108c <MemSD_Init+0x118>)
 8001050:	895b      	ldrh	r3, [r3, #10]
 8001052:	461a      	mov	r2, r3
 8001054:	6a3b      	ldr	r3, [r7, #32]
 8001056:	fb02 f303 	mul.w	r3, r2, r3
 800105a:	623b      	str	r3, [r7, #32]
		  data = data / 8;
 800105c:	6a3b      	ldr	r3, [r7, #32]
 800105e:	08db      	lsrs	r3, r3, #3
 8001060:	623b      	str	r3, [r7, #32]
		  itoa((uint32_t)(data),cadena,10);
 8001062:	6a3b      	ldr	r3, [r7, #32]
 8001064:	1d39      	adds	r1, r7, #4
 8001066:	220a      	movs	r2, #10
 8001068:	4618      	mov	r0, r3
 800106a:	f004 fdbf 	bl	8005bec <itoa>
		  Send_uart(cadena);
 800106e:	1d3b      	adds	r3, r7, #4
 8001070:	4618      	mov	r0, r3
 8001072:	f7ff ff67 	bl	8000f44 <Send_uart>
		  Send_uart("\n\r***************************************\n\r");
 8001076:	480e      	ldr	r0, [pc, #56]	; (80010b0 <MemSD_Init+0x13c>)
 8001078:	f7ff ff64 	bl	8000f44 <Send_uart>
	  }
	  return resp;
 800107c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001080:	4618      	mov	r0, r3
 8001082:	3728      	adds	r7, #40	; 0x28
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}
 8001088:	08005cbc 	.word	0x08005cbc
 800108c:	20000048 	.word	0x20000048
 8001090:	08005cd8 	.word	0x08005cd8
 8001094:	08005d04 	.word	0x08005d04
 8001098:	08005d2c 	.word	0x08005d2c
 800109c:	08005d44 	.word	0x08005d44
 80010a0:	08005d60 	.word	0x08005d60
 80010a4:	08005d7c 	.word	0x08005d7c
 80010a8:	08005d98 	.word	0x08005d98
 80010ac:	08005db4 	.word	0x08005db4
 80010b0:	08005dd0 	.word	0x08005dd0

080010b4 <MemSD_list_dir>:


FRESULT MemSD_list_dir (const char *path)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b0de      	sub	sp, #376	; 0x178
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 80010be:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80010c2:	6018      	str	r0, [r3, #0]
    FRESULT res;
    DIR dir;
    FILINFO fno;
    uint16_t nfile, ndir;
	char cadena[25];
    res = f_opendir(&dir, path);                       /* Open the directory */
 80010c4:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 80010c8:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80010cc:	f507 729e 	add.w	r2, r7, #316	; 0x13c
 80010d0:	6819      	ldr	r1, [r3, #0]
 80010d2:	4610      	mov	r0, r2
 80010d4:	f004 fc42 	bl	800595c <f_opendir>
 80010d8:	4603      	mov	r3, r0
 80010da:	f887 3177 	strb.w	r3, [r7, #375]	; 0x177
    if (res == FR_OK)
 80010de:	f897 3177 	ldrb.w	r3, [r7, #375]	; 0x177
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d16d      	bne.n	80011c2 <MemSD_list_dir+0x10e>
    {
        nfile = ndir = 0;
 80010e6:	2300      	movs	r3, #0
 80010e8:	f8a7 3172 	strh.w	r3, [r7, #370]	; 0x172
 80010ec:	f8b7 3172 	ldrh.w	r3, [r7, #370]	; 0x172
 80010f0:	f8a7 3174 	strh.w	r3, [r7, #372]	; 0x174
        for (;;)
        {
            res = f_readdir(&dir, &fno);                   /* Read a directory item */
 80010f4:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80010f8:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 80010fc:	4611      	mov	r1, r2
 80010fe:	4618      	mov	r0, r3
 8001100:	f004 fc9f 	bl	8005a42 <f_readdir>
 8001104:	4603      	mov	r3, r0
 8001106:	f887 3177 	strb.w	r3, [r7, #375]	; 0x177
            if (res != FR_OK || fno.fname[0] == 0) break;  /* Error or end of dir */
 800110a:	f897 3177 	ldrb.w	r3, [r7, #375]	; 0x177
 800110e:	2b00      	cmp	r3, #0
 8001110:	d133      	bne.n	800117a <MemSD_list_dir+0xc6>
 8001112:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8001116:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800111a:	7d9b      	ldrb	r3, [r3, #22]
 800111c:	2b00      	cmp	r3, #0
 800111e:	d02c      	beq.n	800117a <MemSD_list_dir+0xc6>
            if (fno.fattrib & AM_DIR)
 8001120:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8001124:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8001128:	7a1b      	ldrb	r3, [r3, #8]
 800112a:	f003 0310 	and.w	r3, r3, #16
 800112e:	2b00      	cmp	r3, #0
 8001130:	d011      	beq.n	8001156 <MemSD_list_dir+0xa2>
            {            /* Directory */
                Send_uart(" <DIR> ");
 8001132:	4829      	ldr	r0, [pc, #164]	; (80011d8 <MemSD_list_dir+0x124>)
 8001134:	f7ff ff06 	bl	8000f44 <Send_uart>
                Send_uart(fno.fname);
 8001138:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800113c:	3316      	adds	r3, #22
 800113e:	4618      	mov	r0, r3
 8001140:	f7ff ff00 	bl	8000f44 <Send_uart>
                Send_uart("\n\r");
 8001144:	4825      	ldr	r0, [pc, #148]	; (80011dc <MemSD_list_dir+0x128>)
 8001146:	f7ff fefd 	bl	8000f44 <Send_uart>
                ndir++;
 800114a:	f8b7 3172 	ldrh.w	r3, [r7, #370]	; 0x172
 800114e:	3301      	adds	r3, #1
 8001150:	f8a7 3172 	strh.w	r3, [r7, #370]	; 0x172
 8001154:	e7ce      	b.n	80010f4 <MemSD_list_dir+0x40>
            } else
            {                               /* File */
                Send_uart("<FILE> ");
 8001156:	4822      	ldr	r0, [pc, #136]	; (80011e0 <MemSD_list_dir+0x12c>)
 8001158:	f7ff fef4 	bl	8000f44 <Send_uart>
                Send_uart(fno.fname);
 800115c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001160:	3316      	adds	r3, #22
 8001162:	4618      	mov	r0, r3
 8001164:	f7ff feee 	bl	8000f44 <Send_uart>
                Send_uart("\n\r");
 8001168:	481c      	ldr	r0, [pc, #112]	; (80011dc <MemSD_list_dir+0x128>)
 800116a:	f7ff feeb 	bl	8000f44 <Send_uart>
                nfile++;
 800116e:	f8b7 3174 	ldrh.w	r3, [r7, #372]	; 0x174
 8001172:	3301      	adds	r3, #1
 8001174:	f8a7 3174 	strh.w	r3, [r7, #372]	; 0x174
            res = f_readdir(&dir, &fno);                   /* Read a directory item */
 8001178:	e7bc      	b.n	80010f4 <MemSD_list_dir+0x40>
            }
        }
		itoa((uint32_t)ndir,cadena,10);
 800117a:	f8b7 3172 	ldrh.w	r3, [r7, #370]	; 0x172
 800117e:	f107 0108 	add.w	r1, r7, #8
 8001182:	220a      	movs	r2, #10
 8001184:	4618      	mov	r0, r3
 8001186:	f004 fd31 	bl	8005bec <itoa>
        Send_uart(cadena);
 800118a:	f107 0308 	add.w	r3, r7, #8
 800118e:	4618      	mov	r0, r3
 8001190:	f7ff fed8 	bl	8000f44 <Send_uart>
        Send_uart("  Directories\n\r");
 8001194:	4813      	ldr	r0, [pc, #76]	; (80011e4 <MemSD_list_dir+0x130>)
 8001196:	f7ff fed5 	bl	8000f44 <Send_uart>
		itoa((uint32_t)nfile,cadena,10);
 800119a:	f8b7 3174 	ldrh.w	r3, [r7, #372]	; 0x174
 800119e:	f107 0108 	add.w	r1, r7, #8
 80011a2:	220a      	movs	r2, #10
 80011a4:	4618      	mov	r0, r3
 80011a6:	f004 fd21 	bl	8005bec <itoa>
        Send_uart(cadena);
 80011aa:	f107 0308 	add.w	r3, r7, #8
 80011ae:	4618      	mov	r0, r3
 80011b0:	f7ff fec8 	bl	8000f44 <Send_uart>
        Send_uart("  Files\n\r");
 80011b4:	480c      	ldr	r0, [pc, #48]	; (80011e8 <MemSD_list_dir+0x134>)
 80011b6:	f7ff fec5 	bl	8000f44 <Send_uart>
		Send_uart("***************************************\n\r");
 80011ba:	480c      	ldr	r0, [pc, #48]	; (80011ec <MemSD_list_dir+0x138>)
 80011bc:	f7ff fec2 	bl	8000f44 <Send_uart>
 80011c0:	e002      	b.n	80011c8 <MemSD_list_dir+0x114>
    }
    else
    {
        Send_uart("Error de lectura, verifique conexion y reinicio dispositivo");
 80011c2:	480b      	ldr	r0, [pc, #44]	; (80011f0 <MemSD_list_dir+0x13c>)
 80011c4:	f7ff febe 	bl	8000f44 <Send_uart>
    }
    return res;
 80011c8:	f897 3177 	ldrb.w	r3, [r7, #375]	; 0x177
}
 80011cc:	4618      	mov	r0, r3
 80011ce:	f507 77bc 	add.w	r7, r7, #376	; 0x178
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	08005dfc 	.word	0x08005dfc
 80011dc:	08005c9c 	.word	0x08005c9c
 80011e0:	08005e04 	.word	0x08005e04
 80011e4:	08005e0c 	.word	0x08005e0c
 80011e8:	08005e1c 	.word	0x08005e1c
 80011ec:	08005e28 	.word	0x08005e28
 80011f0:	08005e54 	.word	0x08005e54

080011f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b094      	sub	sp, #80	; 0x50
 80011f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011fa:	f107 0320 	add.w	r3, r7, #32
 80011fe:	2230      	movs	r2, #48	; 0x30
 8001200:	2100      	movs	r1, #0
 8001202:	4618      	mov	r0, r3
 8001204:	f004 fcf4 	bl	8005bf0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001208:	f107 030c 	add.w	r3, r7, #12
 800120c:	2200      	movs	r2, #0
 800120e:	601a      	str	r2, [r3, #0]
 8001210:	605a      	str	r2, [r3, #4]
 8001212:	609a      	str	r2, [r3, #8]
 8001214:	60da      	str	r2, [r3, #12]
 8001216:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001218:	2300      	movs	r3, #0
 800121a:	60bb      	str	r3, [r7, #8]
 800121c:	4b28      	ldr	r3, [pc, #160]	; (80012c0 <SystemClock_Config+0xcc>)
 800121e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001220:	4a27      	ldr	r2, [pc, #156]	; (80012c0 <SystemClock_Config+0xcc>)
 8001222:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001226:	6413      	str	r3, [r2, #64]	; 0x40
 8001228:	4b25      	ldr	r3, [pc, #148]	; (80012c0 <SystemClock_Config+0xcc>)
 800122a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800122c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001230:	60bb      	str	r3, [r7, #8]
 8001232:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001234:	2300      	movs	r3, #0
 8001236:	607b      	str	r3, [r7, #4]
 8001238:	4b22      	ldr	r3, [pc, #136]	; (80012c4 <SystemClock_Config+0xd0>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	4a21      	ldr	r2, [pc, #132]	; (80012c4 <SystemClock_Config+0xd0>)
 800123e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001242:	6013      	str	r3, [r2, #0]
 8001244:	4b1f      	ldr	r3, [pc, #124]	; (80012c4 <SystemClock_Config+0xd0>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800124c:	607b      	str	r3, [r7, #4]
 800124e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001250:	2301      	movs	r3, #1
 8001252:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001254:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001258:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800125a:	2302      	movs	r3, #2
 800125c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800125e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001262:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001264:	2304      	movs	r3, #4
 8001266:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001268:	23a8      	movs	r3, #168	; 0xa8
 800126a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800126c:	2302      	movs	r3, #2
 800126e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001270:	2307      	movs	r3, #7
 8001272:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001274:	f107 0320 	add.w	r3, r7, #32
 8001278:	4618      	mov	r0, r3
 800127a:	f000 fde7 	bl	8001e4c <HAL_RCC_OscConfig>
 800127e:	4603      	mov	r3, r0
 8001280:	2b00      	cmp	r3, #0
 8001282:	d001      	beq.n	8001288 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001284:	f000 f944 	bl	8001510 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001288:	230f      	movs	r3, #15
 800128a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800128c:	2302      	movs	r3, #2
 800128e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001290:	2300      	movs	r3, #0
 8001292:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001294:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001298:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800129a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800129e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80012a0:	f107 030c 	add.w	r3, r7, #12
 80012a4:	2105      	movs	r1, #5
 80012a6:	4618      	mov	r0, r3
 80012a8:	f001 f848 	bl	800233c <HAL_RCC_ClockConfig>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d001      	beq.n	80012b6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80012b2:	f000 f92d 	bl	8001510 <Error_Handler>
  }
}
 80012b6:	bf00      	nop
 80012b8:	3750      	adds	r7, #80	; 0x50
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	40023800 	.word	0x40023800
 80012c4:	40007000 	.word	0x40007000

080012c8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80012cc:	4b17      	ldr	r3, [pc, #92]	; (800132c <MX_SPI1_Init+0x64>)
 80012ce:	4a18      	ldr	r2, [pc, #96]	; (8001330 <MX_SPI1_Init+0x68>)
 80012d0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80012d2:	4b16      	ldr	r3, [pc, #88]	; (800132c <MX_SPI1_Init+0x64>)
 80012d4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80012d8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80012da:	4b14      	ldr	r3, [pc, #80]	; (800132c <MX_SPI1_Init+0x64>)
 80012dc:	2200      	movs	r2, #0
 80012de:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80012e0:	4b12      	ldr	r3, [pc, #72]	; (800132c <MX_SPI1_Init+0x64>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80012e6:	4b11      	ldr	r3, [pc, #68]	; (800132c <MX_SPI1_Init+0x64>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80012ec:	4b0f      	ldr	r3, [pc, #60]	; (800132c <MX_SPI1_Init+0x64>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80012f2:	4b0e      	ldr	r3, [pc, #56]	; (800132c <MX_SPI1_Init+0x64>)
 80012f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80012f8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80012fa:	4b0c      	ldr	r3, [pc, #48]	; (800132c <MX_SPI1_Init+0x64>)
 80012fc:	2228      	movs	r2, #40	; 0x28
 80012fe:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001300:	4b0a      	ldr	r3, [pc, #40]	; (800132c <MX_SPI1_Init+0x64>)
 8001302:	2200      	movs	r2, #0
 8001304:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001306:	4b09      	ldr	r3, [pc, #36]	; (800132c <MX_SPI1_Init+0x64>)
 8001308:	2200      	movs	r2, #0
 800130a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800130c:	4b07      	ldr	r3, [pc, #28]	; (800132c <MX_SPI1_Init+0x64>)
 800130e:	2200      	movs	r2, #0
 8001310:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001312:	4b06      	ldr	r3, [pc, #24]	; (800132c <MX_SPI1_Init+0x64>)
 8001314:	220a      	movs	r2, #10
 8001316:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001318:	4804      	ldr	r0, [pc, #16]	; (800132c <MX_SPI1_Init+0x64>)
 800131a:	f001 fa2f 	bl	800277c <HAL_SPI_Init>
 800131e:	4603      	mov	r3, r0
 8001320:	2b00      	cmp	r3, #0
 8001322:	d001      	beq.n	8001328 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001324:	f000 f8f4 	bl	8001510 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001328:	bf00      	nop
 800132a:	bd80      	pop	{r7, pc}
 800132c:	20001084 	.word	0x20001084
 8001330:	40013000 	.word	0x40013000

08001334 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001338:	4b11      	ldr	r3, [pc, #68]	; (8001380 <MX_USART3_UART_Init+0x4c>)
 800133a:	4a12      	ldr	r2, [pc, #72]	; (8001384 <MX_USART3_UART_Init+0x50>)
 800133c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800133e:	4b10      	ldr	r3, [pc, #64]	; (8001380 <MX_USART3_UART_Init+0x4c>)
 8001340:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001344:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001346:	4b0e      	ldr	r3, [pc, #56]	; (8001380 <MX_USART3_UART_Init+0x4c>)
 8001348:	2200      	movs	r2, #0
 800134a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800134c:	4b0c      	ldr	r3, [pc, #48]	; (8001380 <MX_USART3_UART_Init+0x4c>)
 800134e:	2200      	movs	r2, #0
 8001350:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001352:	4b0b      	ldr	r3, [pc, #44]	; (8001380 <MX_USART3_UART_Init+0x4c>)
 8001354:	2200      	movs	r2, #0
 8001356:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001358:	4b09      	ldr	r3, [pc, #36]	; (8001380 <MX_USART3_UART_Init+0x4c>)
 800135a:	220c      	movs	r2, #12
 800135c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800135e:	4b08      	ldr	r3, [pc, #32]	; (8001380 <MX_USART3_UART_Init+0x4c>)
 8001360:	2200      	movs	r2, #0
 8001362:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001364:	4b06      	ldr	r3, [pc, #24]	; (8001380 <MX_USART3_UART_Init+0x4c>)
 8001366:	2200      	movs	r2, #0
 8001368:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800136a:	4805      	ldr	r0, [pc, #20]	; (8001380 <MX_USART3_UART_Init+0x4c>)
 800136c:	f001 fe38 	bl	8002fe0 <HAL_UART_Init>
 8001370:	4603      	mov	r3, r0
 8001372:	2b00      	cmp	r3, #0
 8001374:	d001      	beq.n	800137a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001376:	f000 f8cb 	bl	8001510 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800137a:	bf00      	nop
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	200010dc 	.word	0x200010dc
 8001384:	40004800 	.word	0x40004800

08001388 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b08c      	sub	sp, #48	; 0x30
 800138c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800138e:	f107 031c 	add.w	r3, r7, #28
 8001392:	2200      	movs	r2, #0
 8001394:	601a      	str	r2, [r3, #0]
 8001396:	605a      	str	r2, [r3, #4]
 8001398:	609a      	str	r2, [r3, #8]
 800139a:	60da      	str	r2, [r3, #12]
 800139c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800139e:	2300      	movs	r3, #0
 80013a0:	61bb      	str	r3, [r7, #24]
 80013a2:	4b56      	ldr	r3, [pc, #344]	; (80014fc <MX_GPIO_Init+0x174>)
 80013a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a6:	4a55      	ldr	r2, [pc, #340]	; (80014fc <MX_GPIO_Init+0x174>)
 80013a8:	f043 0304 	orr.w	r3, r3, #4
 80013ac:	6313      	str	r3, [r2, #48]	; 0x30
 80013ae:	4b53      	ldr	r3, [pc, #332]	; (80014fc <MX_GPIO_Init+0x174>)
 80013b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b2:	f003 0304 	and.w	r3, r3, #4
 80013b6:	61bb      	str	r3, [r7, #24]
 80013b8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013ba:	2300      	movs	r3, #0
 80013bc:	617b      	str	r3, [r7, #20]
 80013be:	4b4f      	ldr	r3, [pc, #316]	; (80014fc <MX_GPIO_Init+0x174>)
 80013c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c2:	4a4e      	ldr	r2, [pc, #312]	; (80014fc <MX_GPIO_Init+0x174>)
 80013c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013c8:	6313      	str	r3, [r2, #48]	; 0x30
 80013ca:	4b4c      	ldr	r3, [pc, #304]	; (80014fc <MX_GPIO_Init+0x174>)
 80013cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013d2:	617b      	str	r3, [r7, #20]
 80013d4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013d6:	2300      	movs	r3, #0
 80013d8:	613b      	str	r3, [r7, #16]
 80013da:	4b48      	ldr	r3, [pc, #288]	; (80014fc <MX_GPIO_Init+0x174>)
 80013dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013de:	4a47      	ldr	r2, [pc, #284]	; (80014fc <MX_GPIO_Init+0x174>)
 80013e0:	f043 0301 	orr.w	r3, r3, #1
 80013e4:	6313      	str	r3, [r2, #48]	; 0x30
 80013e6:	4b45      	ldr	r3, [pc, #276]	; (80014fc <MX_GPIO_Init+0x174>)
 80013e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ea:	f003 0301 	and.w	r3, r3, #1
 80013ee:	613b      	str	r3, [r7, #16]
 80013f0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013f2:	2300      	movs	r3, #0
 80013f4:	60fb      	str	r3, [r7, #12]
 80013f6:	4b41      	ldr	r3, [pc, #260]	; (80014fc <MX_GPIO_Init+0x174>)
 80013f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013fa:	4a40      	ldr	r2, [pc, #256]	; (80014fc <MX_GPIO_Init+0x174>)
 80013fc:	f043 0302 	orr.w	r3, r3, #2
 8001400:	6313      	str	r3, [r2, #48]	; 0x30
 8001402:	4b3e      	ldr	r3, [pc, #248]	; (80014fc <MX_GPIO_Init+0x174>)
 8001404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001406:	f003 0302 	and.w	r3, r3, #2
 800140a:	60fb      	str	r3, [r7, #12]
 800140c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800140e:	2300      	movs	r3, #0
 8001410:	60bb      	str	r3, [r7, #8]
 8001412:	4b3a      	ldr	r3, [pc, #232]	; (80014fc <MX_GPIO_Init+0x174>)
 8001414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001416:	4a39      	ldr	r2, [pc, #228]	; (80014fc <MX_GPIO_Init+0x174>)
 8001418:	f043 0308 	orr.w	r3, r3, #8
 800141c:	6313      	str	r3, [r2, #48]	; 0x30
 800141e:	4b37      	ldr	r3, [pc, #220]	; (80014fc <MX_GPIO_Init+0x174>)
 8001420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001422:	f003 0308 	and.w	r3, r3, #8
 8001426:	60bb      	str	r3, [r7, #8]
 8001428:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800142a:	2300      	movs	r3, #0
 800142c:	607b      	str	r3, [r7, #4]
 800142e:	4b33      	ldr	r3, [pc, #204]	; (80014fc <MX_GPIO_Init+0x174>)
 8001430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001432:	4a32      	ldr	r2, [pc, #200]	; (80014fc <MX_GPIO_Init+0x174>)
 8001434:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001438:	6313      	str	r3, [r2, #48]	; 0x30
 800143a:	4b30      	ldr	r3, [pc, #192]	; (80014fc <MX_GPIO_Init+0x174>)
 800143c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800143e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001442:	607b      	str	r3, [r7, #4]
 8001444:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001446:	2200      	movs	r2, #0
 8001448:	f244 0181 	movw	r1, #16513	; 0x4081
 800144c:	482c      	ldr	r0, [pc, #176]	; (8001500 <MX_GPIO_Init+0x178>)
 800144e:	f000 fce3 	bl	8001e18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001452:	2200      	movs	r2, #0
 8001454:	2140      	movs	r1, #64	; 0x40
 8001456:	482b      	ldr	r0, [pc, #172]	; (8001504 <MX_GPIO_Init+0x17c>)
 8001458:	f000 fcde 	bl	8001e18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 800145c:	2200      	movs	r2, #0
 800145e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001462:	4829      	ldr	r0, [pc, #164]	; (8001508 <MX_GPIO_Init+0x180>)
 8001464:	f000 fcd8 	bl	8001e18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001468:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800146c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800146e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001472:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001474:	2300      	movs	r3, #0
 8001476:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001478:	f107 031c 	add.w	r3, r7, #28
 800147c:	4619      	mov	r1, r3
 800147e:	4823      	ldr	r0, [pc, #140]	; (800150c <MX_GPIO_Init+0x184>)
 8001480:	f000 fb1e 	bl	8001ac0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001484:	f244 0381 	movw	r3, #16513	; 0x4081
 8001488:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800148a:	2301      	movs	r3, #1
 800148c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148e:	2300      	movs	r3, #0
 8001490:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001492:	2300      	movs	r3, #0
 8001494:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001496:	f107 031c 	add.w	r3, r7, #28
 800149a:	4619      	mov	r1, r3
 800149c:	4818      	ldr	r0, [pc, #96]	; (8001500 <MX_GPIO_Init+0x178>)
 800149e:	f000 fb0f 	bl	8001ac0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80014a2:	2340      	movs	r3, #64	; 0x40
 80014a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014a6:	2301      	movs	r3, #1
 80014a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014aa:	2300      	movs	r3, #0
 80014ac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ae:	2300      	movs	r3, #0
 80014b0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80014b2:	f107 031c 	add.w	r3, r7, #28
 80014b6:	4619      	mov	r1, r3
 80014b8:	4812      	ldr	r0, [pc, #72]	; (8001504 <MX_GPIO_Init+0x17c>)
 80014ba:	f000 fb01 	bl	8001ac0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80014be:	2380      	movs	r3, #128	; 0x80
 80014c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014c2:	2300      	movs	r3, #0
 80014c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c6:	2300      	movs	r3, #0
 80014c8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80014ca:	f107 031c 	add.w	r3, r7, #28
 80014ce:	4619      	mov	r1, r3
 80014d0:	480c      	ldr	r0, [pc, #48]	; (8001504 <MX_GPIO_Init+0x17c>)
 80014d2:	f000 faf5 	bl	8001ac0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80014d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80014da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014dc:	2301      	movs	r3, #1
 80014de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e0:	2300      	movs	r3, #0
 80014e2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014e4:	2300      	movs	r3, #0
 80014e6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014e8:	f107 031c 	add.w	r3, r7, #28
 80014ec:	4619      	mov	r1, r3
 80014ee:	4806      	ldr	r0, [pc, #24]	; (8001508 <MX_GPIO_Init+0x180>)
 80014f0:	f000 fae6 	bl	8001ac0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80014f4:	bf00      	nop
 80014f6:	3730      	adds	r7, #48	; 0x30
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bd80      	pop	{r7, pc}
 80014fc:	40023800 	.word	0x40023800
 8001500:	40020400 	.word	0x40020400
 8001504:	40021800 	.word	0x40021800
 8001508:	40020000 	.word	0x40020000
 800150c:	40020800 	.word	0x40020800

08001510 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001510:	b480      	push	{r7}
 8001512:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001514:	b672      	cpsid	i
}
 8001516:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001518:	e7fe      	b.n	8001518 <Error_Handler+0x8>
	...

0800151c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800151c:	b480      	push	{r7}
 800151e:	b083      	sub	sp, #12
 8001520:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001522:	2300      	movs	r3, #0
 8001524:	607b      	str	r3, [r7, #4]
 8001526:	4b10      	ldr	r3, [pc, #64]	; (8001568 <HAL_MspInit+0x4c>)
 8001528:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800152a:	4a0f      	ldr	r2, [pc, #60]	; (8001568 <HAL_MspInit+0x4c>)
 800152c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001530:	6453      	str	r3, [r2, #68]	; 0x44
 8001532:	4b0d      	ldr	r3, [pc, #52]	; (8001568 <HAL_MspInit+0x4c>)
 8001534:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001536:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800153a:	607b      	str	r3, [r7, #4]
 800153c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800153e:	2300      	movs	r3, #0
 8001540:	603b      	str	r3, [r7, #0]
 8001542:	4b09      	ldr	r3, [pc, #36]	; (8001568 <HAL_MspInit+0x4c>)
 8001544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001546:	4a08      	ldr	r2, [pc, #32]	; (8001568 <HAL_MspInit+0x4c>)
 8001548:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800154c:	6413      	str	r3, [r2, #64]	; 0x40
 800154e:	4b06      	ldr	r3, [pc, #24]	; (8001568 <HAL_MspInit+0x4c>)
 8001550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001552:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001556:	603b      	str	r3, [r7, #0]
 8001558:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800155a:	bf00      	nop
 800155c:	370c      	adds	r7, #12
 800155e:	46bd      	mov	sp, r7
 8001560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001564:	4770      	bx	lr
 8001566:	bf00      	nop
 8001568:	40023800 	.word	0x40023800

0800156c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b08a      	sub	sp, #40	; 0x28
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001574:	f107 0314 	add.w	r3, r7, #20
 8001578:	2200      	movs	r2, #0
 800157a:	601a      	str	r2, [r3, #0]
 800157c:	605a      	str	r2, [r3, #4]
 800157e:	609a      	str	r2, [r3, #8]
 8001580:	60da      	str	r2, [r3, #12]
 8001582:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	4a28      	ldr	r2, [pc, #160]	; (800162c <HAL_SPI_MspInit+0xc0>)
 800158a:	4293      	cmp	r3, r2
 800158c:	d149      	bne.n	8001622 <HAL_SPI_MspInit+0xb6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800158e:	2300      	movs	r3, #0
 8001590:	613b      	str	r3, [r7, #16]
 8001592:	4b27      	ldr	r3, [pc, #156]	; (8001630 <HAL_SPI_MspInit+0xc4>)
 8001594:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001596:	4a26      	ldr	r2, [pc, #152]	; (8001630 <HAL_SPI_MspInit+0xc4>)
 8001598:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800159c:	6453      	str	r3, [r2, #68]	; 0x44
 800159e:	4b24      	ldr	r3, [pc, #144]	; (8001630 <HAL_SPI_MspInit+0xc4>)
 80015a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015a2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80015a6:	613b      	str	r3, [r7, #16]
 80015a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015aa:	2300      	movs	r3, #0
 80015ac:	60fb      	str	r3, [r7, #12]
 80015ae:	4b20      	ldr	r3, [pc, #128]	; (8001630 <HAL_SPI_MspInit+0xc4>)
 80015b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b2:	4a1f      	ldr	r2, [pc, #124]	; (8001630 <HAL_SPI_MspInit+0xc4>)
 80015b4:	f043 0301 	orr.w	r3, r3, #1
 80015b8:	6313      	str	r3, [r2, #48]	; 0x30
 80015ba:	4b1d      	ldr	r3, [pc, #116]	; (8001630 <HAL_SPI_MspInit+0xc4>)
 80015bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015be:	f003 0301 	and.w	r3, r3, #1
 80015c2:	60fb      	str	r3, [r7, #12]
 80015c4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015c6:	2300      	movs	r3, #0
 80015c8:	60bb      	str	r3, [r7, #8]
 80015ca:	4b19      	ldr	r3, [pc, #100]	; (8001630 <HAL_SPI_MspInit+0xc4>)
 80015cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ce:	4a18      	ldr	r2, [pc, #96]	; (8001630 <HAL_SPI_MspInit+0xc4>)
 80015d0:	f043 0302 	orr.w	r3, r3, #2
 80015d4:	6313      	str	r3, [r2, #48]	; 0x30
 80015d6:	4b16      	ldr	r3, [pc, #88]	; (8001630 <HAL_SPI_MspInit+0xc4>)
 80015d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015da:	f003 0302 	and.w	r3, r3, #2
 80015de:	60bb      	str	r3, [r7, #8]
 80015e0:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PB3     ------> SPI1_SCK
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80015e2:	2340      	movs	r3, #64	; 0x40
 80015e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015e6:	2302      	movs	r3, #2
 80015e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ea:	2300      	movs	r3, #0
 80015ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015ee:	2303      	movs	r3, #3
 80015f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80015f2:	2305      	movs	r3, #5
 80015f4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015f6:	f107 0314 	add.w	r3, r7, #20
 80015fa:	4619      	mov	r1, r3
 80015fc:	480d      	ldr	r0, [pc, #52]	; (8001634 <HAL_SPI_MspInit+0xc8>)
 80015fe:	f000 fa5f 	bl	8001ac0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8001602:	2328      	movs	r3, #40	; 0x28
 8001604:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001606:	2302      	movs	r3, #2
 8001608:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800160a:	2300      	movs	r3, #0
 800160c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800160e:	2303      	movs	r3, #3
 8001610:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001612:	2305      	movs	r3, #5
 8001614:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001616:	f107 0314 	add.w	r3, r7, #20
 800161a:	4619      	mov	r1, r3
 800161c:	4806      	ldr	r0, [pc, #24]	; (8001638 <HAL_SPI_MspInit+0xcc>)
 800161e:	f000 fa4f 	bl	8001ac0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001622:	bf00      	nop
 8001624:	3728      	adds	r7, #40	; 0x28
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	40013000 	.word	0x40013000
 8001630:	40023800 	.word	0x40023800
 8001634:	40020000 	.word	0x40020000
 8001638:	40020400 	.word	0x40020400

0800163c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b08a      	sub	sp, #40	; 0x28
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001644:	f107 0314 	add.w	r3, r7, #20
 8001648:	2200      	movs	r2, #0
 800164a:	601a      	str	r2, [r3, #0]
 800164c:	605a      	str	r2, [r3, #4]
 800164e:	609a      	str	r2, [r3, #8]
 8001650:	60da      	str	r2, [r3, #12]
 8001652:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4a19      	ldr	r2, [pc, #100]	; (80016c0 <HAL_UART_MspInit+0x84>)
 800165a:	4293      	cmp	r3, r2
 800165c:	d12c      	bne.n	80016b8 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800165e:	2300      	movs	r3, #0
 8001660:	613b      	str	r3, [r7, #16]
 8001662:	4b18      	ldr	r3, [pc, #96]	; (80016c4 <HAL_UART_MspInit+0x88>)
 8001664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001666:	4a17      	ldr	r2, [pc, #92]	; (80016c4 <HAL_UART_MspInit+0x88>)
 8001668:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800166c:	6413      	str	r3, [r2, #64]	; 0x40
 800166e:	4b15      	ldr	r3, [pc, #84]	; (80016c4 <HAL_UART_MspInit+0x88>)
 8001670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001672:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001676:	613b      	str	r3, [r7, #16]
 8001678:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800167a:	2300      	movs	r3, #0
 800167c:	60fb      	str	r3, [r7, #12]
 800167e:	4b11      	ldr	r3, [pc, #68]	; (80016c4 <HAL_UART_MspInit+0x88>)
 8001680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001682:	4a10      	ldr	r2, [pc, #64]	; (80016c4 <HAL_UART_MspInit+0x88>)
 8001684:	f043 0308 	orr.w	r3, r3, #8
 8001688:	6313      	str	r3, [r2, #48]	; 0x30
 800168a:	4b0e      	ldr	r3, [pc, #56]	; (80016c4 <HAL_UART_MspInit+0x88>)
 800168c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800168e:	f003 0308 	and.w	r3, r3, #8
 8001692:	60fb      	str	r3, [r7, #12]
 8001694:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001696:	f44f 7340 	mov.w	r3, #768	; 0x300
 800169a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800169c:	2302      	movs	r3, #2
 800169e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a0:	2300      	movs	r3, #0
 80016a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016a4:	2303      	movs	r3, #3
 80016a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80016a8:	2307      	movs	r3, #7
 80016aa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016ac:	f107 0314 	add.w	r3, r7, #20
 80016b0:	4619      	mov	r1, r3
 80016b2:	4805      	ldr	r0, [pc, #20]	; (80016c8 <HAL_UART_MspInit+0x8c>)
 80016b4:	f000 fa04 	bl	8001ac0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80016b8:	bf00      	nop
 80016ba:	3728      	adds	r7, #40	; 0x28
 80016bc:	46bd      	mov	sp, r7
 80016be:	bd80      	pop	{r7, pc}
 80016c0:	40004800 	.word	0x40004800
 80016c4:	40023800 	.word	0x40023800
 80016c8:	40020c00 	.word	0x40020c00

080016cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016cc:	b480      	push	{r7}
 80016ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016d0:	e7fe      	b.n	80016d0 <NMI_Handler+0x4>

080016d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016d2:	b480      	push	{r7}
 80016d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016d6:	e7fe      	b.n	80016d6 <HardFault_Handler+0x4>

080016d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016d8:	b480      	push	{r7}
 80016da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016dc:	e7fe      	b.n	80016dc <MemManage_Handler+0x4>

080016de <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016de:	b480      	push	{r7}
 80016e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016e2:	e7fe      	b.n	80016e2 <BusFault_Handler+0x4>

080016e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016e4:	b480      	push	{r7}
 80016e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016e8:	e7fe      	b.n	80016e8 <UsageFault_Handler+0x4>

080016ea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016ea:	b480      	push	{r7}
 80016ec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016ee:	bf00      	nop
 80016f0:	46bd      	mov	sp, r7
 80016f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f6:	4770      	bx	lr

080016f8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016f8:	b480      	push	{r7}
 80016fa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016fc:	bf00      	nop
 80016fe:	46bd      	mov	sp, r7
 8001700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001704:	4770      	bx	lr

08001706 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001706:	b480      	push	{r7}
 8001708:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800170a:	bf00      	nop
 800170c:	46bd      	mov	sp, r7
 800170e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001712:	4770      	bx	lr

08001714 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	if(Timer1 > 0)
 8001718:	4b0b      	ldr	r3, [pc, #44]	; (8001748 <SysTick_Handler+0x34>)
 800171a:	881b      	ldrh	r3, [r3, #0]
 800171c:	2b00      	cmp	r3, #0
 800171e:	d005      	beq.n	800172c <SysTick_Handler+0x18>
		Timer1--;
 8001720:	4b09      	ldr	r3, [pc, #36]	; (8001748 <SysTick_Handler+0x34>)
 8001722:	881b      	ldrh	r3, [r3, #0]
 8001724:	3b01      	subs	r3, #1
 8001726:	b29a      	uxth	r2, r3
 8001728:	4b07      	ldr	r3, [pc, #28]	; (8001748 <SysTick_Handler+0x34>)
 800172a:	801a      	strh	r2, [r3, #0]
	if(Timer2 > 0)
 800172c:	4b07      	ldr	r3, [pc, #28]	; (800174c <SysTick_Handler+0x38>)
 800172e:	881b      	ldrh	r3, [r3, #0]
 8001730:	2b00      	cmp	r3, #0
 8001732:	d005      	beq.n	8001740 <SysTick_Handler+0x2c>
		Timer2--;
 8001734:	4b05      	ldr	r3, [pc, #20]	; (800174c <SysTick_Handler+0x38>)
 8001736:	881b      	ldrh	r3, [r3, #0]
 8001738:	3b01      	subs	r3, #1
 800173a:	b29a      	uxth	r2, r3
 800173c:	4b03      	ldr	r3, [pc, #12]	; (800174c <SysTick_Handler+0x38>)
 800173e:	801a      	strh	r2, [r3, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001740:	f000 f894 	bl	800186c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001744:	bf00      	nop
 8001746:	bd80      	pop	{r7, pc}
 8001748:	20000040 	.word	0x20000040
 800174c:	20000042 	.word	0x20000042

08001750 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001750:	b480      	push	{r7}
 8001752:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001754:	4b06      	ldr	r3, [pc, #24]	; (8001770 <SystemInit+0x20>)
 8001756:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800175a:	4a05      	ldr	r2, [pc, #20]	; (8001770 <SystemInit+0x20>)
 800175c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001760:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001764:	bf00      	nop
 8001766:	46bd      	mov	sp, r7
 8001768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176c:	4770      	bx	lr
 800176e:	bf00      	nop
 8001770:	e000ed00 	.word	0xe000ed00

08001774 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001774:	f8df d034 	ldr.w	sp, [pc, #52]	; 80017ac <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001778:	480d      	ldr	r0, [pc, #52]	; (80017b0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800177a:	490e      	ldr	r1, [pc, #56]	; (80017b4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800177c:	4a0e      	ldr	r2, [pc, #56]	; (80017b8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800177e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001780:	e002      	b.n	8001788 <LoopCopyDataInit>

08001782 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001782:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001784:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001786:	3304      	adds	r3, #4

08001788 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001788:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800178a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800178c:	d3f9      	bcc.n	8001782 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800178e:	4a0b      	ldr	r2, [pc, #44]	; (80017bc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001790:	4c0b      	ldr	r4, [pc, #44]	; (80017c0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001792:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001794:	e001      	b.n	800179a <LoopFillZerobss>

08001796 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001796:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001798:	3204      	adds	r2, #4

0800179a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800179a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800179c:	d3fb      	bcc.n	8001796 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800179e:	f7ff ffd7 	bl	8001750 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80017a2:	f004 f9e7 	bl	8005b74 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80017a6:	f7ff fb79 	bl	8000e9c <main>
  bx  lr    
 80017aa:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80017ac:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80017b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017b4:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 80017b8:	08006364 	.word	0x08006364
  ldr r2, =_sbss
 80017bc:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 80017c0:	20001360 	.word	0x20001360

080017c4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80017c4:	e7fe      	b.n	80017c4 <ADC_IRQHandler>
	...

080017c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80017cc:	4b0e      	ldr	r3, [pc, #56]	; (8001808 <HAL_Init+0x40>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4a0d      	ldr	r2, [pc, #52]	; (8001808 <HAL_Init+0x40>)
 80017d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80017d6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80017d8:	4b0b      	ldr	r3, [pc, #44]	; (8001808 <HAL_Init+0x40>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4a0a      	ldr	r2, [pc, #40]	; (8001808 <HAL_Init+0x40>)
 80017de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80017e2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017e4:	4b08      	ldr	r3, [pc, #32]	; (8001808 <HAL_Init+0x40>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4a07      	ldr	r2, [pc, #28]	; (8001808 <HAL_Init+0x40>)
 80017ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017ee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017f0:	2003      	movs	r0, #3
 80017f2:	f000 f931 	bl	8001a58 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017f6:	2000      	movs	r0, #0
 80017f8:	f000 f808 	bl	800180c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017fc:	f7ff fe8e 	bl	800151c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001800:	2300      	movs	r3, #0
}
 8001802:	4618      	mov	r0, r3
 8001804:	bd80      	pop	{r7, pc}
 8001806:	bf00      	nop
 8001808:	40023c00 	.word	0x40023c00

0800180c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b082      	sub	sp, #8
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001814:	4b12      	ldr	r3, [pc, #72]	; (8001860 <HAL_InitTick+0x54>)
 8001816:	681a      	ldr	r2, [r3, #0]
 8001818:	4b12      	ldr	r3, [pc, #72]	; (8001864 <HAL_InitTick+0x58>)
 800181a:	781b      	ldrb	r3, [r3, #0]
 800181c:	4619      	mov	r1, r3
 800181e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001822:	fbb3 f3f1 	udiv	r3, r3, r1
 8001826:	fbb2 f3f3 	udiv	r3, r2, r3
 800182a:	4618      	mov	r0, r3
 800182c:	f000 f93b 	bl	8001aa6 <HAL_SYSTICK_Config>
 8001830:	4603      	mov	r3, r0
 8001832:	2b00      	cmp	r3, #0
 8001834:	d001      	beq.n	800183a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001836:	2301      	movs	r3, #1
 8001838:	e00e      	b.n	8001858 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	2b0f      	cmp	r3, #15
 800183e:	d80a      	bhi.n	8001856 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001840:	2200      	movs	r2, #0
 8001842:	6879      	ldr	r1, [r7, #4]
 8001844:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001848:	f000 f911 	bl	8001a6e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800184c:	4a06      	ldr	r2, [pc, #24]	; (8001868 <HAL_InitTick+0x5c>)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001852:	2300      	movs	r3, #0
 8001854:	e000      	b.n	8001858 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001856:	2301      	movs	r3, #1
}
 8001858:	4618      	mov	r0, r3
 800185a:	3708      	adds	r7, #8
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}
 8001860:	20000004 	.word	0x20000004
 8001864:	2000000c 	.word	0x2000000c
 8001868:	20000008 	.word	0x20000008

0800186c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800186c:	b480      	push	{r7}
 800186e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001870:	4b06      	ldr	r3, [pc, #24]	; (800188c <HAL_IncTick+0x20>)
 8001872:	781b      	ldrb	r3, [r3, #0]
 8001874:	461a      	mov	r2, r3
 8001876:	4b06      	ldr	r3, [pc, #24]	; (8001890 <HAL_IncTick+0x24>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	4413      	add	r3, r2
 800187c:	4a04      	ldr	r2, [pc, #16]	; (8001890 <HAL_IncTick+0x24>)
 800187e:	6013      	str	r3, [r2, #0]
}
 8001880:	bf00      	nop
 8001882:	46bd      	mov	sp, r7
 8001884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001888:	4770      	bx	lr
 800188a:	bf00      	nop
 800188c:	2000000c 	.word	0x2000000c
 8001890:	20001120 	.word	0x20001120

08001894 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001894:	b480      	push	{r7}
 8001896:	af00      	add	r7, sp, #0
  return uwTick;
 8001898:	4b03      	ldr	r3, [pc, #12]	; (80018a8 <HAL_GetTick+0x14>)
 800189a:	681b      	ldr	r3, [r3, #0]
}
 800189c:	4618      	mov	r0, r3
 800189e:	46bd      	mov	sp, r7
 80018a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a4:	4770      	bx	lr
 80018a6:	bf00      	nop
 80018a8:	20001120 	.word	0x20001120

080018ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b084      	sub	sp, #16
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018b4:	f7ff ffee 	bl	8001894 <HAL_GetTick>
 80018b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80018c4:	d005      	beq.n	80018d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80018c6:	4b0a      	ldr	r3, [pc, #40]	; (80018f0 <HAL_Delay+0x44>)
 80018c8:	781b      	ldrb	r3, [r3, #0]
 80018ca:	461a      	mov	r2, r3
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	4413      	add	r3, r2
 80018d0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80018d2:	bf00      	nop
 80018d4:	f7ff ffde 	bl	8001894 <HAL_GetTick>
 80018d8:	4602      	mov	r2, r0
 80018da:	68bb      	ldr	r3, [r7, #8]
 80018dc:	1ad3      	subs	r3, r2, r3
 80018de:	68fa      	ldr	r2, [r7, #12]
 80018e0:	429a      	cmp	r2, r3
 80018e2:	d8f7      	bhi.n	80018d4 <HAL_Delay+0x28>
  {
  }
}
 80018e4:	bf00      	nop
 80018e6:	bf00      	nop
 80018e8:	3710      	adds	r7, #16
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop
 80018f0:	2000000c 	.word	0x2000000c

080018f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018f4:	b480      	push	{r7}
 80018f6:	b085      	sub	sp, #20
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	f003 0307 	and.w	r3, r3, #7
 8001902:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001904:	4b0c      	ldr	r3, [pc, #48]	; (8001938 <__NVIC_SetPriorityGrouping+0x44>)
 8001906:	68db      	ldr	r3, [r3, #12]
 8001908:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800190a:	68ba      	ldr	r2, [r7, #8]
 800190c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001910:	4013      	ands	r3, r2
 8001912:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001918:	68bb      	ldr	r3, [r7, #8]
 800191a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800191c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001920:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001924:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001926:	4a04      	ldr	r2, [pc, #16]	; (8001938 <__NVIC_SetPriorityGrouping+0x44>)
 8001928:	68bb      	ldr	r3, [r7, #8]
 800192a:	60d3      	str	r3, [r2, #12]
}
 800192c:	bf00      	nop
 800192e:	3714      	adds	r7, #20
 8001930:	46bd      	mov	sp, r7
 8001932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001936:	4770      	bx	lr
 8001938:	e000ed00 	.word	0xe000ed00

0800193c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800193c:	b480      	push	{r7}
 800193e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001940:	4b04      	ldr	r3, [pc, #16]	; (8001954 <__NVIC_GetPriorityGrouping+0x18>)
 8001942:	68db      	ldr	r3, [r3, #12]
 8001944:	0a1b      	lsrs	r3, r3, #8
 8001946:	f003 0307 	and.w	r3, r3, #7
}
 800194a:	4618      	mov	r0, r3
 800194c:	46bd      	mov	sp, r7
 800194e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001952:	4770      	bx	lr
 8001954:	e000ed00 	.word	0xe000ed00

08001958 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001958:	b480      	push	{r7}
 800195a:	b083      	sub	sp, #12
 800195c:	af00      	add	r7, sp, #0
 800195e:	4603      	mov	r3, r0
 8001960:	6039      	str	r1, [r7, #0]
 8001962:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001964:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001968:	2b00      	cmp	r3, #0
 800196a:	db0a      	blt.n	8001982 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	b2da      	uxtb	r2, r3
 8001970:	490c      	ldr	r1, [pc, #48]	; (80019a4 <__NVIC_SetPriority+0x4c>)
 8001972:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001976:	0112      	lsls	r2, r2, #4
 8001978:	b2d2      	uxtb	r2, r2
 800197a:	440b      	add	r3, r1
 800197c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001980:	e00a      	b.n	8001998 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	b2da      	uxtb	r2, r3
 8001986:	4908      	ldr	r1, [pc, #32]	; (80019a8 <__NVIC_SetPriority+0x50>)
 8001988:	79fb      	ldrb	r3, [r7, #7]
 800198a:	f003 030f 	and.w	r3, r3, #15
 800198e:	3b04      	subs	r3, #4
 8001990:	0112      	lsls	r2, r2, #4
 8001992:	b2d2      	uxtb	r2, r2
 8001994:	440b      	add	r3, r1
 8001996:	761a      	strb	r2, [r3, #24]
}
 8001998:	bf00      	nop
 800199a:	370c      	adds	r7, #12
 800199c:	46bd      	mov	sp, r7
 800199e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a2:	4770      	bx	lr
 80019a4:	e000e100 	.word	0xe000e100
 80019a8:	e000ed00 	.word	0xe000ed00

080019ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019ac:	b480      	push	{r7}
 80019ae:	b089      	sub	sp, #36	; 0x24
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	60f8      	str	r0, [r7, #12]
 80019b4:	60b9      	str	r1, [r7, #8]
 80019b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	f003 0307 	and.w	r3, r3, #7
 80019be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019c0:	69fb      	ldr	r3, [r7, #28]
 80019c2:	f1c3 0307 	rsb	r3, r3, #7
 80019c6:	2b04      	cmp	r3, #4
 80019c8:	bf28      	it	cs
 80019ca:	2304      	movcs	r3, #4
 80019cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019ce:	69fb      	ldr	r3, [r7, #28]
 80019d0:	3304      	adds	r3, #4
 80019d2:	2b06      	cmp	r3, #6
 80019d4:	d902      	bls.n	80019dc <NVIC_EncodePriority+0x30>
 80019d6:	69fb      	ldr	r3, [r7, #28]
 80019d8:	3b03      	subs	r3, #3
 80019da:	e000      	b.n	80019de <NVIC_EncodePriority+0x32>
 80019dc:	2300      	movs	r3, #0
 80019de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019e0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80019e4:	69bb      	ldr	r3, [r7, #24]
 80019e6:	fa02 f303 	lsl.w	r3, r2, r3
 80019ea:	43da      	mvns	r2, r3
 80019ec:	68bb      	ldr	r3, [r7, #8]
 80019ee:	401a      	ands	r2, r3
 80019f0:	697b      	ldr	r3, [r7, #20]
 80019f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019f4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80019f8:	697b      	ldr	r3, [r7, #20]
 80019fa:	fa01 f303 	lsl.w	r3, r1, r3
 80019fe:	43d9      	mvns	r1, r3
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a04:	4313      	orrs	r3, r2
         );
}
 8001a06:	4618      	mov	r0, r3
 8001a08:	3724      	adds	r7, #36	; 0x24
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a10:	4770      	bx	lr
	...

08001a14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b082      	sub	sp, #8
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	3b01      	subs	r3, #1
 8001a20:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a24:	d301      	bcc.n	8001a2a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a26:	2301      	movs	r3, #1
 8001a28:	e00f      	b.n	8001a4a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a2a:	4a0a      	ldr	r2, [pc, #40]	; (8001a54 <SysTick_Config+0x40>)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	3b01      	subs	r3, #1
 8001a30:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a32:	210f      	movs	r1, #15
 8001a34:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001a38:	f7ff ff8e 	bl	8001958 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a3c:	4b05      	ldr	r3, [pc, #20]	; (8001a54 <SysTick_Config+0x40>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a42:	4b04      	ldr	r3, [pc, #16]	; (8001a54 <SysTick_Config+0x40>)
 8001a44:	2207      	movs	r2, #7
 8001a46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a48:	2300      	movs	r3, #0
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	3708      	adds	r7, #8
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	e000e010 	.word	0xe000e010

08001a58 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b082      	sub	sp, #8
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a60:	6878      	ldr	r0, [r7, #4]
 8001a62:	f7ff ff47 	bl	80018f4 <__NVIC_SetPriorityGrouping>
}
 8001a66:	bf00      	nop
 8001a68:	3708      	adds	r7, #8
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}

08001a6e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a6e:	b580      	push	{r7, lr}
 8001a70:	b086      	sub	sp, #24
 8001a72:	af00      	add	r7, sp, #0
 8001a74:	4603      	mov	r3, r0
 8001a76:	60b9      	str	r1, [r7, #8]
 8001a78:	607a      	str	r2, [r7, #4]
 8001a7a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a80:	f7ff ff5c 	bl	800193c <__NVIC_GetPriorityGrouping>
 8001a84:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a86:	687a      	ldr	r2, [r7, #4]
 8001a88:	68b9      	ldr	r1, [r7, #8]
 8001a8a:	6978      	ldr	r0, [r7, #20]
 8001a8c:	f7ff ff8e 	bl	80019ac <NVIC_EncodePriority>
 8001a90:	4602      	mov	r2, r0
 8001a92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a96:	4611      	mov	r1, r2
 8001a98:	4618      	mov	r0, r3
 8001a9a:	f7ff ff5d 	bl	8001958 <__NVIC_SetPriority>
}
 8001a9e:	bf00      	nop
 8001aa0:	3718      	adds	r7, #24
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}

08001aa6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001aa6:	b580      	push	{r7, lr}
 8001aa8:	b082      	sub	sp, #8
 8001aaa:	af00      	add	r7, sp, #0
 8001aac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001aae:	6878      	ldr	r0, [r7, #4]
 8001ab0:	f7ff ffb0 	bl	8001a14 <SysTick_Config>
 8001ab4:	4603      	mov	r3, r0
}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	3708      	adds	r7, #8
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}
	...

08001ac0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b089      	sub	sp, #36	; 0x24
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
 8001ac8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001aca:	2300      	movs	r3, #0
 8001acc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	61fb      	str	r3, [r7, #28]
 8001ada:	e177      	b.n	8001dcc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001adc:	2201      	movs	r2, #1
 8001ade:	69fb      	ldr	r3, [r7, #28]
 8001ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	697a      	ldr	r2, [r7, #20]
 8001aec:	4013      	ands	r3, r2
 8001aee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001af0:	693a      	ldr	r2, [r7, #16]
 8001af2:	697b      	ldr	r3, [r7, #20]
 8001af4:	429a      	cmp	r2, r3
 8001af6:	f040 8166 	bne.w	8001dc6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	f003 0303 	and.w	r3, r3, #3
 8001b02:	2b01      	cmp	r3, #1
 8001b04:	d005      	beq.n	8001b12 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	685b      	ldr	r3, [r3, #4]
 8001b0a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b0e:	2b02      	cmp	r3, #2
 8001b10:	d130      	bne.n	8001b74 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	689b      	ldr	r3, [r3, #8]
 8001b16:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001b18:	69fb      	ldr	r3, [r7, #28]
 8001b1a:	005b      	lsls	r3, r3, #1
 8001b1c:	2203      	movs	r2, #3
 8001b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b22:	43db      	mvns	r3, r3
 8001b24:	69ba      	ldr	r2, [r7, #24]
 8001b26:	4013      	ands	r3, r2
 8001b28:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	68da      	ldr	r2, [r3, #12]
 8001b2e:	69fb      	ldr	r3, [r7, #28]
 8001b30:	005b      	lsls	r3, r3, #1
 8001b32:	fa02 f303 	lsl.w	r3, r2, r3
 8001b36:	69ba      	ldr	r2, [r7, #24]
 8001b38:	4313      	orrs	r3, r2
 8001b3a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	69ba      	ldr	r2, [r7, #24]
 8001b40:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b48:	2201      	movs	r2, #1
 8001b4a:	69fb      	ldr	r3, [r7, #28]
 8001b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b50:	43db      	mvns	r3, r3
 8001b52:	69ba      	ldr	r2, [r7, #24]
 8001b54:	4013      	ands	r3, r2
 8001b56:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	091b      	lsrs	r3, r3, #4
 8001b5e:	f003 0201 	and.w	r2, r3, #1
 8001b62:	69fb      	ldr	r3, [r7, #28]
 8001b64:	fa02 f303 	lsl.w	r3, r2, r3
 8001b68:	69ba      	ldr	r2, [r7, #24]
 8001b6a:	4313      	orrs	r3, r2
 8001b6c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	69ba      	ldr	r2, [r7, #24]
 8001b72:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	f003 0303 	and.w	r3, r3, #3
 8001b7c:	2b03      	cmp	r3, #3
 8001b7e:	d017      	beq.n	8001bb0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	68db      	ldr	r3, [r3, #12]
 8001b84:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001b86:	69fb      	ldr	r3, [r7, #28]
 8001b88:	005b      	lsls	r3, r3, #1
 8001b8a:	2203      	movs	r2, #3
 8001b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b90:	43db      	mvns	r3, r3
 8001b92:	69ba      	ldr	r2, [r7, #24]
 8001b94:	4013      	ands	r3, r2
 8001b96:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	689a      	ldr	r2, [r3, #8]
 8001b9c:	69fb      	ldr	r3, [r7, #28]
 8001b9e:	005b      	lsls	r3, r3, #1
 8001ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba4:	69ba      	ldr	r2, [r7, #24]
 8001ba6:	4313      	orrs	r3, r2
 8001ba8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	69ba      	ldr	r2, [r7, #24]
 8001bae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	f003 0303 	and.w	r3, r3, #3
 8001bb8:	2b02      	cmp	r3, #2
 8001bba:	d123      	bne.n	8001c04 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001bbc:	69fb      	ldr	r3, [r7, #28]
 8001bbe:	08da      	lsrs	r2, r3, #3
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	3208      	adds	r2, #8
 8001bc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bc8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001bca:	69fb      	ldr	r3, [r7, #28]
 8001bcc:	f003 0307 	and.w	r3, r3, #7
 8001bd0:	009b      	lsls	r3, r3, #2
 8001bd2:	220f      	movs	r2, #15
 8001bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd8:	43db      	mvns	r3, r3
 8001bda:	69ba      	ldr	r2, [r7, #24]
 8001bdc:	4013      	ands	r3, r2
 8001bde:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	691a      	ldr	r2, [r3, #16]
 8001be4:	69fb      	ldr	r3, [r7, #28]
 8001be6:	f003 0307 	and.w	r3, r3, #7
 8001bea:	009b      	lsls	r3, r3, #2
 8001bec:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf0:	69ba      	ldr	r2, [r7, #24]
 8001bf2:	4313      	orrs	r3, r2
 8001bf4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001bf6:	69fb      	ldr	r3, [r7, #28]
 8001bf8:	08da      	lsrs	r2, r3, #3
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	3208      	adds	r2, #8
 8001bfe:	69b9      	ldr	r1, [r7, #24]
 8001c00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001c0a:	69fb      	ldr	r3, [r7, #28]
 8001c0c:	005b      	lsls	r3, r3, #1
 8001c0e:	2203      	movs	r2, #3
 8001c10:	fa02 f303 	lsl.w	r3, r2, r3
 8001c14:	43db      	mvns	r3, r3
 8001c16:	69ba      	ldr	r2, [r7, #24]
 8001c18:	4013      	ands	r3, r2
 8001c1a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	f003 0203 	and.w	r2, r3, #3
 8001c24:	69fb      	ldr	r3, [r7, #28]
 8001c26:	005b      	lsls	r3, r3, #1
 8001c28:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2c:	69ba      	ldr	r2, [r7, #24]
 8001c2e:	4313      	orrs	r3, r2
 8001c30:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	69ba      	ldr	r2, [r7, #24]
 8001c36:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	f000 80c0 	beq.w	8001dc6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c46:	2300      	movs	r3, #0
 8001c48:	60fb      	str	r3, [r7, #12]
 8001c4a:	4b66      	ldr	r3, [pc, #408]	; (8001de4 <HAL_GPIO_Init+0x324>)
 8001c4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c4e:	4a65      	ldr	r2, [pc, #404]	; (8001de4 <HAL_GPIO_Init+0x324>)
 8001c50:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c54:	6453      	str	r3, [r2, #68]	; 0x44
 8001c56:	4b63      	ldr	r3, [pc, #396]	; (8001de4 <HAL_GPIO_Init+0x324>)
 8001c58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c5e:	60fb      	str	r3, [r7, #12]
 8001c60:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c62:	4a61      	ldr	r2, [pc, #388]	; (8001de8 <HAL_GPIO_Init+0x328>)
 8001c64:	69fb      	ldr	r3, [r7, #28]
 8001c66:	089b      	lsrs	r3, r3, #2
 8001c68:	3302      	adds	r3, #2
 8001c6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001c70:	69fb      	ldr	r3, [r7, #28]
 8001c72:	f003 0303 	and.w	r3, r3, #3
 8001c76:	009b      	lsls	r3, r3, #2
 8001c78:	220f      	movs	r2, #15
 8001c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7e:	43db      	mvns	r3, r3
 8001c80:	69ba      	ldr	r2, [r7, #24]
 8001c82:	4013      	ands	r3, r2
 8001c84:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	4a58      	ldr	r2, [pc, #352]	; (8001dec <HAL_GPIO_Init+0x32c>)
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d037      	beq.n	8001cfe <HAL_GPIO_Init+0x23e>
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	4a57      	ldr	r2, [pc, #348]	; (8001df0 <HAL_GPIO_Init+0x330>)
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d031      	beq.n	8001cfa <HAL_GPIO_Init+0x23a>
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	4a56      	ldr	r2, [pc, #344]	; (8001df4 <HAL_GPIO_Init+0x334>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d02b      	beq.n	8001cf6 <HAL_GPIO_Init+0x236>
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	4a55      	ldr	r2, [pc, #340]	; (8001df8 <HAL_GPIO_Init+0x338>)
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d025      	beq.n	8001cf2 <HAL_GPIO_Init+0x232>
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	4a54      	ldr	r2, [pc, #336]	; (8001dfc <HAL_GPIO_Init+0x33c>)
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d01f      	beq.n	8001cee <HAL_GPIO_Init+0x22e>
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	4a53      	ldr	r2, [pc, #332]	; (8001e00 <HAL_GPIO_Init+0x340>)
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d019      	beq.n	8001cea <HAL_GPIO_Init+0x22a>
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	4a52      	ldr	r2, [pc, #328]	; (8001e04 <HAL_GPIO_Init+0x344>)
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d013      	beq.n	8001ce6 <HAL_GPIO_Init+0x226>
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	4a51      	ldr	r2, [pc, #324]	; (8001e08 <HAL_GPIO_Init+0x348>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d00d      	beq.n	8001ce2 <HAL_GPIO_Init+0x222>
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	4a50      	ldr	r2, [pc, #320]	; (8001e0c <HAL_GPIO_Init+0x34c>)
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d007      	beq.n	8001cde <HAL_GPIO_Init+0x21e>
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	4a4f      	ldr	r2, [pc, #316]	; (8001e10 <HAL_GPIO_Init+0x350>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d101      	bne.n	8001cda <HAL_GPIO_Init+0x21a>
 8001cd6:	2309      	movs	r3, #9
 8001cd8:	e012      	b.n	8001d00 <HAL_GPIO_Init+0x240>
 8001cda:	230a      	movs	r3, #10
 8001cdc:	e010      	b.n	8001d00 <HAL_GPIO_Init+0x240>
 8001cde:	2308      	movs	r3, #8
 8001ce0:	e00e      	b.n	8001d00 <HAL_GPIO_Init+0x240>
 8001ce2:	2307      	movs	r3, #7
 8001ce4:	e00c      	b.n	8001d00 <HAL_GPIO_Init+0x240>
 8001ce6:	2306      	movs	r3, #6
 8001ce8:	e00a      	b.n	8001d00 <HAL_GPIO_Init+0x240>
 8001cea:	2305      	movs	r3, #5
 8001cec:	e008      	b.n	8001d00 <HAL_GPIO_Init+0x240>
 8001cee:	2304      	movs	r3, #4
 8001cf0:	e006      	b.n	8001d00 <HAL_GPIO_Init+0x240>
 8001cf2:	2303      	movs	r3, #3
 8001cf4:	e004      	b.n	8001d00 <HAL_GPIO_Init+0x240>
 8001cf6:	2302      	movs	r3, #2
 8001cf8:	e002      	b.n	8001d00 <HAL_GPIO_Init+0x240>
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	e000      	b.n	8001d00 <HAL_GPIO_Init+0x240>
 8001cfe:	2300      	movs	r3, #0
 8001d00:	69fa      	ldr	r2, [r7, #28]
 8001d02:	f002 0203 	and.w	r2, r2, #3
 8001d06:	0092      	lsls	r2, r2, #2
 8001d08:	4093      	lsls	r3, r2
 8001d0a:	69ba      	ldr	r2, [r7, #24]
 8001d0c:	4313      	orrs	r3, r2
 8001d0e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d10:	4935      	ldr	r1, [pc, #212]	; (8001de8 <HAL_GPIO_Init+0x328>)
 8001d12:	69fb      	ldr	r3, [r7, #28]
 8001d14:	089b      	lsrs	r3, r3, #2
 8001d16:	3302      	adds	r3, #2
 8001d18:	69ba      	ldr	r2, [r7, #24]
 8001d1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d1e:	4b3d      	ldr	r3, [pc, #244]	; (8001e14 <HAL_GPIO_Init+0x354>)
 8001d20:	689b      	ldr	r3, [r3, #8]
 8001d22:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d24:	693b      	ldr	r3, [r7, #16]
 8001d26:	43db      	mvns	r3, r3
 8001d28:	69ba      	ldr	r2, [r7, #24]
 8001d2a:	4013      	ands	r3, r2
 8001d2c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d003      	beq.n	8001d42 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001d3a:	69ba      	ldr	r2, [r7, #24]
 8001d3c:	693b      	ldr	r3, [r7, #16]
 8001d3e:	4313      	orrs	r3, r2
 8001d40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d42:	4a34      	ldr	r2, [pc, #208]	; (8001e14 <HAL_GPIO_Init+0x354>)
 8001d44:	69bb      	ldr	r3, [r7, #24]
 8001d46:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d48:	4b32      	ldr	r3, [pc, #200]	; (8001e14 <HAL_GPIO_Init+0x354>)
 8001d4a:	68db      	ldr	r3, [r3, #12]
 8001d4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d4e:	693b      	ldr	r3, [r7, #16]
 8001d50:	43db      	mvns	r3, r3
 8001d52:	69ba      	ldr	r2, [r7, #24]
 8001d54:	4013      	ands	r3, r2
 8001d56:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d003      	beq.n	8001d6c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001d64:	69ba      	ldr	r2, [r7, #24]
 8001d66:	693b      	ldr	r3, [r7, #16]
 8001d68:	4313      	orrs	r3, r2
 8001d6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d6c:	4a29      	ldr	r2, [pc, #164]	; (8001e14 <HAL_GPIO_Init+0x354>)
 8001d6e:	69bb      	ldr	r3, [r7, #24]
 8001d70:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001d72:	4b28      	ldr	r3, [pc, #160]	; (8001e14 <HAL_GPIO_Init+0x354>)
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d78:	693b      	ldr	r3, [r7, #16]
 8001d7a:	43db      	mvns	r3, r3
 8001d7c:	69ba      	ldr	r2, [r7, #24]
 8001d7e:	4013      	ands	r3, r2
 8001d80:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d003      	beq.n	8001d96 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001d8e:	69ba      	ldr	r2, [r7, #24]
 8001d90:	693b      	ldr	r3, [r7, #16]
 8001d92:	4313      	orrs	r3, r2
 8001d94:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d96:	4a1f      	ldr	r2, [pc, #124]	; (8001e14 <HAL_GPIO_Init+0x354>)
 8001d98:	69bb      	ldr	r3, [r7, #24]
 8001d9a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d9c:	4b1d      	ldr	r3, [pc, #116]	; (8001e14 <HAL_GPIO_Init+0x354>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001da2:	693b      	ldr	r3, [r7, #16]
 8001da4:	43db      	mvns	r3, r3
 8001da6:	69ba      	ldr	r2, [r7, #24]
 8001da8:	4013      	ands	r3, r2
 8001daa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d003      	beq.n	8001dc0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001db8:	69ba      	ldr	r2, [r7, #24]
 8001dba:	693b      	ldr	r3, [r7, #16]
 8001dbc:	4313      	orrs	r3, r2
 8001dbe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001dc0:	4a14      	ldr	r2, [pc, #80]	; (8001e14 <HAL_GPIO_Init+0x354>)
 8001dc2:	69bb      	ldr	r3, [r7, #24]
 8001dc4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001dc6:	69fb      	ldr	r3, [r7, #28]
 8001dc8:	3301      	adds	r3, #1
 8001dca:	61fb      	str	r3, [r7, #28]
 8001dcc:	69fb      	ldr	r3, [r7, #28]
 8001dce:	2b0f      	cmp	r3, #15
 8001dd0:	f67f ae84 	bls.w	8001adc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001dd4:	bf00      	nop
 8001dd6:	bf00      	nop
 8001dd8:	3724      	adds	r7, #36	; 0x24
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de0:	4770      	bx	lr
 8001de2:	bf00      	nop
 8001de4:	40023800 	.word	0x40023800
 8001de8:	40013800 	.word	0x40013800
 8001dec:	40020000 	.word	0x40020000
 8001df0:	40020400 	.word	0x40020400
 8001df4:	40020800 	.word	0x40020800
 8001df8:	40020c00 	.word	0x40020c00
 8001dfc:	40021000 	.word	0x40021000
 8001e00:	40021400 	.word	0x40021400
 8001e04:	40021800 	.word	0x40021800
 8001e08:	40021c00 	.word	0x40021c00
 8001e0c:	40022000 	.word	0x40022000
 8001e10:	40022400 	.word	0x40022400
 8001e14:	40013c00 	.word	0x40013c00

08001e18 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b083      	sub	sp, #12
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
 8001e20:	460b      	mov	r3, r1
 8001e22:	807b      	strh	r3, [r7, #2]
 8001e24:	4613      	mov	r3, r2
 8001e26:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e28:	787b      	ldrb	r3, [r7, #1]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d003      	beq.n	8001e36 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e2e:	887a      	ldrh	r2, [r7, #2]
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001e34:	e003      	b.n	8001e3e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001e36:	887b      	ldrh	r3, [r7, #2]
 8001e38:	041a      	lsls	r2, r3, #16
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	619a      	str	r2, [r3, #24]
}
 8001e3e:	bf00      	nop
 8001e40:	370c      	adds	r7, #12
 8001e42:	46bd      	mov	sp, r7
 8001e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e48:	4770      	bx	lr
	...

08001e4c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b086      	sub	sp, #24
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d101      	bne.n	8001e5e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	e267      	b.n	800232e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f003 0301 	and.w	r3, r3, #1
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d075      	beq.n	8001f56 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001e6a:	4b88      	ldr	r3, [pc, #544]	; (800208c <HAL_RCC_OscConfig+0x240>)
 8001e6c:	689b      	ldr	r3, [r3, #8]
 8001e6e:	f003 030c 	and.w	r3, r3, #12
 8001e72:	2b04      	cmp	r3, #4
 8001e74:	d00c      	beq.n	8001e90 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e76:	4b85      	ldr	r3, [pc, #532]	; (800208c <HAL_RCC_OscConfig+0x240>)
 8001e78:	689b      	ldr	r3, [r3, #8]
 8001e7a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001e7e:	2b08      	cmp	r3, #8
 8001e80:	d112      	bne.n	8001ea8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e82:	4b82      	ldr	r3, [pc, #520]	; (800208c <HAL_RCC_OscConfig+0x240>)
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e8a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001e8e:	d10b      	bne.n	8001ea8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e90:	4b7e      	ldr	r3, [pc, #504]	; (800208c <HAL_RCC_OscConfig+0x240>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d05b      	beq.n	8001f54 <HAL_RCC_OscConfig+0x108>
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d157      	bne.n	8001f54 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001ea4:	2301      	movs	r3, #1
 8001ea6:	e242      	b.n	800232e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001eb0:	d106      	bne.n	8001ec0 <HAL_RCC_OscConfig+0x74>
 8001eb2:	4b76      	ldr	r3, [pc, #472]	; (800208c <HAL_RCC_OscConfig+0x240>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4a75      	ldr	r2, [pc, #468]	; (800208c <HAL_RCC_OscConfig+0x240>)
 8001eb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ebc:	6013      	str	r3, [r2, #0]
 8001ebe:	e01d      	b.n	8001efc <HAL_RCC_OscConfig+0xb0>
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ec8:	d10c      	bne.n	8001ee4 <HAL_RCC_OscConfig+0x98>
 8001eca:	4b70      	ldr	r3, [pc, #448]	; (800208c <HAL_RCC_OscConfig+0x240>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4a6f      	ldr	r2, [pc, #444]	; (800208c <HAL_RCC_OscConfig+0x240>)
 8001ed0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ed4:	6013      	str	r3, [r2, #0]
 8001ed6:	4b6d      	ldr	r3, [pc, #436]	; (800208c <HAL_RCC_OscConfig+0x240>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4a6c      	ldr	r2, [pc, #432]	; (800208c <HAL_RCC_OscConfig+0x240>)
 8001edc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ee0:	6013      	str	r3, [r2, #0]
 8001ee2:	e00b      	b.n	8001efc <HAL_RCC_OscConfig+0xb0>
 8001ee4:	4b69      	ldr	r3, [pc, #420]	; (800208c <HAL_RCC_OscConfig+0x240>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4a68      	ldr	r2, [pc, #416]	; (800208c <HAL_RCC_OscConfig+0x240>)
 8001eea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001eee:	6013      	str	r3, [r2, #0]
 8001ef0:	4b66      	ldr	r3, [pc, #408]	; (800208c <HAL_RCC_OscConfig+0x240>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4a65      	ldr	r2, [pc, #404]	; (800208c <HAL_RCC_OscConfig+0x240>)
 8001ef6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001efa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d013      	beq.n	8001f2c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f04:	f7ff fcc6 	bl	8001894 <HAL_GetTick>
 8001f08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f0a:	e008      	b.n	8001f1e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f0c:	f7ff fcc2 	bl	8001894 <HAL_GetTick>
 8001f10:	4602      	mov	r2, r0
 8001f12:	693b      	ldr	r3, [r7, #16]
 8001f14:	1ad3      	subs	r3, r2, r3
 8001f16:	2b64      	cmp	r3, #100	; 0x64
 8001f18:	d901      	bls.n	8001f1e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001f1a:	2303      	movs	r3, #3
 8001f1c:	e207      	b.n	800232e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f1e:	4b5b      	ldr	r3, [pc, #364]	; (800208c <HAL_RCC_OscConfig+0x240>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d0f0      	beq.n	8001f0c <HAL_RCC_OscConfig+0xc0>
 8001f2a:	e014      	b.n	8001f56 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f2c:	f7ff fcb2 	bl	8001894 <HAL_GetTick>
 8001f30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f32:	e008      	b.n	8001f46 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f34:	f7ff fcae 	bl	8001894 <HAL_GetTick>
 8001f38:	4602      	mov	r2, r0
 8001f3a:	693b      	ldr	r3, [r7, #16]
 8001f3c:	1ad3      	subs	r3, r2, r3
 8001f3e:	2b64      	cmp	r3, #100	; 0x64
 8001f40:	d901      	bls.n	8001f46 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001f42:	2303      	movs	r3, #3
 8001f44:	e1f3      	b.n	800232e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f46:	4b51      	ldr	r3, [pc, #324]	; (800208c <HAL_RCC_OscConfig+0x240>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d1f0      	bne.n	8001f34 <HAL_RCC_OscConfig+0xe8>
 8001f52:	e000      	b.n	8001f56 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f003 0302 	and.w	r3, r3, #2
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d063      	beq.n	800202a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001f62:	4b4a      	ldr	r3, [pc, #296]	; (800208c <HAL_RCC_OscConfig+0x240>)
 8001f64:	689b      	ldr	r3, [r3, #8]
 8001f66:	f003 030c 	and.w	r3, r3, #12
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d00b      	beq.n	8001f86 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f6e:	4b47      	ldr	r3, [pc, #284]	; (800208c <HAL_RCC_OscConfig+0x240>)
 8001f70:	689b      	ldr	r3, [r3, #8]
 8001f72:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001f76:	2b08      	cmp	r3, #8
 8001f78:	d11c      	bne.n	8001fb4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f7a:	4b44      	ldr	r3, [pc, #272]	; (800208c <HAL_RCC_OscConfig+0x240>)
 8001f7c:	685b      	ldr	r3, [r3, #4]
 8001f7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d116      	bne.n	8001fb4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f86:	4b41      	ldr	r3, [pc, #260]	; (800208c <HAL_RCC_OscConfig+0x240>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f003 0302 	and.w	r3, r3, #2
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d005      	beq.n	8001f9e <HAL_RCC_OscConfig+0x152>
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	68db      	ldr	r3, [r3, #12]
 8001f96:	2b01      	cmp	r3, #1
 8001f98:	d001      	beq.n	8001f9e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	e1c7      	b.n	800232e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f9e:	4b3b      	ldr	r3, [pc, #236]	; (800208c <HAL_RCC_OscConfig+0x240>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	691b      	ldr	r3, [r3, #16]
 8001faa:	00db      	lsls	r3, r3, #3
 8001fac:	4937      	ldr	r1, [pc, #220]	; (800208c <HAL_RCC_OscConfig+0x240>)
 8001fae:	4313      	orrs	r3, r2
 8001fb0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fb2:	e03a      	b.n	800202a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	68db      	ldr	r3, [r3, #12]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d020      	beq.n	8001ffe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001fbc:	4b34      	ldr	r3, [pc, #208]	; (8002090 <HAL_RCC_OscConfig+0x244>)
 8001fbe:	2201      	movs	r2, #1
 8001fc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fc2:	f7ff fc67 	bl	8001894 <HAL_GetTick>
 8001fc6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fc8:	e008      	b.n	8001fdc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001fca:	f7ff fc63 	bl	8001894 <HAL_GetTick>
 8001fce:	4602      	mov	r2, r0
 8001fd0:	693b      	ldr	r3, [r7, #16]
 8001fd2:	1ad3      	subs	r3, r2, r3
 8001fd4:	2b02      	cmp	r3, #2
 8001fd6:	d901      	bls.n	8001fdc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001fd8:	2303      	movs	r3, #3
 8001fda:	e1a8      	b.n	800232e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fdc:	4b2b      	ldr	r3, [pc, #172]	; (800208c <HAL_RCC_OscConfig+0x240>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f003 0302 	and.w	r3, r3, #2
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d0f0      	beq.n	8001fca <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fe8:	4b28      	ldr	r3, [pc, #160]	; (800208c <HAL_RCC_OscConfig+0x240>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	691b      	ldr	r3, [r3, #16]
 8001ff4:	00db      	lsls	r3, r3, #3
 8001ff6:	4925      	ldr	r1, [pc, #148]	; (800208c <HAL_RCC_OscConfig+0x240>)
 8001ff8:	4313      	orrs	r3, r2
 8001ffa:	600b      	str	r3, [r1, #0]
 8001ffc:	e015      	b.n	800202a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ffe:	4b24      	ldr	r3, [pc, #144]	; (8002090 <HAL_RCC_OscConfig+0x244>)
 8002000:	2200      	movs	r2, #0
 8002002:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002004:	f7ff fc46 	bl	8001894 <HAL_GetTick>
 8002008:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800200a:	e008      	b.n	800201e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800200c:	f7ff fc42 	bl	8001894 <HAL_GetTick>
 8002010:	4602      	mov	r2, r0
 8002012:	693b      	ldr	r3, [r7, #16]
 8002014:	1ad3      	subs	r3, r2, r3
 8002016:	2b02      	cmp	r3, #2
 8002018:	d901      	bls.n	800201e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800201a:	2303      	movs	r3, #3
 800201c:	e187      	b.n	800232e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800201e:	4b1b      	ldr	r3, [pc, #108]	; (800208c <HAL_RCC_OscConfig+0x240>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f003 0302 	and.w	r3, r3, #2
 8002026:	2b00      	cmp	r3, #0
 8002028:	d1f0      	bne.n	800200c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f003 0308 	and.w	r3, r3, #8
 8002032:	2b00      	cmp	r3, #0
 8002034:	d036      	beq.n	80020a4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	695b      	ldr	r3, [r3, #20]
 800203a:	2b00      	cmp	r3, #0
 800203c:	d016      	beq.n	800206c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800203e:	4b15      	ldr	r3, [pc, #84]	; (8002094 <HAL_RCC_OscConfig+0x248>)
 8002040:	2201      	movs	r2, #1
 8002042:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002044:	f7ff fc26 	bl	8001894 <HAL_GetTick>
 8002048:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800204a:	e008      	b.n	800205e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800204c:	f7ff fc22 	bl	8001894 <HAL_GetTick>
 8002050:	4602      	mov	r2, r0
 8002052:	693b      	ldr	r3, [r7, #16]
 8002054:	1ad3      	subs	r3, r2, r3
 8002056:	2b02      	cmp	r3, #2
 8002058:	d901      	bls.n	800205e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800205a:	2303      	movs	r3, #3
 800205c:	e167      	b.n	800232e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800205e:	4b0b      	ldr	r3, [pc, #44]	; (800208c <HAL_RCC_OscConfig+0x240>)
 8002060:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002062:	f003 0302 	and.w	r3, r3, #2
 8002066:	2b00      	cmp	r3, #0
 8002068:	d0f0      	beq.n	800204c <HAL_RCC_OscConfig+0x200>
 800206a:	e01b      	b.n	80020a4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800206c:	4b09      	ldr	r3, [pc, #36]	; (8002094 <HAL_RCC_OscConfig+0x248>)
 800206e:	2200      	movs	r2, #0
 8002070:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002072:	f7ff fc0f 	bl	8001894 <HAL_GetTick>
 8002076:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002078:	e00e      	b.n	8002098 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800207a:	f7ff fc0b 	bl	8001894 <HAL_GetTick>
 800207e:	4602      	mov	r2, r0
 8002080:	693b      	ldr	r3, [r7, #16]
 8002082:	1ad3      	subs	r3, r2, r3
 8002084:	2b02      	cmp	r3, #2
 8002086:	d907      	bls.n	8002098 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002088:	2303      	movs	r3, #3
 800208a:	e150      	b.n	800232e <HAL_RCC_OscConfig+0x4e2>
 800208c:	40023800 	.word	0x40023800
 8002090:	42470000 	.word	0x42470000
 8002094:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002098:	4b88      	ldr	r3, [pc, #544]	; (80022bc <HAL_RCC_OscConfig+0x470>)
 800209a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800209c:	f003 0302 	and.w	r3, r3, #2
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d1ea      	bne.n	800207a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f003 0304 	and.w	r3, r3, #4
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	f000 8097 	beq.w	80021e0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020b2:	2300      	movs	r3, #0
 80020b4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020b6:	4b81      	ldr	r3, [pc, #516]	; (80022bc <HAL_RCC_OscConfig+0x470>)
 80020b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d10f      	bne.n	80020e2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020c2:	2300      	movs	r3, #0
 80020c4:	60bb      	str	r3, [r7, #8]
 80020c6:	4b7d      	ldr	r3, [pc, #500]	; (80022bc <HAL_RCC_OscConfig+0x470>)
 80020c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ca:	4a7c      	ldr	r2, [pc, #496]	; (80022bc <HAL_RCC_OscConfig+0x470>)
 80020cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020d0:	6413      	str	r3, [r2, #64]	; 0x40
 80020d2:	4b7a      	ldr	r3, [pc, #488]	; (80022bc <HAL_RCC_OscConfig+0x470>)
 80020d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020da:	60bb      	str	r3, [r7, #8]
 80020dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020de:	2301      	movs	r3, #1
 80020e0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020e2:	4b77      	ldr	r3, [pc, #476]	; (80022c0 <HAL_RCC_OscConfig+0x474>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d118      	bne.n	8002120 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80020ee:	4b74      	ldr	r3, [pc, #464]	; (80022c0 <HAL_RCC_OscConfig+0x474>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4a73      	ldr	r2, [pc, #460]	; (80022c0 <HAL_RCC_OscConfig+0x474>)
 80020f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020fa:	f7ff fbcb 	bl	8001894 <HAL_GetTick>
 80020fe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002100:	e008      	b.n	8002114 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002102:	f7ff fbc7 	bl	8001894 <HAL_GetTick>
 8002106:	4602      	mov	r2, r0
 8002108:	693b      	ldr	r3, [r7, #16]
 800210a:	1ad3      	subs	r3, r2, r3
 800210c:	2b02      	cmp	r3, #2
 800210e:	d901      	bls.n	8002114 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002110:	2303      	movs	r3, #3
 8002112:	e10c      	b.n	800232e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002114:	4b6a      	ldr	r3, [pc, #424]	; (80022c0 <HAL_RCC_OscConfig+0x474>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800211c:	2b00      	cmp	r3, #0
 800211e:	d0f0      	beq.n	8002102 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	689b      	ldr	r3, [r3, #8]
 8002124:	2b01      	cmp	r3, #1
 8002126:	d106      	bne.n	8002136 <HAL_RCC_OscConfig+0x2ea>
 8002128:	4b64      	ldr	r3, [pc, #400]	; (80022bc <HAL_RCC_OscConfig+0x470>)
 800212a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800212c:	4a63      	ldr	r2, [pc, #396]	; (80022bc <HAL_RCC_OscConfig+0x470>)
 800212e:	f043 0301 	orr.w	r3, r3, #1
 8002132:	6713      	str	r3, [r2, #112]	; 0x70
 8002134:	e01c      	b.n	8002170 <HAL_RCC_OscConfig+0x324>
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	689b      	ldr	r3, [r3, #8]
 800213a:	2b05      	cmp	r3, #5
 800213c:	d10c      	bne.n	8002158 <HAL_RCC_OscConfig+0x30c>
 800213e:	4b5f      	ldr	r3, [pc, #380]	; (80022bc <HAL_RCC_OscConfig+0x470>)
 8002140:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002142:	4a5e      	ldr	r2, [pc, #376]	; (80022bc <HAL_RCC_OscConfig+0x470>)
 8002144:	f043 0304 	orr.w	r3, r3, #4
 8002148:	6713      	str	r3, [r2, #112]	; 0x70
 800214a:	4b5c      	ldr	r3, [pc, #368]	; (80022bc <HAL_RCC_OscConfig+0x470>)
 800214c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800214e:	4a5b      	ldr	r2, [pc, #364]	; (80022bc <HAL_RCC_OscConfig+0x470>)
 8002150:	f043 0301 	orr.w	r3, r3, #1
 8002154:	6713      	str	r3, [r2, #112]	; 0x70
 8002156:	e00b      	b.n	8002170 <HAL_RCC_OscConfig+0x324>
 8002158:	4b58      	ldr	r3, [pc, #352]	; (80022bc <HAL_RCC_OscConfig+0x470>)
 800215a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800215c:	4a57      	ldr	r2, [pc, #348]	; (80022bc <HAL_RCC_OscConfig+0x470>)
 800215e:	f023 0301 	bic.w	r3, r3, #1
 8002162:	6713      	str	r3, [r2, #112]	; 0x70
 8002164:	4b55      	ldr	r3, [pc, #340]	; (80022bc <HAL_RCC_OscConfig+0x470>)
 8002166:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002168:	4a54      	ldr	r2, [pc, #336]	; (80022bc <HAL_RCC_OscConfig+0x470>)
 800216a:	f023 0304 	bic.w	r3, r3, #4
 800216e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	689b      	ldr	r3, [r3, #8]
 8002174:	2b00      	cmp	r3, #0
 8002176:	d015      	beq.n	80021a4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002178:	f7ff fb8c 	bl	8001894 <HAL_GetTick>
 800217c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800217e:	e00a      	b.n	8002196 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002180:	f7ff fb88 	bl	8001894 <HAL_GetTick>
 8002184:	4602      	mov	r2, r0
 8002186:	693b      	ldr	r3, [r7, #16]
 8002188:	1ad3      	subs	r3, r2, r3
 800218a:	f241 3288 	movw	r2, #5000	; 0x1388
 800218e:	4293      	cmp	r3, r2
 8002190:	d901      	bls.n	8002196 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002192:	2303      	movs	r3, #3
 8002194:	e0cb      	b.n	800232e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002196:	4b49      	ldr	r3, [pc, #292]	; (80022bc <HAL_RCC_OscConfig+0x470>)
 8002198:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800219a:	f003 0302 	and.w	r3, r3, #2
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d0ee      	beq.n	8002180 <HAL_RCC_OscConfig+0x334>
 80021a2:	e014      	b.n	80021ce <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021a4:	f7ff fb76 	bl	8001894 <HAL_GetTick>
 80021a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021aa:	e00a      	b.n	80021c2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021ac:	f7ff fb72 	bl	8001894 <HAL_GetTick>
 80021b0:	4602      	mov	r2, r0
 80021b2:	693b      	ldr	r3, [r7, #16]
 80021b4:	1ad3      	subs	r3, r2, r3
 80021b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d901      	bls.n	80021c2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80021be:	2303      	movs	r3, #3
 80021c0:	e0b5      	b.n	800232e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021c2:	4b3e      	ldr	r3, [pc, #248]	; (80022bc <HAL_RCC_OscConfig+0x470>)
 80021c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021c6:	f003 0302 	and.w	r3, r3, #2
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d1ee      	bne.n	80021ac <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80021ce:	7dfb      	ldrb	r3, [r7, #23]
 80021d0:	2b01      	cmp	r3, #1
 80021d2:	d105      	bne.n	80021e0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021d4:	4b39      	ldr	r3, [pc, #228]	; (80022bc <HAL_RCC_OscConfig+0x470>)
 80021d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021d8:	4a38      	ldr	r2, [pc, #224]	; (80022bc <HAL_RCC_OscConfig+0x470>)
 80021da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021de:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	699b      	ldr	r3, [r3, #24]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	f000 80a1 	beq.w	800232c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80021ea:	4b34      	ldr	r3, [pc, #208]	; (80022bc <HAL_RCC_OscConfig+0x470>)
 80021ec:	689b      	ldr	r3, [r3, #8]
 80021ee:	f003 030c 	and.w	r3, r3, #12
 80021f2:	2b08      	cmp	r3, #8
 80021f4:	d05c      	beq.n	80022b0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	699b      	ldr	r3, [r3, #24]
 80021fa:	2b02      	cmp	r3, #2
 80021fc:	d141      	bne.n	8002282 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021fe:	4b31      	ldr	r3, [pc, #196]	; (80022c4 <HAL_RCC_OscConfig+0x478>)
 8002200:	2200      	movs	r2, #0
 8002202:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002204:	f7ff fb46 	bl	8001894 <HAL_GetTick>
 8002208:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800220a:	e008      	b.n	800221e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800220c:	f7ff fb42 	bl	8001894 <HAL_GetTick>
 8002210:	4602      	mov	r2, r0
 8002212:	693b      	ldr	r3, [r7, #16]
 8002214:	1ad3      	subs	r3, r2, r3
 8002216:	2b02      	cmp	r3, #2
 8002218:	d901      	bls.n	800221e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800221a:	2303      	movs	r3, #3
 800221c:	e087      	b.n	800232e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800221e:	4b27      	ldr	r3, [pc, #156]	; (80022bc <HAL_RCC_OscConfig+0x470>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002226:	2b00      	cmp	r3, #0
 8002228:	d1f0      	bne.n	800220c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	69da      	ldr	r2, [r3, #28]
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6a1b      	ldr	r3, [r3, #32]
 8002232:	431a      	orrs	r2, r3
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002238:	019b      	lsls	r3, r3, #6
 800223a:	431a      	orrs	r2, r3
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002240:	085b      	lsrs	r3, r3, #1
 8002242:	3b01      	subs	r3, #1
 8002244:	041b      	lsls	r3, r3, #16
 8002246:	431a      	orrs	r2, r3
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800224c:	061b      	lsls	r3, r3, #24
 800224e:	491b      	ldr	r1, [pc, #108]	; (80022bc <HAL_RCC_OscConfig+0x470>)
 8002250:	4313      	orrs	r3, r2
 8002252:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002254:	4b1b      	ldr	r3, [pc, #108]	; (80022c4 <HAL_RCC_OscConfig+0x478>)
 8002256:	2201      	movs	r2, #1
 8002258:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800225a:	f7ff fb1b 	bl	8001894 <HAL_GetTick>
 800225e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002260:	e008      	b.n	8002274 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002262:	f7ff fb17 	bl	8001894 <HAL_GetTick>
 8002266:	4602      	mov	r2, r0
 8002268:	693b      	ldr	r3, [r7, #16]
 800226a:	1ad3      	subs	r3, r2, r3
 800226c:	2b02      	cmp	r3, #2
 800226e:	d901      	bls.n	8002274 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002270:	2303      	movs	r3, #3
 8002272:	e05c      	b.n	800232e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002274:	4b11      	ldr	r3, [pc, #68]	; (80022bc <HAL_RCC_OscConfig+0x470>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800227c:	2b00      	cmp	r3, #0
 800227e:	d0f0      	beq.n	8002262 <HAL_RCC_OscConfig+0x416>
 8002280:	e054      	b.n	800232c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002282:	4b10      	ldr	r3, [pc, #64]	; (80022c4 <HAL_RCC_OscConfig+0x478>)
 8002284:	2200      	movs	r2, #0
 8002286:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002288:	f7ff fb04 	bl	8001894 <HAL_GetTick>
 800228c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800228e:	e008      	b.n	80022a2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002290:	f7ff fb00 	bl	8001894 <HAL_GetTick>
 8002294:	4602      	mov	r2, r0
 8002296:	693b      	ldr	r3, [r7, #16]
 8002298:	1ad3      	subs	r3, r2, r3
 800229a:	2b02      	cmp	r3, #2
 800229c:	d901      	bls.n	80022a2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800229e:	2303      	movs	r3, #3
 80022a0:	e045      	b.n	800232e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022a2:	4b06      	ldr	r3, [pc, #24]	; (80022bc <HAL_RCC_OscConfig+0x470>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d1f0      	bne.n	8002290 <HAL_RCC_OscConfig+0x444>
 80022ae:	e03d      	b.n	800232c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	699b      	ldr	r3, [r3, #24]
 80022b4:	2b01      	cmp	r3, #1
 80022b6:	d107      	bne.n	80022c8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80022b8:	2301      	movs	r3, #1
 80022ba:	e038      	b.n	800232e <HAL_RCC_OscConfig+0x4e2>
 80022bc:	40023800 	.word	0x40023800
 80022c0:	40007000 	.word	0x40007000
 80022c4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80022c8:	4b1b      	ldr	r3, [pc, #108]	; (8002338 <HAL_RCC_OscConfig+0x4ec>)
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	699b      	ldr	r3, [r3, #24]
 80022d2:	2b01      	cmp	r3, #1
 80022d4:	d028      	beq.n	8002328 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80022e0:	429a      	cmp	r2, r3
 80022e2:	d121      	bne.n	8002328 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022ee:	429a      	cmp	r2, r3
 80022f0:	d11a      	bne.n	8002328 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80022f2:	68fa      	ldr	r2, [r7, #12]
 80022f4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80022f8:	4013      	ands	r3, r2
 80022fa:	687a      	ldr	r2, [r7, #4]
 80022fc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80022fe:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002300:	4293      	cmp	r3, r2
 8002302:	d111      	bne.n	8002328 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800230e:	085b      	lsrs	r3, r3, #1
 8002310:	3b01      	subs	r3, #1
 8002312:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002314:	429a      	cmp	r2, r3
 8002316:	d107      	bne.n	8002328 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002322:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002324:	429a      	cmp	r2, r3
 8002326:	d001      	beq.n	800232c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002328:	2301      	movs	r3, #1
 800232a:	e000      	b.n	800232e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800232c:	2300      	movs	r3, #0
}
 800232e:	4618      	mov	r0, r3
 8002330:	3718      	adds	r7, #24
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}
 8002336:	bf00      	nop
 8002338:	40023800 	.word	0x40023800

0800233c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b084      	sub	sp, #16
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
 8002344:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d101      	bne.n	8002350 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800234c:	2301      	movs	r3, #1
 800234e:	e0cc      	b.n	80024ea <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002350:	4b68      	ldr	r3, [pc, #416]	; (80024f4 <HAL_RCC_ClockConfig+0x1b8>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f003 030f 	and.w	r3, r3, #15
 8002358:	683a      	ldr	r2, [r7, #0]
 800235a:	429a      	cmp	r2, r3
 800235c:	d90c      	bls.n	8002378 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800235e:	4b65      	ldr	r3, [pc, #404]	; (80024f4 <HAL_RCC_ClockConfig+0x1b8>)
 8002360:	683a      	ldr	r2, [r7, #0]
 8002362:	b2d2      	uxtb	r2, r2
 8002364:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002366:	4b63      	ldr	r3, [pc, #396]	; (80024f4 <HAL_RCC_ClockConfig+0x1b8>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f003 030f 	and.w	r3, r3, #15
 800236e:	683a      	ldr	r2, [r7, #0]
 8002370:	429a      	cmp	r2, r3
 8002372:	d001      	beq.n	8002378 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002374:	2301      	movs	r3, #1
 8002376:	e0b8      	b.n	80024ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f003 0302 	and.w	r3, r3, #2
 8002380:	2b00      	cmp	r3, #0
 8002382:	d020      	beq.n	80023c6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f003 0304 	and.w	r3, r3, #4
 800238c:	2b00      	cmp	r3, #0
 800238e:	d005      	beq.n	800239c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002390:	4b59      	ldr	r3, [pc, #356]	; (80024f8 <HAL_RCC_ClockConfig+0x1bc>)
 8002392:	689b      	ldr	r3, [r3, #8]
 8002394:	4a58      	ldr	r2, [pc, #352]	; (80024f8 <HAL_RCC_ClockConfig+0x1bc>)
 8002396:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800239a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f003 0308 	and.w	r3, r3, #8
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d005      	beq.n	80023b4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80023a8:	4b53      	ldr	r3, [pc, #332]	; (80024f8 <HAL_RCC_ClockConfig+0x1bc>)
 80023aa:	689b      	ldr	r3, [r3, #8]
 80023ac:	4a52      	ldr	r2, [pc, #328]	; (80024f8 <HAL_RCC_ClockConfig+0x1bc>)
 80023ae:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80023b2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023b4:	4b50      	ldr	r3, [pc, #320]	; (80024f8 <HAL_RCC_ClockConfig+0x1bc>)
 80023b6:	689b      	ldr	r3, [r3, #8]
 80023b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	689b      	ldr	r3, [r3, #8]
 80023c0:	494d      	ldr	r1, [pc, #308]	; (80024f8 <HAL_RCC_ClockConfig+0x1bc>)
 80023c2:	4313      	orrs	r3, r2
 80023c4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f003 0301 	and.w	r3, r3, #1
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d044      	beq.n	800245c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	2b01      	cmp	r3, #1
 80023d8:	d107      	bne.n	80023ea <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023da:	4b47      	ldr	r3, [pc, #284]	; (80024f8 <HAL_RCC_ClockConfig+0x1bc>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d119      	bne.n	800241a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023e6:	2301      	movs	r3, #1
 80023e8:	e07f      	b.n	80024ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	2b02      	cmp	r3, #2
 80023f0:	d003      	beq.n	80023fa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80023f6:	2b03      	cmp	r3, #3
 80023f8:	d107      	bne.n	800240a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023fa:	4b3f      	ldr	r3, [pc, #252]	; (80024f8 <HAL_RCC_ClockConfig+0x1bc>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002402:	2b00      	cmp	r3, #0
 8002404:	d109      	bne.n	800241a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002406:	2301      	movs	r3, #1
 8002408:	e06f      	b.n	80024ea <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800240a:	4b3b      	ldr	r3, [pc, #236]	; (80024f8 <HAL_RCC_ClockConfig+0x1bc>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f003 0302 	and.w	r3, r3, #2
 8002412:	2b00      	cmp	r3, #0
 8002414:	d101      	bne.n	800241a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002416:	2301      	movs	r3, #1
 8002418:	e067      	b.n	80024ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800241a:	4b37      	ldr	r3, [pc, #220]	; (80024f8 <HAL_RCC_ClockConfig+0x1bc>)
 800241c:	689b      	ldr	r3, [r3, #8]
 800241e:	f023 0203 	bic.w	r2, r3, #3
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	4934      	ldr	r1, [pc, #208]	; (80024f8 <HAL_RCC_ClockConfig+0x1bc>)
 8002428:	4313      	orrs	r3, r2
 800242a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800242c:	f7ff fa32 	bl	8001894 <HAL_GetTick>
 8002430:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002432:	e00a      	b.n	800244a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002434:	f7ff fa2e 	bl	8001894 <HAL_GetTick>
 8002438:	4602      	mov	r2, r0
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	1ad3      	subs	r3, r2, r3
 800243e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002442:	4293      	cmp	r3, r2
 8002444:	d901      	bls.n	800244a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002446:	2303      	movs	r3, #3
 8002448:	e04f      	b.n	80024ea <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800244a:	4b2b      	ldr	r3, [pc, #172]	; (80024f8 <HAL_RCC_ClockConfig+0x1bc>)
 800244c:	689b      	ldr	r3, [r3, #8]
 800244e:	f003 020c 	and.w	r2, r3, #12
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	009b      	lsls	r3, r3, #2
 8002458:	429a      	cmp	r2, r3
 800245a:	d1eb      	bne.n	8002434 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800245c:	4b25      	ldr	r3, [pc, #148]	; (80024f4 <HAL_RCC_ClockConfig+0x1b8>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f003 030f 	and.w	r3, r3, #15
 8002464:	683a      	ldr	r2, [r7, #0]
 8002466:	429a      	cmp	r2, r3
 8002468:	d20c      	bcs.n	8002484 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800246a:	4b22      	ldr	r3, [pc, #136]	; (80024f4 <HAL_RCC_ClockConfig+0x1b8>)
 800246c:	683a      	ldr	r2, [r7, #0]
 800246e:	b2d2      	uxtb	r2, r2
 8002470:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002472:	4b20      	ldr	r3, [pc, #128]	; (80024f4 <HAL_RCC_ClockConfig+0x1b8>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f003 030f 	and.w	r3, r3, #15
 800247a:	683a      	ldr	r2, [r7, #0]
 800247c:	429a      	cmp	r2, r3
 800247e:	d001      	beq.n	8002484 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002480:	2301      	movs	r3, #1
 8002482:	e032      	b.n	80024ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f003 0304 	and.w	r3, r3, #4
 800248c:	2b00      	cmp	r3, #0
 800248e:	d008      	beq.n	80024a2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002490:	4b19      	ldr	r3, [pc, #100]	; (80024f8 <HAL_RCC_ClockConfig+0x1bc>)
 8002492:	689b      	ldr	r3, [r3, #8]
 8002494:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	68db      	ldr	r3, [r3, #12]
 800249c:	4916      	ldr	r1, [pc, #88]	; (80024f8 <HAL_RCC_ClockConfig+0x1bc>)
 800249e:	4313      	orrs	r3, r2
 80024a0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f003 0308 	and.w	r3, r3, #8
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d009      	beq.n	80024c2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80024ae:	4b12      	ldr	r3, [pc, #72]	; (80024f8 <HAL_RCC_ClockConfig+0x1bc>)
 80024b0:	689b      	ldr	r3, [r3, #8]
 80024b2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	691b      	ldr	r3, [r3, #16]
 80024ba:	00db      	lsls	r3, r3, #3
 80024bc:	490e      	ldr	r1, [pc, #56]	; (80024f8 <HAL_RCC_ClockConfig+0x1bc>)
 80024be:	4313      	orrs	r3, r2
 80024c0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80024c2:	f000 f821 	bl	8002508 <HAL_RCC_GetSysClockFreq>
 80024c6:	4602      	mov	r2, r0
 80024c8:	4b0b      	ldr	r3, [pc, #44]	; (80024f8 <HAL_RCC_ClockConfig+0x1bc>)
 80024ca:	689b      	ldr	r3, [r3, #8]
 80024cc:	091b      	lsrs	r3, r3, #4
 80024ce:	f003 030f 	and.w	r3, r3, #15
 80024d2:	490a      	ldr	r1, [pc, #40]	; (80024fc <HAL_RCC_ClockConfig+0x1c0>)
 80024d4:	5ccb      	ldrb	r3, [r1, r3]
 80024d6:	fa22 f303 	lsr.w	r3, r2, r3
 80024da:	4a09      	ldr	r2, [pc, #36]	; (8002500 <HAL_RCC_ClockConfig+0x1c4>)
 80024dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80024de:	4b09      	ldr	r3, [pc, #36]	; (8002504 <HAL_RCC_ClockConfig+0x1c8>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4618      	mov	r0, r3
 80024e4:	f7ff f992 	bl	800180c <HAL_InitTick>

  return HAL_OK;
 80024e8:	2300      	movs	r3, #0
}
 80024ea:	4618      	mov	r0, r3
 80024ec:	3710      	adds	r7, #16
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd80      	pop	{r7, pc}
 80024f2:	bf00      	nop
 80024f4:	40023c00 	.word	0x40023c00
 80024f8:	40023800 	.word	0x40023800
 80024fc:	08005ed8 	.word	0x08005ed8
 8002500:	20000004 	.word	0x20000004
 8002504:	20000008 	.word	0x20000008

08002508 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002508:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800250c:	b094      	sub	sp, #80	; 0x50
 800250e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002510:	2300      	movs	r3, #0
 8002512:	647b      	str	r3, [r7, #68]	; 0x44
 8002514:	2300      	movs	r3, #0
 8002516:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002518:	2300      	movs	r3, #0
 800251a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800251c:	2300      	movs	r3, #0
 800251e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002520:	4b79      	ldr	r3, [pc, #484]	; (8002708 <HAL_RCC_GetSysClockFreq+0x200>)
 8002522:	689b      	ldr	r3, [r3, #8]
 8002524:	f003 030c 	and.w	r3, r3, #12
 8002528:	2b08      	cmp	r3, #8
 800252a:	d00d      	beq.n	8002548 <HAL_RCC_GetSysClockFreq+0x40>
 800252c:	2b08      	cmp	r3, #8
 800252e:	f200 80e1 	bhi.w	80026f4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002532:	2b00      	cmp	r3, #0
 8002534:	d002      	beq.n	800253c <HAL_RCC_GetSysClockFreq+0x34>
 8002536:	2b04      	cmp	r3, #4
 8002538:	d003      	beq.n	8002542 <HAL_RCC_GetSysClockFreq+0x3a>
 800253a:	e0db      	b.n	80026f4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800253c:	4b73      	ldr	r3, [pc, #460]	; (800270c <HAL_RCC_GetSysClockFreq+0x204>)
 800253e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002540:	e0db      	b.n	80026fa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002542:	4b73      	ldr	r3, [pc, #460]	; (8002710 <HAL_RCC_GetSysClockFreq+0x208>)
 8002544:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002546:	e0d8      	b.n	80026fa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002548:	4b6f      	ldr	r3, [pc, #444]	; (8002708 <HAL_RCC_GetSysClockFreq+0x200>)
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002550:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002552:	4b6d      	ldr	r3, [pc, #436]	; (8002708 <HAL_RCC_GetSysClockFreq+0x200>)
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800255a:	2b00      	cmp	r3, #0
 800255c:	d063      	beq.n	8002626 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800255e:	4b6a      	ldr	r3, [pc, #424]	; (8002708 <HAL_RCC_GetSysClockFreq+0x200>)
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	099b      	lsrs	r3, r3, #6
 8002564:	2200      	movs	r2, #0
 8002566:	63bb      	str	r3, [r7, #56]	; 0x38
 8002568:	63fa      	str	r2, [r7, #60]	; 0x3c
 800256a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800256c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002570:	633b      	str	r3, [r7, #48]	; 0x30
 8002572:	2300      	movs	r3, #0
 8002574:	637b      	str	r3, [r7, #52]	; 0x34
 8002576:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800257a:	4622      	mov	r2, r4
 800257c:	462b      	mov	r3, r5
 800257e:	f04f 0000 	mov.w	r0, #0
 8002582:	f04f 0100 	mov.w	r1, #0
 8002586:	0159      	lsls	r1, r3, #5
 8002588:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800258c:	0150      	lsls	r0, r2, #5
 800258e:	4602      	mov	r2, r0
 8002590:	460b      	mov	r3, r1
 8002592:	4621      	mov	r1, r4
 8002594:	1a51      	subs	r1, r2, r1
 8002596:	6139      	str	r1, [r7, #16]
 8002598:	4629      	mov	r1, r5
 800259a:	eb63 0301 	sbc.w	r3, r3, r1
 800259e:	617b      	str	r3, [r7, #20]
 80025a0:	f04f 0200 	mov.w	r2, #0
 80025a4:	f04f 0300 	mov.w	r3, #0
 80025a8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80025ac:	4659      	mov	r1, fp
 80025ae:	018b      	lsls	r3, r1, #6
 80025b0:	4651      	mov	r1, sl
 80025b2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80025b6:	4651      	mov	r1, sl
 80025b8:	018a      	lsls	r2, r1, #6
 80025ba:	4651      	mov	r1, sl
 80025bc:	ebb2 0801 	subs.w	r8, r2, r1
 80025c0:	4659      	mov	r1, fp
 80025c2:	eb63 0901 	sbc.w	r9, r3, r1
 80025c6:	f04f 0200 	mov.w	r2, #0
 80025ca:	f04f 0300 	mov.w	r3, #0
 80025ce:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80025d2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80025d6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80025da:	4690      	mov	r8, r2
 80025dc:	4699      	mov	r9, r3
 80025de:	4623      	mov	r3, r4
 80025e0:	eb18 0303 	adds.w	r3, r8, r3
 80025e4:	60bb      	str	r3, [r7, #8]
 80025e6:	462b      	mov	r3, r5
 80025e8:	eb49 0303 	adc.w	r3, r9, r3
 80025ec:	60fb      	str	r3, [r7, #12]
 80025ee:	f04f 0200 	mov.w	r2, #0
 80025f2:	f04f 0300 	mov.w	r3, #0
 80025f6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80025fa:	4629      	mov	r1, r5
 80025fc:	024b      	lsls	r3, r1, #9
 80025fe:	4621      	mov	r1, r4
 8002600:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002604:	4621      	mov	r1, r4
 8002606:	024a      	lsls	r2, r1, #9
 8002608:	4610      	mov	r0, r2
 800260a:	4619      	mov	r1, r3
 800260c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800260e:	2200      	movs	r2, #0
 8002610:	62bb      	str	r3, [r7, #40]	; 0x28
 8002612:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002614:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002618:	f7fd fdf0 	bl	80001fc <__aeabi_uldivmod>
 800261c:	4602      	mov	r2, r0
 800261e:	460b      	mov	r3, r1
 8002620:	4613      	mov	r3, r2
 8002622:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002624:	e058      	b.n	80026d8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002626:	4b38      	ldr	r3, [pc, #224]	; (8002708 <HAL_RCC_GetSysClockFreq+0x200>)
 8002628:	685b      	ldr	r3, [r3, #4]
 800262a:	099b      	lsrs	r3, r3, #6
 800262c:	2200      	movs	r2, #0
 800262e:	4618      	mov	r0, r3
 8002630:	4611      	mov	r1, r2
 8002632:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002636:	623b      	str	r3, [r7, #32]
 8002638:	2300      	movs	r3, #0
 800263a:	627b      	str	r3, [r7, #36]	; 0x24
 800263c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002640:	4642      	mov	r2, r8
 8002642:	464b      	mov	r3, r9
 8002644:	f04f 0000 	mov.w	r0, #0
 8002648:	f04f 0100 	mov.w	r1, #0
 800264c:	0159      	lsls	r1, r3, #5
 800264e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002652:	0150      	lsls	r0, r2, #5
 8002654:	4602      	mov	r2, r0
 8002656:	460b      	mov	r3, r1
 8002658:	4641      	mov	r1, r8
 800265a:	ebb2 0a01 	subs.w	sl, r2, r1
 800265e:	4649      	mov	r1, r9
 8002660:	eb63 0b01 	sbc.w	fp, r3, r1
 8002664:	f04f 0200 	mov.w	r2, #0
 8002668:	f04f 0300 	mov.w	r3, #0
 800266c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002670:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002674:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002678:	ebb2 040a 	subs.w	r4, r2, sl
 800267c:	eb63 050b 	sbc.w	r5, r3, fp
 8002680:	f04f 0200 	mov.w	r2, #0
 8002684:	f04f 0300 	mov.w	r3, #0
 8002688:	00eb      	lsls	r3, r5, #3
 800268a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800268e:	00e2      	lsls	r2, r4, #3
 8002690:	4614      	mov	r4, r2
 8002692:	461d      	mov	r5, r3
 8002694:	4643      	mov	r3, r8
 8002696:	18e3      	adds	r3, r4, r3
 8002698:	603b      	str	r3, [r7, #0]
 800269a:	464b      	mov	r3, r9
 800269c:	eb45 0303 	adc.w	r3, r5, r3
 80026a0:	607b      	str	r3, [r7, #4]
 80026a2:	f04f 0200 	mov.w	r2, #0
 80026a6:	f04f 0300 	mov.w	r3, #0
 80026aa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80026ae:	4629      	mov	r1, r5
 80026b0:	028b      	lsls	r3, r1, #10
 80026b2:	4621      	mov	r1, r4
 80026b4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80026b8:	4621      	mov	r1, r4
 80026ba:	028a      	lsls	r2, r1, #10
 80026bc:	4610      	mov	r0, r2
 80026be:	4619      	mov	r1, r3
 80026c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80026c2:	2200      	movs	r2, #0
 80026c4:	61bb      	str	r3, [r7, #24]
 80026c6:	61fa      	str	r2, [r7, #28]
 80026c8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80026cc:	f7fd fd96 	bl	80001fc <__aeabi_uldivmod>
 80026d0:	4602      	mov	r2, r0
 80026d2:	460b      	mov	r3, r1
 80026d4:	4613      	mov	r3, r2
 80026d6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80026d8:	4b0b      	ldr	r3, [pc, #44]	; (8002708 <HAL_RCC_GetSysClockFreq+0x200>)
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	0c1b      	lsrs	r3, r3, #16
 80026de:	f003 0303 	and.w	r3, r3, #3
 80026e2:	3301      	adds	r3, #1
 80026e4:	005b      	lsls	r3, r3, #1
 80026e6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80026e8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80026ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80026ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80026f0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80026f2:	e002      	b.n	80026fa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80026f4:	4b05      	ldr	r3, [pc, #20]	; (800270c <HAL_RCC_GetSysClockFreq+0x204>)
 80026f6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80026f8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80026fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80026fc:	4618      	mov	r0, r3
 80026fe:	3750      	adds	r7, #80	; 0x50
 8002700:	46bd      	mov	sp, r7
 8002702:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002706:	bf00      	nop
 8002708:	40023800 	.word	0x40023800
 800270c:	00f42400 	.word	0x00f42400
 8002710:	007a1200 	.word	0x007a1200

08002714 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002714:	b480      	push	{r7}
 8002716:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002718:	4b03      	ldr	r3, [pc, #12]	; (8002728 <HAL_RCC_GetHCLKFreq+0x14>)
 800271a:	681b      	ldr	r3, [r3, #0]
}
 800271c:	4618      	mov	r0, r3
 800271e:	46bd      	mov	sp, r7
 8002720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002724:	4770      	bx	lr
 8002726:	bf00      	nop
 8002728:	20000004 	.word	0x20000004

0800272c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002730:	f7ff fff0 	bl	8002714 <HAL_RCC_GetHCLKFreq>
 8002734:	4602      	mov	r2, r0
 8002736:	4b05      	ldr	r3, [pc, #20]	; (800274c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002738:	689b      	ldr	r3, [r3, #8]
 800273a:	0a9b      	lsrs	r3, r3, #10
 800273c:	f003 0307 	and.w	r3, r3, #7
 8002740:	4903      	ldr	r1, [pc, #12]	; (8002750 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002742:	5ccb      	ldrb	r3, [r1, r3]
 8002744:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002748:	4618      	mov	r0, r3
 800274a:	bd80      	pop	{r7, pc}
 800274c:	40023800 	.word	0x40023800
 8002750:	08005ee8 	.word	0x08005ee8

08002754 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002758:	f7ff ffdc 	bl	8002714 <HAL_RCC_GetHCLKFreq>
 800275c:	4602      	mov	r2, r0
 800275e:	4b05      	ldr	r3, [pc, #20]	; (8002774 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002760:	689b      	ldr	r3, [r3, #8]
 8002762:	0b5b      	lsrs	r3, r3, #13
 8002764:	f003 0307 	and.w	r3, r3, #7
 8002768:	4903      	ldr	r1, [pc, #12]	; (8002778 <HAL_RCC_GetPCLK2Freq+0x24>)
 800276a:	5ccb      	ldrb	r3, [r1, r3]
 800276c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002770:	4618      	mov	r0, r3
 8002772:	bd80      	pop	{r7, pc}
 8002774:	40023800 	.word	0x40023800
 8002778:	08005ee8 	.word	0x08005ee8

0800277c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b082      	sub	sp, #8
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d101      	bne.n	800278e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800278a:	2301      	movs	r3, #1
 800278c:	e07b      	b.n	8002886 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002792:	2b00      	cmp	r3, #0
 8002794:	d108      	bne.n	80027a8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800279e:	d009      	beq.n	80027b4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2200      	movs	r2, #0
 80027a4:	61da      	str	r2, [r3, #28]
 80027a6:	e005      	b.n	80027b4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2200      	movs	r2, #0
 80027ac:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2200      	movs	r2, #0
 80027b2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2200      	movs	r2, #0
 80027b8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80027c0:	b2db      	uxtb	r3, r3
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d106      	bne.n	80027d4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2200      	movs	r2, #0
 80027ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80027ce:	6878      	ldr	r0, [r7, #4]
 80027d0:	f7fe fecc 	bl	800156c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2202      	movs	r2, #2
 80027d8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	681a      	ldr	r2, [r3, #0]
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80027ea:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	689b      	ldr	r3, [r3, #8]
 80027f8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80027fc:	431a      	orrs	r2, r3
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	68db      	ldr	r3, [r3, #12]
 8002802:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002806:	431a      	orrs	r2, r3
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	691b      	ldr	r3, [r3, #16]
 800280c:	f003 0302 	and.w	r3, r3, #2
 8002810:	431a      	orrs	r2, r3
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	695b      	ldr	r3, [r3, #20]
 8002816:	f003 0301 	and.w	r3, r3, #1
 800281a:	431a      	orrs	r2, r3
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	699b      	ldr	r3, [r3, #24]
 8002820:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002824:	431a      	orrs	r2, r3
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	69db      	ldr	r3, [r3, #28]
 800282a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800282e:	431a      	orrs	r2, r3
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6a1b      	ldr	r3, [r3, #32]
 8002834:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002838:	ea42 0103 	orr.w	r1, r2, r3
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002840:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	430a      	orrs	r2, r1
 800284a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	699b      	ldr	r3, [r3, #24]
 8002850:	0c1b      	lsrs	r3, r3, #16
 8002852:	f003 0104 	and.w	r1, r3, #4
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800285a:	f003 0210 	and.w	r2, r3, #16
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	430a      	orrs	r2, r1
 8002864:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	69da      	ldr	r2, [r3, #28]
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002874:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2200      	movs	r2, #0
 800287a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2201      	movs	r2, #1
 8002880:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002884:	2300      	movs	r3, #0
}
 8002886:	4618      	mov	r0, r3
 8002888:	3708      	adds	r7, #8
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}

0800288e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800288e:	b580      	push	{r7, lr}
 8002890:	b088      	sub	sp, #32
 8002892:	af00      	add	r7, sp, #0
 8002894:	60f8      	str	r0, [r7, #12]
 8002896:	60b9      	str	r1, [r7, #8]
 8002898:	603b      	str	r3, [r7, #0]
 800289a:	4613      	mov	r3, r2
 800289c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800289e:	2300      	movs	r3, #0
 80028a0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80028a8:	2b01      	cmp	r3, #1
 80028aa:	d101      	bne.n	80028b0 <HAL_SPI_Transmit+0x22>
 80028ac:	2302      	movs	r3, #2
 80028ae:	e126      	b.n	8002afe <HAL_SPI_Transmit+0x270>
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	2201      	movs	r2, #1
 80028b4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80028b8:	f7fe ffec 	bl	8001894 <HAL_GetTick>
 80028bc:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80028be:	88fb      	ldrh	r3, [r7, #6]
 80028c0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80028c8:	b2db      	uxtb	r3, r3
 80028ca:	2b01      	cmp	r3, #1
 80028cc:	d002      	beq.n	80028d4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80028ce:	2302      	movs	r3, #2
 80028d0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80028d2:	e10b      	b.n	8002aec <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80028d4:	68bb      	ldr	r3, [r7, #8]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d002      	beq.n	80028e0 <HAL_SPI_Transmit+0x52>
 80028da:	88fb      	ldrh	r3, [r7, #6]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d102      	bne.n	80028e6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80028e0:	2301      	movs	r3, #1
 80028e2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80028e4:	e102      	b.n	8002aec <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	2203      	movs	r2, #3
 80028ea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	2200      	movs	r2, #0
 80028f2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	68ba      	ldr	r2, [r7, #8]
 80028f8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	88fa      	ldrh	r2, [r7, #6]
 80028fe:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	88fa      	ldrh	r2, [r7, #6]
 8002904:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	2200      	movs	r2, #0
 800290a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	2200      	movs	r2, #0
 8002910:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	2200      	movs	r2, #0
 8002916:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	2200      	movs	r2, #0
 800291c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	2200      	movs	r2, #0
 8002922:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	689b      	ldr	r3, [r3, #8]
 8002928:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800292c:	d10f      	bne.n	800294e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	681a      	ldr	r2, [r3, #0]
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800293c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	681a      	ldr	r2, [r3, #0]
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800294c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002958:	2b40      	cmp	r3, #64	; 0x40
 800295a:	d007      	beq.n	800296c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	681a      	ldr	r2, [r3, #0]
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800296a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	68db      	ldr	r3, [r3, #12]
 8002970:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002974:	d14b      	bne.n	8002a0e <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d002      	beq.n	8002984 <HAL_SPI_Transmit+0xf6>
 800297e:	8afb      	ldrh	r3, [r7, #22]
 8002980:	2b01      	cmp	r3, #1
 8002982:	d13e      	bne.n	8002a02 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002988:	881a      	ldrh	r2, [r3, #0]
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002994:	1c9a      	adds	r2, r3, #2
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800299e:	b29b      	uxth	r3, r3
 80029a0:	3b01      	subs	r3, #1
 80029a2:	b29a      	uxth	r2, r3
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80029a8:	e02b      	b.n	8002a02 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	689b      	ldr	r3, [r3, #8]
 80029b0:	f003 0302 	and.w	r3, r3, #2
 80029b4:	2b02      	cmp	r3, #2
 80029b6:	d112      	bne.n	80029de <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029bc:	881a      	ldrh	r2, [r3, #0]
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029c8:	1c9a      	adds	r2, r3, #2
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80029d2:	b29b      	uxth	r3, r3
 80029d4:	3b01      	subs	r3, #1
 80029d6:	b29a      	uxth	r2, r3
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	86da      	strh	r2, [r3, #54]	; 0x36
 80029dc:	e011      	b.n	8002a02 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80029de:	f7fe ff59 	bl	8001894 <HAL_GetTick>
 80029e2:	4602      	mov	r2, r0
 80029e4:	69bb      	ldr	r3, [r7, #24]
 80029e6:	1ad3      	subs	r3, r2, r3
 80029e8:	683a      	ldr	r2, [r7, #0]
 80029ea:	429a      	cmp	r2, r3
 80029ec:	d803      	bhi.n	80029f6 <HAL_SPI_Transmit+0x168>
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80029f4:	d102      	bne.n	80029fc <HAL_SPI_Transmit+0x16e>
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d102      	bne.n	8002a02 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80029fc:	2303      	movs	r3, #3
 80029fe:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002a00:	e074      	b.n	8002aec <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a06:	b29b      	uxth	r3, r3
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d1ce      	bne.n	80029aa <HAL_SPI_Transmit+0x11c>
 8002a0c:	e04c      	b.n	8002aa8 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d002      	beq.n	8002a1c <HAL_SPI_Transmit+0x18e>
 8002a16:	8afb      	ldrh	r3, [r7, #22]
 8002a18:	2b01      	cmp	r3, #1
 8002a1a:	d140      	bne.n	8002a9e <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	330c      	adds	r3, #12
 8002a26:	7812      	ldrb	r2, [r2, #0]
 8002a28:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a2e:	1c5a      	adds	r2, r3, #1
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a38:	b29b      	uxth	r3, r3
 8002a3a:	3b01      	subs	r3, #1
 8002a3c:	b29a      	uxth	r2, r3
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002a42:	e02c      	b.n	8002a9e <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	689b      	ldr	r3, [r3, #8]
 8002a4a:	f003 0302 	and.w	r3, r3, #2
 8002a4e:	2b02      	cmp	r3, #2
 8002a50:	d113      	bne.n	8002a7a <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	330c      	adds	r3, #12
 8002a5c:	7812      	ldrb	r2, [r2, #0]
 8002a5e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a64:	1c5a      	adds	r2, r3, #1
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a6e:	b29b      	uxth	r3, r3
 8002a70:	3b01      	subs	r3, #1
 8002a72:	b29a      	uxth	r2, r3
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	86da      	strh	r2, [r3, #54]	; 0x36
 8002a78:	e011      	b.n	8002a9e <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002a7a:	f7fe ff0b 	bl	8001894 <HAL_GetTick>
 8002a7e:	4602      	mov	r2, r0
 8002a80:	69bb      	ldr	r3, [r7, #24]
 8002a82:	1ad3      	subs	r3, r2, r3
 8002a84:	683a      	ldr	r2, [r7, #0]
 8002a86:	429a      	cmp	r2, r3
 8002a88:	d803      	bhi.n	8002a92 <HAL_SPI_Transmit+0x204>
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002a90:	d102      	bne.n	8002a98 <HAL_SPI_Transmit+0x20a>
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d102      	bne.n	8002a9e <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8002a98:	2303      	movs	r3, #3
 8002a9a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002a9c:	e026      	b.n	8002aec <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002aa2:	b29b      	uxth	r3, r3
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d1cd      	bne.n	8002a44 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002aa8:	69ba      	ldr	r2, [r7, #24]
 8002aaa:	6839      	ldr	r1, [r7, #0]
 8002aac:	68f8      	ldr	r0, [r7, #12]
 8002aae:	f000 fa55 	bl	8002f5c <SPI_EndRxTxTransaction>
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d002      	beq.n	8002abe <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	2220      	movs	r2, #32
 8002abc:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	689b      	ldr	r3, [r3, #8]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d10a      	bne.n	8002adc <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	613b      	str	r3, [r7, #16]
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	68db      	ldr	r3, [r3, #12]
 8002ad0:	613b      	str	r3, [r7, #16]
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	689b      	ldr	r3, [r3, #8]
 8002ad8:	613b      	str	r3, [r7, #16]
 8002ada:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d002      	beq.n	8002aea <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	77fb      	strb	r3, [r7, #31]
 8002ae8:	e000      	b.n	8002aec <HAL_SPI_Transmit+0x25e>
  }

error:
 8002aea:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	2201      	movs	r2, #1
 8002af0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	2200      	movs	r2, #0
 8002af8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002afc:	7ffb      	ldrb	r3, [r7, #31]
}
 8002afe:	4618      	mov	r0, r3
 8002b00:	3720      	adds	r7, #32
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd80      	pop	{r7, pc}

08002b06 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002b06:	b580      	push	{r7, lr}
 8002b08:	b08c      	sub	sp, #48	; 0x30
 8002b0a:	af00      	add	r7, sp, #0
 8002b0c:	60f8      	str	r0, [r7, #12]
 8002b0e:	60b9      	str	r1, [r7, #8]
 8002b10:	607a      	str	r2, [r7, #4]
 8002b12:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002b14:	2301      	movs	r3, #1
 8002b16:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002b18:	2300      	movs	r3, #0
 8002b1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002b24:	2b01      	cmp	r3, #1
 8002b26:	d101      	bne.n	8002b2c <HAL_SPI_TransmitReceive+0x26>
 8002b28:	2302      	movs	r3, #2
 8002b2a:	e18a      	b.n	8002e42 <HAL_SPI_TransmitReceive+0x33c>
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	2201      	movs	r2, #1
 8002b30:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002b34:	f7fe feae 	bl	8001894 <HAL_GetTick>
 8002b38:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002b40:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002b4a:	887b      	ldrh	r3, [r7, #2]
 8002b4c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002b4e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002b52:	2b01      	cmp	r3, #1
 8002b54:	d00f      	beq.n	8002b76 <HAL_SPI_TransmitReceive+0x70>
 8002b56:	69fb      	ldr	r3, [r7, #28]
 8002b58:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002b5c:	d107      	bne.n	8002b6e <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	689b      	ldr	r3, [r3, #8]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d103      	bne.n	8002b6e <HAL_SPI_TransmitReceive+0x68>
 8002b66:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002b6a:	2b04      	cmp	r3, #4
 8002b6c:	d003      	beq.n	8002b76 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002b6e:	2302      	movs	r3, #2
 8002b70:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002b74:	e15b      	b.n	8002e2e <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002b76:	68bb      	ldr	r3, [r7, #8]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d005      	beq.n	8002b88 <HAL_SPI_TransmitReceive+0x82>
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d002      	beq.n	8002b88 <HAL_SPI_TransmitReceive+0x82>
 8002b82:	887b      	ldrh	r3, [r7, #2]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d103      	bne.n	8002b90 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002b88:	2301      	movs	r3, #1
 8002b8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002b8e:	e14e      	b.n	8002e2e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002b96:	b2db      	uxtb	r3, r3
 8002b98:	2b04      	cmp	r3, #4
 8002b9a:	d003      	beq.n	8002ba4 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	2205      	movs	r2, #5
 8002ba0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	687a      	ldr	r2, [r7, #4]
 8002bae:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	887a      	ldrh	r2, [r7, #2]
 8002bb4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	887a      	ldrh	r2, [r7, #2]
 8002bba:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	68ba      	ldr	r2, [r7, #8]
 8002bc0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	887a      	ldrh	r2, [r7, #2]
 8002bc6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	887a      	ldrh	r2, [r7, #2]
 8002bcc:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002be4:	2b40      	cmp	r3, #64	; 0x40
 8002be6:	d007      	beq.n	8002bf8 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	681a      	ldr	r2, [r3, #0]
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002bf6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	68db      	ldr	r3, [r3, #12]
 8002bfc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002c00:	d178      	bne.n	8002cf4 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d002      	beq.n	8002c10 <HAL_SPI_TransmitReceive+0x10a>
 8002c0a:	8b7b      	ldrh	r3, [r7, #26]
 8002c0c:	2b01      	cmp	r3, #1
 8002c0e:	d166      	bne.n	8002cde <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c14:	881a      	ldrh	r2, [r3, #0]
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c20:	1c9a      	adds	r2, r3, #2
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c2a:	b29b      	uxth	r3, r3
 8002c2c:	3b01      	subs	r3, #1
 8002c2e:	b29a      	uxth	r2, r3
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002c34:	e053      	b.n	8002cde <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	689b      	ldr	r3, [r3, #8]
 8002c3c:	f003 0302 	and.w	r3, r3, #2
 8002c40:	2b02      	cmp	r3, #2
 8002c42:	d11b      	bne.n	8002c7c <HAL_SPI_TransmitReceive+0x176>
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c48:	b29b      	uxth	r3, r3
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d016      	beq.n	8002c7c <HAL_SPI_TransmitReceive+0x176>
 8002c4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c50:	2b01      	cmp	r3, #1
 8002c52:	d113      	bne.n	8002c7c <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c58:	881a      	ldrh	r2, [r3, #0]
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c64:	1c9a      	adds	r2, r3, #2
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c6e:	b29b      	uxth	r3, r3
 8002c70:	3b01      	subs	r3, #1
 8002c72:	b29a      	uxth	r2, r3
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002c78:	2300      	movs	r3, #0
 8002c7a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	689b      	ldr	r3, [r3, #8]
 8002c82:	f003 0301 	and.w	r3, r3, #1
 8002c86:	2b01      	cmp	r3, #1
 8002c88:	d119      	bne.n	8002cbe <HAL_SPI_TransmitReceive+0x1b8>
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c8e:	b29b      	uxth	r3, r3
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d014      	beq.n	8002cbe <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	68da      	ldr	r2, [r3, #12]
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c9e:	b292      	uxth	r2, r2
 8002ca0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ca6:	1c9a      	adds	r2, r3, #2
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002cb0:	b29b      	uxth	r3, r3
 8002cb2:	3b01      	subs	r3, #1
 8002cb4:	b29a      	uxth	r2, r3
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002cba:	2301      	movs	r3, #1
 8002cbc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002cbe:	f7fe fde9 	bl	8001894 <HAL_GetTick>
 8002cc2:	4602      	mov	r2, r0
 8002cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cc6:	1ad3      	subs	r3, r2, r3
 8002cc8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002cca:	429a      	cmp	r2, r3
 8002ccc:	d807      	bhi.n	8002cde <HAL_SPI_TransmitReceive+0x1d8>
 8002cce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cd0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002cd4:	d003      	beq.n	8002cde <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8002cd6:	2303      	movs	r3, #3
 8002cd8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002cdc:	e0a7      	b.n	8002e2e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ce2:	b29b      	uxth	r3, r3
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d1a6      	bne.n	8002c36 <HAL_SPI_TransmitReceive+0x130>
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002cec:	b29b      	uxth	r3, r3
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d1a1      	bne.n	8002c36 <HAL_SPI_TransmitReceive+0x130>
 8002cf2:	e07c      	b.n	8002dee <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d002      	beq.n	8002d02 <HAL_SPI_TransmitReceive+0x1fc>
 8002cfc:	8b7b      	ldrh	r3, [r7, #26]
 8002cfe:	2b01      	cmp	r3, #1
 8002d00:	d16b      	bne.n	8002dda <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	330c      	adds	r3, #12
 8002d0c:	7812      	ldrb	r2, [r2, #0]
 8002d0e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d14:	1c5a      	adds	r2, r3, #1
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d1e:	b29b      	uxth	r3, r3
 8002d20:	3b01      	subs	r3, #1
 8002d22:	b29a      	uxth	r2, r3
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002d28:	e057      	b.n	8002dda <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	689b      	ldr	r3, [r3, #8]
 8002d30:	f003 0302 	and.w	r3, r3, #2
 8002d34:	2b02      	cmp	r3, #2
 8002d36:	d11c      	bne.n	8002d72 <HAL_SPI_TransmitReceive+0x26c>
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d3c:	b29b      	uxth	r3, r3
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d017      	beq.n	8002d72 <HAL_SPI_TransmitReceive+0x26c>
 8002d42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d44:	2b01      	cmp	r3, #1
 8002d46:	d114      	bne.n	8002d72 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	330c      	adds	r3, #12
 8002d52:	7812      	ldrb	r2, [r2, #0]
 8002d54:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d5a:	1c5a      	adds	r2, r3, #1
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d64:	b29b      	uxth	r3, r3
 8002d66:	3b01      	subs	r3, #1
 8002d68:	b29a      	uxth	r2, r3
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002d6e:	2300      	movs	r3, #0
 8002d70:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	689b      	ldr	r3, [r3, #8]
 8002d78:	f003 0301 	and.w	r3, r3, #1
 8002d7c:	2b01      	cmp	r3, #1
 8002d7e:	d119      	bne.n	8002db4 <HAL_SPI_TransmitReceive+0x2ae>
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d84:	b29b      	uxth	r3, r3
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d014      	beq.n	8002db4 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	68da      	ldr	r2, [r3, #12]
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d94:	b2d2      	uxtb	r2, r2
 8002d96:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d9c:	1c5a      	adds	r2, r3, #1
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002da6:	b29b      	uxth	r3, r3
 8002da8:	3b01      	subs	r3, #1
 8002daa:	b29a      	uxth	r2, r3
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002db0:	2301      	movs	r3, #1
 8002db2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002db4:	f7fe fd6e 	bl	8001894 <HAL_GetTick>
 8002db8:	4602      	mov	r2, r0
 8002dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dbc:	1ad3      	subs	r3, r2, r3
 8002dbe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002dc0:	429a      	cmp	r2, r3
 8002dc2:	d803      	bhi.n	8002dcc <HAL_SPI_TransmitReceive+0x2c6>
 8002dc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dc6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002dca:	d102      	bne.n	8002dd2 <HAL_SPI_TransmitReceive+0x2cc>
 8002dcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d103      	bne.n	8002dda <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8002dd2:	2303      	movs	r3, #3
 8002dd4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002dd8:	e029      	b.n	8002e2e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002dde:	b29b      	uxth	r3, r3
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d1a2      	bne.n	8002d2a <HAL_SPI_TransmitReceive+0x224>
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002de8:	b29b      	uxth	r3, r3
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d19d      	bne.n	8002d2a <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002dee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002df0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002df2:	68f8      	ldr	r0, [r7, #12]
 8002df4:	f000 f8b2 	bl	8002f5c <SPI_EndRxTxTransaction>
 8002df8:	4603      	mov	r3, r0
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d006      	beq.n	8002e0c <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8002dfe:	2301      	movs	r3, #1
 8002e00:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	2220      	movs	r2, #32
 8002e08:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002e0a:	e010      	b.n	8002e2e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	689b      	ldr	r3, [r3, #8]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d10b      	bne.n	8002e2c <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002e14:	2300      	movs	r3, #0
 8002e16:	617b      	str	r3, [r7, #20]
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	68db      	ldr	r3, [r3, #12]
 8002e1e:	617b      	str	r3, [r7, #20]
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	689b      	ldr	r3, [r3, #8]
 8002e26:	617b      	str	r3, [r7, #20]
 8002e28:	697b      	ldr	r3, [r7, #20]
 8002e2a:	e000      	b.n	8002e2e <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8002e2c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	2201      	movs	r2, #1
 8002e32:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	2200      	movs	r2, #0
 8002e3a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002e3e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8002e42:	4618      	mov	r0, r3
 8002e44:	3730      	adds	r7, #48	; 0x30
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bd80      	pop	{r7, pc}
	...

08002e4c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b088      	sub	sp, #32
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	60f8      	str	r0, [r7, #12]
 8002e54:	60b9      	str	r1, [r7, #8]
 8002e56:	603b      	str	r3, [r7, #0]
 8002e58:	4613      	mov	r3, r2
 8002e5a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002e5c:	f7fe fd1a 	bl	8001894 <HAL_GetTick>
 8002e60:	4602      	mov	r2, r0
 8002e62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e64:	1a9b      	subs	r3, r3, r2
 8002e66:	683a      	ldr	r2, [r7, #0]
 8002e68:	4413      	add	r3, r2
 8002e6a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002e6c:	f7fe fd12 	bl	8001894 <HAL_GetTick>
 8002e70:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002e72:	4b39      	ldr	r3, [pc, #228]	; (8002f58 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	015b      	lsls	r3, r3, #5
 8002e78:	0d1b      	lsrs	r3, r3, #20
 8002e7a:	69fa      	ldr	r2, [r7, #28]
 8002e7c:	fb02 f303 	mul.w	r3, r2, r3
 8002e80:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002e82:	e054      	b.n	8002f2e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002e8a:	d050      	beq.n	8002f2e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002e8c:	f7fe fd02 	bl	8001894 <HAL_GetTick>
 8002e90:	4602      	mov	r2, r0
 8002e92:	69bb      	ldr	r3, [r7, #24]
 8002e94:	1ad3      	subs	r3, r2, r3
 8002e96:	69fa      	ldr	r2, [r7, #28]
 8002e98:	429a      	cmp	r2, r3
 8002e9a:	d902      	bls.n	8002ea2 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002e9c:	69fb      	ldr	r3, [r7, #28]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d13d      	bne.n	8002f1e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	685a      	ldr	r2, [r3, #4]
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002eb0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002eba:	d111      	bne.n	8002ee0 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	689b      	ldr	r3, [r3, #8]
 8002ec0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ec4:	d004      	beq.n	8002ed0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	689b      	ldr	r3, [r3, #8]
 8002eca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ece:	d107      	bne.n	8002ee0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	681a      	ldr	r2, [r3, #0]
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ede:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ee4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ee8:	d10f      	bne.n	8002f0a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	681a      	ldr	r2, [r3, #0]
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002ef8:	601a      	str	r2, [r3, #0]
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	681a      	ldr	r2, [r3, #0]
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002f08:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	2201      	movs	r2, #1
 8002f0e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	2200      	movs	r2, #0
 8002f16:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002f1a:	2303      	movs	r3, #3
 8002f1c:	e017      	b.n	8002f4e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002f1e:	697b      	ldr	r3, [r7, #20]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d101      	bne.n	8002f28 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002f24:	2300      	movs	r3, #0
 8002f26:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002f28:	697b      	ldr	r3, [r7, #20]
 8002f2a:	3b01      	subs	r3, #1
 8002f2c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	689a      	ldr	r2, [r3, #8]
 8002f34:	68bb      	ldr	r3, [r7, #8]
 8002f36:	4013      	ands	r3, r2
 8002f38:	68ba      	ldr	r2, [r7, #8]
 8002f3a:	429a      	cmp	r2, r3
 8002f3c:	bf0c      	ite	eq
 8002f3e:	2301      	moveq	r3, #1
 8002f40:	2300      	movne	r3, #0
 8002f42:	b2db      	uxtb	r3, r3
 8002f44:	461a      	mov	r2, r3
 8002f46:	79fb      	ldrb	r3, [r7, #7]
 8002f48:	429a      	cmp	r2, r3
 8002f4a:	d19b      	bne.n	8002e84 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002f4c:	2300      	movs	r3, #0
}
 8002f4e:	4618      	mov	r0, r3
 8002f50:	3720      	adds	r7, #32
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd80      	pop	{r7, pc}
 8002f56:	bf00      	nop
 8002f58:	20000004 	.word	0x20000004

08002f5c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b088      	sub	sp, #32
 8002f60:	af02      	add	r7, sp, #8
 8002f62:	60f8      	str	r0, [r7, #12]
 8002f64:	60b9      	str	r1, [r7, #8]
 8002f66:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002f68:	4b1b      	ldr	r3, [pc, #108]	; (8002fd8 <SPI_EndRxTxTransaction+0x7c>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4a1b      	ldr	r2, [pc, #108]	; (8002fdc <SPI_EndRxTxTransaction+0x80>)
 8002f6e:	fba2 2303 	umull	r2, r3, r2, r3
 8002f72:	0d5b      	lsrs	r3, r3, #21
 8002f74:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002f78:	fb02 f303 	mul.w	r3, r2, r3
 8002f7c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002f86:	d112      	bne.n	8002fae <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	9300      	str	r3, [sp, #0]
 8002f8c:	68bb      	ldr	r3, [r7, #8]
 8002f8e:	2200      	movs	r2, #0
 8002f90:	2180      	movs	r1, #128	; 0x80
 8002f92:	68f8      	ldr	r0, [r7, #12]
 8002f94:	f7ff ff5a 	bl	8002e4c <SPI_WaitFlagStateUntilTimeout>
 8002f98:	4603      	mov	r3, r0
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d016      	beq.n	8002fcc <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fa2:	f043 0220 	orr.w	r2, r3, #32
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002faa:	2303      	movs	r3, #3
 8002fac:	e00f      	b.n	8002fce <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002fae:	697b      	ldr	r3, [r7, #20]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d00a      	beq.n	8002fca <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8002fb4:	697b      	ldr	r3, [r7, #20]
 8002fb6:	3b01      	subs	r3, #1
 8002fb8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	689b      	ldr	r3, [r3, #8]
 8002fc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fc4:	2b80      	cmp	r3, #128	; 0x80
 8002fc6:	d0f2      	beq.n	8002fae <SPI_EndRxTxTransaction+0x52>
 8002fc8:	e000      	b.n	8002fcc <SPI_EndRxTxTransaction+0x70>
        break;
 8002fca:	bf00      	nop
  }

  return HAL_OK;
 8002fcc:	2300      	movs	r3, #0
}
 8002fce:	4618      	mov	r0, r3
 8002fd0:	3718      	adds	r7, #24
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	bd80      	pop	{r7, pc}
 8002fd6:	bf00      	nop
 8002fd8:	20000004 	.word	0x20000004
 8002fdc:	165e9f81 	.word	0x165e9f81

08002fe0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b082      	sub	sp, #8
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d101      	bne.n	8002ff2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	e03f      	b.n	8003072 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ff8:	b2db      	uxtb	r3, r3
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d106      	bne.n	800300c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2200      	movs	r2, #0
 8003002:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003006:	6878      	ldr	r0, [r7, #4]
 8003008:	f7fe fb18 	bl	800163c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2224      	movs	r2, #36	; 0x24
 8003010:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	68da      	ldr	r2, [r3, #12]
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003022:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003024:	6878      	ldr	r0, [r7, #4]
 8003026:	f000 f929 	bl	800327c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	691a      	ldr	r2, [r3, #16]
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003038:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	695a      	ldr	r2, [r3, #20]
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003048:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	68da      	ldr	r2, [r3, #12]
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003058:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2200      	movs	r2, #0
 800305e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2220      	movs	r2, #32
 8003064:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2220      	movs	r2, #32
 800306c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003070:	2300      	movs	r3, #0
}
 8003072:	4618      	mov	r0, r3
 8003074:	3708      	adds	r7, #8
 8003076:	46bd      	mov	sp, r7
 8003078:	bd80      	pop	{r7, pc}

0800307a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800307a:	b580      	push	{r7, lr}
 800307c:	b08a      	sub	sp, #40	; 0x28
 800307e:	af02      	add	r7, sp, #8
 8003080:	60f8      	str	r0, [r7, #12]
 8003082:	60b9      	str	r1, [r7, #8]
 8003084:	603b      	str	r3, [r7, #0]
 8003086:	4613      	mov	r3, r2
 8003088:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800308a:	2300      	movs	r3, #0
 800308c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003094:	b2db      	uxtb	r3, r3
 8003096:	2b20      	cmp	r3, #32
 8003098:	d17c      	bne.n	8003194 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800309a:	68bb      	ldr	r3, [r7, #8]
 800309c:	2b00      	cmp	r3, #0
 800309e:	d002      	beq.n	80030a6 <HAL_UART_Transmit+0x2c>
 80030a0:	88fb      	ldrh	r3, [r7, #6]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d101      	bne.n	80030aa <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80030a6:	2301      	movs	r3, #1
 80030a8:	e075      	b.n	8003196 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030b0:	2b01      	cmp	r3, #1
 80030b2:	d101      	bne.n	80030b8 <HAL_UART_Transmit+0x3e>
 80030b4:	2302      	movs	r3, #2
 80030b6:	e06e      	b.n	8003196 <HAL_UART_Transmit+0x11c>
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	2201      	movs	r2, #1
 80030bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	2200      	movs	r2, #0
 80030c4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	2221      	movs	r2, #33	; 0x21
 80030ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80030ce:	f7fe fbe1 	bl	8001894 <HAL_GetTick>
 80030d2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	88fa      	ldrh	r2, [r7, #6]
 80030d8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	88fa      	ldrh	r2, [r7, #6]
 80030de:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	689b      	ldr	r3, [r3, #8]
 80030e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030e8:	d108      	bne.n	80030fc <HAL_UART_Transmit+0x82>
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	691b      	ldr	r3, [r3, #16]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d104      	bne.n	80030fc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80030f2:	2300      	movs	r3, #0
 80030f4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80030f6:	68bb      	ldr	r3, [r7, #8]
 80030f8:	61bb      	str	r3, [r7, #24]
 80030fa:	e003      	b.n	8003104 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80030fc:	68bb      	ldr	r3, [r7, #8]
 80030fe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003100:	2300      	movs	r3, #0
 8003102:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	2200      	movs	r2, #0
 8003108:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800310c:	e02a      	b.n	8003164 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	9300      	str	r3, [sp, #0]
 8003112:	697b      	ldr	r3, [r7, #20]
 8003114:	2200      	movs	r2, #0
 8003116:	2180      	movs	r1, #128	; 0x80
 8003118:	68f8      	ldr	r0, [r7, #12]
 800311a:	f000 f840 	bl	800319e <UART_WaitOnFlagUntilTimeout>
 800311e:	4603      	mov	r3, r0
 8003120:	2b00      	cmp	r3, #0
 8003122:	d001      	beq.n	8003128 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003124:	2303      	movs	r3, #3
 8003126:	e036      	b.n	8003196 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003128:	69fb      	ldr	r3, [r7, #28]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d10b      	bne.n	8003146 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800312e:	69bb      	ldr	r3, [r7, #24]
 8003130:	881b      	ldrh	r3, [r3, #0]
 8003132:	461a      	mov	r2, r3
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800313c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800313e:	69bb      	ldr	r3, [r7, #24]
 8003140:	3302      	adds	r3, #2
 8003142:	61bb      	str	r3, [r7, #24]
 8003144:	e007      	b.n	8003156 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003146:	69fb      	ldr	r3, [r7, #28]
 8003148:	781a      	ldrb	r2, [r3, #0]
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003150:	69fb      	ldr	r3, [r7, #28]
 8003152:	3301      	adds	r3, #1
 8003154:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800315a:	b29b      	uxth	r3, r3
 800315c:	3b01      	subs	r3, #1
 800315e:	b29a      	uxth	r2, r3
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003168:	b29b      	uxth	r3, r3
 800316a:	2b00      	cmp	r3, #0
 800316c:	d1cf      	bne.n	800310e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	9300      	str	r3, [sp, #0]
 8003172:	697b      	ldr	r3, [r7, #20]
 8003174:	2200      	movs	r2, #0
 8003176:	2140      	movs	r1, #64	; 0x40
 8003178:	68f8      	ldr	r0, [r7, #12]
 800317a:	f000 f810 	bl	800319e <UART_WaitOnFlagUntilTimeout>
 800317e:	4603      	mov	r3, r0
 8003180:	2b00      	cmp	r3, #0
 8003182:	d001      	beq.n	8003188 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003184:	2303      	movs	r3, #3
 8003186:	e006      	b.n	8003196 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	2220      	movs	r2, #32
 800318c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003190:	2300      	movs	r3, #0
 8003192:	e000      	b.n	8003196 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003194:	2302      	movs	r3, #2
  }
}
 8003196:	4618      	mov	r0, r3
 8003198:	3720      	adds	r7, #32
 800319a:	46bd      	mov	sp, r7
 800319c:	bd80      	pop	{r7, pc}

0800319e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800319e:	b580      	push	{r7, lr}
 80031a0:	b090      	sub	sp, #64	; 0x40
 80031a2:	af00      	add	r7, sp, #0
 80031a4:	60f8      	str	r0, [r7, #12]
 80031a6:	60b9      	str	r1, [r7, #8]
 80031a8:	603b      	str	r3, [r7, #0]
 80031aa:	4613      	mov	r3, r2
 80031ac:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80031ae:	e050      	b.n	8003252 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80031b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80031b6:	d04c      	beq.n	8003252 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80031b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d007      	beq.n	80031ce <UART_WaitOnFlagUntilTimeout+0x30>
 80031be:	f7fe fb69 	bl	8001894 <HAL_GetTick>
 80031c2:	4602      	mov	r2, r0
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	1ad3      	subs	r3, r2, r3
 80031c8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80031ca:	429a      	cmp	r2, r3
 80031cc:	d241      	bcs.n	8003252 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	330c      	adds	r3, #12
 80031d4:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031d8:	e853 3f00 	ldrex	r3, [r3]
 80031dc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80031de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031e0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80031e4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	330c      	adds	r3, #12
 80031ec:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80031ee:	637a      	str	r2, [r7, #52]	; 0x34
 80031f0:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031f2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80031f4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80031f6:	e841 2300 	strex	r3, r2, [r1]
 80031fa:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80031fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d1e5      	bne.n	80031ce <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	3314      	adds	r3, #20
 8003208:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800320a:	697b      	ldr	r3, [r7, #20]
 800320c:	e853 3f00 	ldrex	r3, [r3]
 8003210:	613b      	str	r3, [r7, #16]
   return(result);
 8003212:	693b      	ldr	r3, [r7, #16]
 8003214:	f023 0301 	bic.w	r3, r3, #1
 8003218:	63bb      	str	r3, [r7, #56]	; 0x38
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	3314      	adds	r3, #20
 8003220:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003222:	623a      	str	r2, [r7, #32]
 8003224:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003226:	69f9      	ldr	r1, [r7, #28]
 8003228:	6a3a      	ldr	r2, [r7, #32]
 800322a:	e841 2300 	strex	r3, r2, [r1]
 800322e:	61bb      	str	r3, [r7, #24]
   return(result);
 8003230:	69bb      	ldr	r3, [r7, #24]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d1e5      	bne.n	8003202 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	2220      	movs	r2, #32
 800323a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	2220      	movs	r2, #32
 8003242:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	2200      	movs	r2, #0
 800324a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800324e:	2303      	movs	r3, #3
 8003250:	e00f      	b.n	8003272 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	681a      	ldr	r2, [r3, #0]
 8003258:	68bb      	ldr	r3, [r7, #8]
 800325a:	4013      	ands	r3, r2
 800325c:	68ba      	ldr	r2, [r7, #8]
 800325e:	429a      	cmp	r2, r3
 8003260:	bf0c      	ite	eq
 8003262:	2301      	moveq	r3, #1
 8003264:	2300      	movne	r3, #0
 8003266:	b2db      	uxtb	r3, r3
 8003268:	461a      	mov	r2, r3
 800326a:	79fb      	ldrb	r3, [r7, #7]
 800326c:	429a      	cmp	r2, r3
 800326e:	d09f      	beq.n	80031b0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003270:	2300      	movs	r3, #0
}
 8003272:	4618      	mov	r0, r3
 8003274:	3740      	adds	r7, #64	; 0x40
 8003276:	46bd      	mov	sp, r7
 8003278:	bd80      	pop	{r7, pc}
	...

0800327c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800327c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003280:	b0c0      	sub	sp, #256	; 0x100
 8003282:	af00      	add	r7, sp, #0
 8003284:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003288:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	691b      	ldr	r3, [r3, #16]
 8003290:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003294:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003298:	68d9      	ldr	r1, [r3, #12]
 800329a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800329e:	681a      	ldr	r2, [r3, #0]
 80032a0:	ea40 0301 	orr.w	r3, r0, r1
 80032a4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80032a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032aa:	689a      	ldr	r2, [r3, #8]
 80032ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032b0:	691b      	ldr	r3, [r3, #16]
 80032b2:	431a      	orrs	r2, r3
 80032b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032b8:	695b      	ldr	r3, [r3, #20]
 80032ba:	431a      	orrs	r2, r3
 80032bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032c0:	69db      	ldr	r3, [r3, #28]
 80032c2:	4313      	orrs	r3, r2
 80032c4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80032c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	68db      	ldr	r3, [r3, #12]
 80032d0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80032d4:	f021 010c 	bic.w	r1, r1, #12
 80032d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032dc:	681a      	ldr	r2, [r3, #0]
 80032de:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80032e2:	430b      	orrs	r3, r1
 80032e4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80032e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	695b      	ldr	r3, [r3, #20]
 80032ee:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80032f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032f6:	6999      	ldr	r1, [r3, #24]
 80032f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032fc:	681a      	ldr	r2, [r3, #0]
 80032fe:	ea40 0301 	orr.w	r3, r0, r1
 8003302:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003304:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003308:	681a      	ldr	r2, [r3, #0]
 800330a:	4b8f      	ldr	r3, [pc, #572]	; (8003548 <UART_SetConfig+0x2cc>)
 800330c:	429a      	cmp	r2, r3
 800330e:	d005      	beq.n	800331c <UART_SetConfig+0xa0>
 8003310:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003314:	681a      	ldr	r2, [r3, #0]
 8003316:	4b8d      	ldr	r3, [pc, #564]	; (800354c <UART_SetConfig+0x2d0>)
 8003318:	429a      	cmp	r2, r3
 800331a:	d104      	bne.n	8003326 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800331c:	f7ff fa1a 	bl	8002754 <HAL_RCC_GetPCLK2Freq>
 8003320:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003324:	e003      	b.n	800332e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003326:	f7ff fa01 	bl	800272c <HAL_RCC_GetPCLK1Freq>
 800332a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800332e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003332:	69db      	ldr	r3, [r3, #28]
 8003334:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003338:	f040 810c 	bne.w	8003554 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800333c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003340:	2200      	movs	r2, #0
 8003342:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003346:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800334a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800334e:	4622      	mov	r2, r4
 8003350:	462b      	mov	r3, r5
 8003352:	1891      	adds	r1, r2, r2
 8003354:	65b9      	str	r1, [r7, #88]	; 0x58
 8003356:	415b      	adcs	r3, r3
 8003358:	65fb      	str	r3, [r7, #92]	; 0x5c
 800335a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800335e:	4621      	mov	r1, r4
 8003360:	eb12 0801 	adds.w	r8, r2, r1
 8003364:	4629      	mov	r1, r5
 8003366:	eb43 0901 	adc.w	r9, r3, r1
 800336a:	f04f 0200 	mov.w	r2, #0
 800336e:	f04f 0300 	mov.w	r3, #0
 8003372:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003376:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800337a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800337e:	4690      	mov	r8, r2
 8003380:	4699      	mov	r9, r3
 8003382:	4623      	mov	r3, r4
 8003384:	eb18 0303 	adds.w	r3, r8, r3
 8003388:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800338c:	462b      	mov	r3, r5
 800338e:	eb49 0303 	adc.w	r3, r9, r3
 8003392:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003396:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	2200      	movs	r2, #0
 800339e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80033a2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80033a6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80033aa:	460b      	mov	r3, r1
 80033ac:	18db      	adds	r3, r3, r3
 80033ae:	653b      	str	r3, [r7, #80]	; 0x50
 80033b0:	4613      	mov	r3, r2
 80033b2:	eb42 0303 	adc.w	r3, r2, r3
 80033b6:	657b      	str	r3, [r7, #84]	; 0x54
 80033b8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80033bc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80033c0:	f7fc ff1c 	bl	80001fc <__aeabi_uldivmod>
 80033c4:	4602      	mov	r2, r0
 80033c6:	460b      	mov	r3, r1
 80033c8:	4b61      	ldr	r3, [pc, #388]	; (8003550 <UART_SetConfig+0x2d4>)
 80033ca:	fba3 2302 	umull	r2, r3, r3, r2
 80033ce:	095b      	lsrs	r3, r3, #5
 80033d0:	011c      	lsls	r4, r3, #4
 80033d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80033d6:	2200      	movs	r2, #0
 80033d8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80033dc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80033e0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80033e4:	4642      	mov	r2, r8
 80033e6:	464b      	mov	r3, r9
 80033e8:	1891      	adds	r1, r2, r2
 80033ea:	64b9      	str	r1, [r7, #72]	; 0x48
 80033ec:	415b      	adcs	r3, r3
 80033ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80033f0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80033f4:	4641      	mov	r1, r8
 80033f6:	eb12 0a01 	adds.w	sl, r2, r1
 80033fa:	4649      	mov	r1, r9
 80033fc:	eb43 0b01 	adc.w	fp, r3, r1
 8003400:	f04f 0200 	mov.w	r2, #0
 8003404:	f04f 0300 	mov.w	r3, #0
 8003408:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800340c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003410:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003414:	4692      	mov	sl, r2
 8003416:	469b      	mov	fp, r3
 8003418:	4643      	mov	r3, r8
 800341a:	eb1a 0303 	adds.w	r3, sl, r3
 800341e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003422:	464b      	mov	r3, r9
 8003424:	eb4b 0303 	adc.w	r3, fp, r3
 8003428:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800342c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	2200      	movs	r2, #0
 8003434:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003438:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800343c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003440:	460b      	mov	r3, r1
 8003442:	18db      	adds	r3, r3, r3
 8003444:	643b      	str	r3, [r7, #64]	; 0x40
 8003446:	4613      	mov	r3, r2
 8003448:	eb42 0303 	adc.w	r3, r2, r3
 800344c:	647b      	str	r3, [r7, #68]	; 0x44
 800344e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003452:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003456:	f7fc fed1 	bl	80001fc <__aeabi_uldivmod>
 800345a:	4602      	mov	r2, r0
 800345c:	460b      	mov	r3, r1
 800345e:	4611      	mov	r1, r2
 8003460:	4b3b      	ldr	r3, [pc, #236]	; (8003550 <UART_SetConfig+0x2d4>)
 8003462:	fba3 2301 	umull	r2, r3, r3, r1
 8003466:	095b      	lsrs	r3, r3, #5
 8003468:	2264      	movs	r2, #100	; 0x64
 800346a:	fb02 f303 	mul.w	r3, r2, r3
 800346e:	1acb      	subs	r3, r1, r3
 8003470:	00db      	lsls	r3, r3, #3
 8003472:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003476:	4b36      	ldr	r3, [pc, #216]	; (8003550 <UART_SetConfig+0x2d4>)
 8003478:	fba3 2302 	umull	r2, r3, r3, r2
 800347c:	095b      	lsrs	r3, r3, #5
 800347e:	005b      	lsls	r3, r3, #1
 8003480:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003484:	441c      	add	r4, r3
 8003486:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800348a:	2200      	movs	r2, #0
 800348c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003490:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003494:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003498:	4642      	mov	r2, r8
 800349a:	464b      	mov	r3, r9
 800349c:	1891      	adds	r1, r2, r2
 800349e:	63b9      	str	r1, [r7, #56]	; 0x38
 80034a0:	415b      	adcs	r3, r3
 80034a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80034a4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80034a8:	4641      	mov	r1, r8
 80034aa:	1851      	adds	r1, r2, r1
 80034ac:	6339      	str	r1, [r7, #48]	; 0x30
 80034ae:	4649      	mov	r1, r9
 80034b0:	414b      	adcs	r3, r1
 80034b2:	637b      	str	r3, [r7, #52]	; 0x34
 80034b4:	f04f 0200 	mov.w	r2, #0
 80034b8:	f04f 0300 	mov.w	r3, #0
 80034bc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80034c0:	4659      	mov	r1, fp
 80034c2:	00cb      	lsls	r3, r1, #3
 80034c4:	4651      	mov	r1, sl
 80034c6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80034ca:	4651      	mov	r1, sl
 80034cc:	00ca      	lsls	r2, r1, #3
 80034ce:	4610      	mov	r0, r2
 80034d0:	4619      	mov	r1, r3
 80034d2:	4603      	mov	r3, r0
 80034d4:	4642      	mov	r2, r8
 80034d6:	189b      	adds	r3, r3, r2
 80034d8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80034dc:	464b      	mov	r3, r9
 80034de:	460a      	mov	r2, r1
 80034e0:	eb42 0303 	adc.w	r3, r2, r3
 80034e4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80034e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	2200      	movs	r2, #0
 80034f0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80034f4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80034f8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80034fc:	460b      	mov	r3, r1
 80034fe:	18db      	adds	r3, r3, r3
 8003500:	62bb      	str	r3, [r7, #40]	; 0x28
 8003502:	4613      	mov	r3, r2
 8003504:	eb42 0303 	adc.w	r3, r2, r3
 8003508:	62fb      	str	r3, [r7, #44]	; 0x2c
 800350a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800350e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003512:	f7fc fe73 	bl	80001fc <__aeabi_uldivmod>
 8003516:	4602      	mov	r2, r0
 8003518:	460b      	mov	r3, r1
 800351a:	4b0d      	ldr	r3, [pc, #52]	; (8003550 <UART_SetConfig+0x2d4>)
 800351c:	fba3 1302 	umull	r1, r3, r3, r2
 8003520:	095b      	lsrs	r3, r3, #5
 8003522:	2164      	movs	r1, #100	; 0x64
 8003524:	fb01 f303 	mul.w	r3, r1, r3
 8003528:	1ad3      	subs	r3, r2, r3
 800352a:	00db      	lsls	r3, r3, #3
 800352c:	3332      	adds	r3, #50	; 0x32
 800352e:	4a08      	ldr	r2, [pc, #32]	; (8003550 <UART_SetConfig+0x2d4>)
 8003530:	fba2 2303 	umull	r2, r3, r2, r3
 8003534:	095b      	lsrs	r3, r3, #5
 8003536:	f003 0207 	and.w	r2, r3, #7
 800353a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4422      	add	r2, r4
 8003542:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003544:	e105      	b.n	8003752 <UART_SetConfig+0x4d6>
 8003546:	bf00      	nop
 8003548:	40011000 	.word	0x40011000
 800354c:	40011400 	.word	0x40011400
 8003550:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003554:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003558:	2200      	movs	r2, #0
 800355a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800355e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003562:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003566:	4642      	mov	r2, r8
 8003568:	464b      	mov	r3, r9
 800356a:	1891      	adds	r1, r2, r2
 800356c:	6239      	str	r1, [r7, #32]
 800356e:	415b      	adcs	r3, r3
 8003570:	627b      	str	r3, [r7, #36]	; 0x24
 8003572:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003576:	4641      	mov	r1, r8
 8003578:	1854      	adds	r4, r2, r1
 800357a:	4649      	mov	r1, r9
 800357c:	eb43 0501 	adc.w	r5, r3, r1
 8003580:	f04f 0200 	mov.w	r2, #0
 8003584:	f04f 0300 	mov.w	r3, #0
 8003588:	00eb      	lsls	r3, r5, #3
 800358a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800358e:	00e2      	lsls	r2, r4, #3
 8003590:	4614      	mov	r4, r2
 8003592:	461d      	mov	r5, r3
 8003594:	4643      	mov	r3, r8
 8003596:	18e3      	adds	r3, r4, r3
 8003598:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800359c:	464b      	mov	r3, r9
 800359e:	eb45 0303 	adc.w	r3, r5, r3
 80035a2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80035a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	2200      	movs	r2, #0
 80035ae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80035b2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80035b6:	f04f 0200 	mov.w	r2, #0
 80035ba:	f04f 0300 	mov.w	r3, #0
 80035be:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80035c2:	4629      	mov	r1, r5
 80035c4:	008b      	lsls	r3, r1, #2
 80035c6:	4621      	mov	r1, r4
 80035c8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80035cc:	4621      	mov	r1, r4
 80035ce:	008a      	lsls	r2, r1, #2
 80035d0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80035d4:	f7fc fe12 	bl	80001fc <__aeabi_uldivmod>
 80035d8:	4602      	mov	r2, r0
 80035da:	460b      	mov	r3, r1
 80035dc:	4b60      	ldr	r3, [pc, #384]	; (8003760 <UART_SetConfig+0x4e4>)
 80035de:	fba3 2302 	umull	r2, r3, r3, r2
 80035e2:	095b      	lsrs	r3, r3, #5
 80035e4:	011c      	lsls	r4, r3, #4
 80035e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80035ea:	2200      	movs	r2, #0
 80035ec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80035f0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80035f4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80035f8:	4642      	mov	r2, r8
 80035fa:	464b      	mov	r3, r9
 80035fc:	1891      	adds	r1, r2, r2
 80035fe:	61b9      	str	r1, [r7, #24]
 8003600:	415b      	adcs	r3, r3
 8003602:	61fb      	str	r3, [r7, #28]
 8003604:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003608:	4641      	mov	r1, r8
 800360a:	1851      	adds	r1, r2, r1
 800360c:	6139      	str	r1, [r7, #16]
 800360e:	4649      	mov	r1, r9
 8003610:	414b      	adcs	r3, r1
 8003612:	617b      	str	r3, [r7, #20]
 8003614:	f04f 0200 	mov.w	r2, #0
 8003618:	f04f 0300 	mov.w	r3, #0
 800361c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003620:	4659      	mov	r1, fp
 8003622:	00cb      	lsls	r3, r1, #3
 8003624:	4651      	mov	r1, sl
 8003626:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800362a:	4651      	mov	r1, sl
 800362c:	00ca      	lsls	r2, r1, #3
 800362e:	4610      	mov	r0, r2
 8003630:	4619      	mov	r1, r3
 8003632:	4603      	mov	r3, r0
 8003634:	4642      	mov	r2, r8
 8003636:	189b      	adds	r3, r3, r2
 8003638:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800363c:	464b      	mov	r3, r9
 800363e:	460a      	mov	r2, r1
 8003640:	eb42 0303 	adc.w	r3, r2, r3
 8003644:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003648:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	2200      	movs	r2, #0
 8003650:	67bb      	str	r3, [r7, #120]	; 0x78
 8003652:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003654:	f04f 0200 	mov.w	r2, #0
 8003658:	f04f 0300 	mov.w	r3, #0
 800365c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003660:	4649      	mov	r1, r9
 8003662:	008b      	lsls	r3, r1, #2
 8003664:	4641      	mov	r1, r8
 8003666:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800366a:	4641      	mov	r1, r8
 800366c:	008a      	lsls	r2, r1, #2
 800366e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003672:	f7fc fdc3 	bl	80001fc <__aeabi_uldivmod>
 8003676:	4602      	mov	r2, r0
 8003678:	460b      	mov	r3, r1
 800367a:	4b39      	ldr	r3, [pc, #228]	; (8003760 <UART_SetConfig+0x4e4>)
 800367c:	fba3 1302 	umull	r1, r3, r3, r2
 8003680:	095b      	lsrs	r3, r3, #5
 8003682:	2164      	movs	r1, #100	; 0x64
 8003684:	fb01 f303 	mul.w	r3, r1, r3
 8003688:	1ad3      	subs	r3, r2, r3
 800368a:	011b      	lsls	r3, r3, #4
 800368c:	3332      	adds	r3, #50	; 0x32
 800368e:	4a34      	ldr	r2, [pc, #208]	; (8003760 <UART_SetConfig+0x4e4>)
 8003690:	fba2 2303 	umull	r2, r3, r2, r3
 8003694:	095b      	lsrs	r3, r3, #5
 8003696:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800369a:	441c      	add	r4, r3
 800369c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80036a0:	2200      	movs	r2, #0
 80036a2:	673b      	str	r3, [r7, #112]	; 0x70
 80036a4:	677a      	str	r2, [r7, #116]	; 0x74
 80036a6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80036aa:	4642      	mov	r2, r8
 80036ac:	464b      	mov	r3, r9
 80036ae:	1891      	adds	r1, r2, r2
 80036b0:	60b9      	str	r1, [r7, #8]
 80036b2:	415b      	adcs	r3, r3
 80036b4:	60fb      	str	r3, [r7, #12]
 80036b6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80036ba:	4641      	mov	r1, r8
 80036bc:	1851      	adds	r1, r2, r1
 80036be:	6039      	str	r1, [r7, #0]
 80036c0:	4649      	mov	r1, r9
 80036c2:	414b      	adcs	r3, r1
 80036c4:	607b      	str	r3, [r7, #4]
 80036c6:	f04f 0200 	mov.w	r2, #0
 80036ca:	f04f 0300 	mov.w	r3, #0
 80036ce:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80036d2:	4659      	mov	r1, fp
 80036d4:	00cb      	lsls	r3, r1, #3
 80036d6:	4651      	mov	r1, sl
 80036d8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80036dc:	4651      	mov	r1, sl
 80036de:	00ca      	lsls	r2, r1, #3
 80036e0:	4610      	mov	r0, r2
 80036e2:	4619      	mov	r1, r3
 80036e4:	4603      	mov	r3, r0
 80036e6:	4642      	mov	r2, r8
 80036e8:	189b      	adds	r3, r3, r2
 80036ea:	66bb      	str	r3, [r7, #104]	; 0x68
 80036ec:	464b      	mov	r3, r9
 80036ee:	460a      	mov	r2, r1
 80036f0:	eb42 0303 	adc.w	r3, r2, r3
 80036f4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80036f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036fa:	685b      	ldr	r3, [r3, #4]
 80036fc:	2200      	movs	r2, #0
 80036fe:	663b      	str	r3, [r7, #96]	; 0x60
 8003700:	667a      	str	r2, [r7, #100]	; 0x64
 8003702:	f04f 0200 	mov.w	r2, #0
 8003706:	f04f 0300 	mov.w	r3, #0
 800370a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800370e:	4649      	mov	r1, r9
 8003710:	008b      	lsls	r3, r1, #2
 8003712:	4641      	mov	r1, r8
 8003714:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003718:	4641      	mov	r1, r8
 800371a:	008a      	lsls	r2, r1, #2
 800371c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003720:	f7fc fd6c 	bl	80001fc <__aeabi_uldivmod>
 8003724:	4602      	mov	r2, r0
 8003726:	460b      	mov	r3, r1
 8003728:	4b0d      	ldr	r3, [pc, #52]	; (8003760 <UART_SetConfig+0x4e4>)
 800372a:	fba3 1302 	umull	r1, r3, r3, r2
 800372e:	095b      	lsrs	r3, r3, #5
 8003730:	2164      	movs	r1, #100	; 0x64
 8003732:	fb01 f303 	mul.w	r3, r1, r3
 8003736:	1ad3      	subs	r3, r2, r3
 8003738:	011b      	lsls	r3, r3, #4
 800373a:	3332      	adds	r3, #50	; 0x32
 800373c:	4a08      	ldr	r2, [pc, #32]	; (8003760 <UART_SetConfig+0x4e4>)
 800373e:	fba2 2303 	umull	r2, r3, r2, r3
 8003742:	095b      	lsrs	r3, r3, #5
 8003744:	f003 020f 	and.w	r2, r3, #15
 8003748:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4422      	add	r2, r4
 8003750:	609a      	str	r2, [r3, #8]
}
 8003752:	bf00      	nop
 8003754:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003758:	46bd      	mov	sp, r7
 800375a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800375e:	bf00      	nop
 8003760:	51eb851f 	.word	0x51eb851f

08003764 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8003768:	4904      	ldr	r1, [pc, #16]	; (800377c <MX_FATFS_Init+0x18>)
 800376a:	4805      	ldr	r0, [pc, #20]	; (8003780 <MX_FATFS_Init+0x1c>)
 800376c:	f002 f9f2 	bl	8005b54 <FATFS_LinkDriver>
 8003770:	4603      	mov	r3, r0
 8003772:	461a      	mov	r2, r3
 8003774:	4b03      	ldr	r3, [pc, #12]	; (8003784 <MX_FATFS_Init+0x20>)
 8003776:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8003778:	bf00      	nop
 800377a:	bd80      	pop	{r7, pc}
 800377c:	20001128 	.word	0x20001128
 8003780:	20000010 	.word	0x20000010
 8003784:	20001124 	.word	0x20001124

08003788 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b082      	sub	sp, #8
 800378c:	af00      	add	r7, sp, #0
 800378e:	4603      	mov	r3, r0
 8003790:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
//    Stat = STA_NOINIT;
//    return Stat;
	return SD_disk_initialize(pdrv);
 8003792:	79fb      	ldrb	r3, [r7, #7]
 8003794:	4618      	mov	r0, r3
 8003796:	f7fd f86b 	bl	8000870 <SD_disk_initialize>
 800379a:	4603      	mov	r3, r0
 800379c:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 800379e:	4618      	mov	r0, r3
 80037a0:	3708      	adds	r7, #8
 80037a2:	46bd      	mov	sp, r7
 80037a4:	bd80      	pop	{r7, pc}

080037a6 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 80037a6:	b580      	push	{r7, lr}
 80037a8:	b082      	sub	sp, #8
 80037aa:	af00      	add	r7, sp, #0
 80037ac:	4603      	mov	r3, r0
 80037ae:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
//    Stat = STA_NOINIT;
//    return Stat;
	return SD_disk_status(pdrv);
 80037b0:	79fb      	ldrb	r3, [r7, #7]
 80037b2:	4618      	mov	r0, r3
 80037b4:	f7fd f942 	bl	8000a3c <SD_disk_status>
 80037b8:	4603      	mov	r3, r0
 80037ba:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 80037bc:	4618      	mov	r0, r3
 80037be:	3708      	adds	r7, #8
 80037c0:	46bd      	mov	sp, r7
 80037c2:	bd80      	pop	{r7, pc}

080037c4 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b084      	sub	sp, #16
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	60b9      	str	r1, [r7, #8]
 80037cc:	607a      	str	r2, [r7, #4]
 80037ce:	603b      	str	r3, [r7, #0]
 80037d0:	4603      	mov	r3, r0
 80037d2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
//    return RES_OK;
	return SD_disk_read(pdrv, buff, sector, count);
 80037d4:	7bf8      	ldrb	r0, [r7, #15]
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	687a      	ldr	r2, [r7, #4]
 80037da:	68b9      	ldr	r1, [r7, #8]
 80037dc:	f7fd f944 	bl	8000a68 <SD_disk_read>
 80037e0:	4603      	mov	r3, r0
 80037e2:	b2db      	uxtb	r3, r3
  /* USER CODE END READ */
}
 80037e4:	4618      	mov	r0, r3
 80037e6:	3710      	adds	r7, #16
 80037e8:	46bd      	mov	sp, r7
 80037ea:	bd80      	pop	{r7, pc}

080037ec <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b084      	sub	sp, #16
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	60b9      	str	r1, [r7, #8]
 80037f4:	607a      	str	r2, [r7, #4]
 80037f6:	603b      	str	r3, [r7, #0]
 80037f8:	4603      	mov	r3, r0
 80037fa:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    // return RES_OK;
	return SD_disk_write(pdrv, buff, sector, count);
 80037fc:	7bf8      	ldrb	r0, [r7, #15]
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	687a      	ldr	r2, [r7, #4]
 8003802:	68b9      	ldr	r1, [r7, #8]
 8003804:	f7fd f99a 	bl	8000b3c <SD_disk_write>
 8003808:	4603      	mov	r3, r0
 800380a:	b2db      	uxtb	r3, r3
  /* USER CODE END WRITE */
}
 800380c:	4618      	mov	r0, r3
 800380e:	3710      	adds	r7, #16
 8003810:	46bd      	mov	sp, r7
 8003812:	bd80      	pop	{r7, pc}

08003814 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b082      	sub	sp, #8
 8003818:	af00      	add	r7, sp, #0
 800381a:	4603      	mov	r3, r0
 800381c:	603a      	str	r2, [r7, #0]
 800381e:	71fb      	strb	r3, [r7, #7]
 8003820:	460b      	mov	r3, r1
 8003822:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    // DRESULT res = RES_ERROR;
    // return res;
    return SD_disk_ioctl(pdrv, cmd, buff);
 8003824:	79fb      	ldrb	r3, [r7, #7]
 8003826:	79b9      	ldrb	r1, [r7, #6]
 8003828:	683a      	ldr	r2, [r7, #0]
 800382a:	4618      	mov	r0, r3
 800382c:	f7fd fa0a 	bl	8000c44 <SD_disk_ioctl>
 8003830:	4603      	mov	r3, r0
 8003832:	b2db      	uxtb	r3, r3
  /* USER CODE END IOCTL */
}
 8003834:	4618      	mov	r0, r3
 8003836:	3708      	adds	r7, #8
 8003838:	46bd      	mov	sp, r7
 800383a:	bd80      	pop	{r7, pc}

0800383c <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800383c:	b480      	push	{r7}
 800383e:	b085      	sub	sp, #20
 8003840:	af00      	add	r7, sp, #0
 8003842:	4603      	mov	r3, r0
 8003844:	6039      	str	r1, [r7, #0]
 8003846:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8003848:	88fb      	ldrh	r3, [r7, #6]
 800384a:	2b7f      	cmp	r3, #127	; 0x7f
 800384c:	d802      	bhi.n	8003854 <ff_convert+0x18>
		c = chr;
 800384e:	88fb      	ldrh	r3, [r7, #6]
 8003850:	81fb      	strh	r3, [r7, #14]
 8003852:	e025      	b.n	80038a0 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d00b      	beq.n	8003872 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800385a:	88fb      	ldrh	r3, [r7, #6]
 800385c:	2bff      	cmp	r3, #255	; 0xff
 800385e:	d805      	bhi.n	800386c <ff_convert+0x30>
 8003860:	88fb      	ldrh	r3, [r7, #6]
 8003862:	3b80      	subs	r3, #128	; 0x80
 8003864:	4a12      	ldr	r2, [pc, #72]	; (80038b0 <ff_convert+0x74>)
 8003866:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800386a:	e000      	b.n	800386e <ff_convert+0x32>
 800386c:	2300      	movs	r3, #0
 800386e:	81fb      	strh	r3, [r7, #14]
 8003870:	e016      	b.n	80038a0 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8003872:	2300      	movs	r3, #0
 8003874:	81fb      	strh	r3, [r7, #14]
 8003876:	e009      	b.n	800388c <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8003878:	89fb      	ldrh	r3, [r7, #14]
 800387a:	4a0d      	ldr	r2, [pc, #52]	; (80038b0 <ff_convert+0x74>)
 800387c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003880:	88fa      	ldrh	r2, [r7, #6]
 8003882:	429a      	cmp	r2, r3
 8003884:	d006      	beq.n	8003894 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8003886:	89fb      	ldrh	r3, [r7, #14]
 8003888:	3301      	adds	r3, #1
 800388a:	81fb      	strh	r3, [r7, #14]
 800388c:	89fb      	ldrh	r3, [r7, #14]
 800388e:	2b7f      	cmp	r3, #127	; 0x7f
 8003890:	d9f2      	bls.n	8003878 <ff_convert+0x3c>
 8003892:	e000      	b.n	8003896 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8003894:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8003896:	89fb      	ldrh	r3, [r7, #14]
 8003898:	3380      	adds	r3, #128	; 0x80
 800389a:	b29b      	uxth	r3, r3
 800389c:	b2db      	uxtb	r3, r3
 800389e:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 80038a0:	89fb      	ldrh	r3, [r7, #14]
}
 80038a2:	4618      	mov	r0, r3
 80038a4:	3714      	adds	r7, #20
 80038a6:	46bd      	mov	sp, r7
 80038a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ac:	4770      	bx	lr
 80038ae:	bf00      	nop
 80038b0:	08005ef0 	.word	0x08005ef0

080038b4 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 80038b4:	b480      	push	{r7}
 80038b6:	b087      	sub	sp, #28
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	4603      	mov	r3, r0
 80038bc:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 80038be:	88fb      	ldrh	r3, [r7, #6]
 80038c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038c4:	d201      	bcs.n	80038ca <ff_wtoupper+0x16>
 80038c6:	4b3e      	ldr	r3, [pc, #248]	; (80039c0 <ff_wtoupper+0x10c>)
 80038c8:	e000      	b.n	80038cc <ff_wtoupper+0x18>
 80038ca:	4b3e      	ldr	r3, [pc, #248]	; (80039c4 <ff_wtoupper+0x110>)
 80038cc:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 80038ce:	697b      	ldr	r3, [r7, #20]
 80038d0:	1c9a      	adds	r2, r3, #2
 80038d2:	617a      	str	r2, [r7, #20]
 80038d4:	881b      	ldrh	r3, [r3, #0]
 80038d6:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 80038d8:	8a7b      	ldrh	r3, [r7, #18]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d068      	beq.n	80039b0 <ff_wtoupper+0xfc>
 80038de:	88fa      	ldrh	r2, [r7, #6]
 80038e0:	8a7b      	ldrh	r3, [r7, #18]
 80038e2:	429a      	cmp	r2, r3
 80038e4:	d364      	bcc.n	80039b0 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 80038e6:	697b      	ldr	r3, [r7, #20]
 80038e8:	1c9a      	adds	r2, r3, #2
 80038ea:	617a      	str	r2, [r7, #20]
 80038ec:	881b      	ldrh	r3, [r3, #0]
 80038ee:	823b      	strh	r3, [r7, #16]
 80038f0:	8a3b      	ldrh	r3, [r7, #16]
 80038f2:	0a1b      	lsrs	r3, r3, #8
 80038f4:	81fb      	strh	r3, [r7, #14]
 80038f6:	8a3b      	ldrh	r3, [r7, #16]
 80038f8:	b2db      	uxtb	r3, r3
 80038fa:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 80038fc:	88fa      	ldrh	r2, [r7, #6]
 80038fe:	8a79      	ldrh	r1, [r7, #18]
 8003900:	8a3b      	ldrh	r3, [r7, #16]
 8003902:	440b      	add	r3, r1
 8003904:	429a      	cmp	r2, r3
 8003906:	da49      	bge.n	800399c <ff_wtoupper+0xe8>
			switch (cmd) {
 8003908:	89fb      	ldrh	r3, [r7, #14]
 800390a:	2b08      	cmp	r3, #8
 800390c:	d84f      	bhi.n	80039ae <ff_wtoupper+0xfa>
 800390e:	a201      	add	r2, pc, #4	; (adr r2, 8003914 <ff_wtoupper+0x60>)
 8003910:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003914:	08003939 	.word	0x08003939
 8003918:	0800394b 	.word	0x0800394b
 800391c:	08003961 	.word	0x08003961
 8003920:	08003969 	.word	0x08003969
 8003924:	08003971 	.word	0x08003971
 8003928:	08003979 	.word	0x08003979
 800392c:	08003981 	.word	0x08003981
 8003930:	08003989 	.word	0x08003989
 8003934:	08003991 	.word	0x08003991
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8003938:	88fa      	ldrh	r2, [r7, #6]
 800393a:	8a7b      	ldrh	r3, [r7, #18]
 800393c:	1ad3      	subs	r3, r2, r3
 800393e:	005b      	lsls	r3, r3, #1
 8003940:	697a      	ldr	r2, [r7, #20]
 8003942:	4413      	add	r3, r2
 8003944:	881b      	ldrh	r3, [r3, #0]
 8003946:	80fb      	strh	r3, [r7, #6]
 8003948:	e027      	b.n	800399a <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800394a:	88fa      	ldrh	r2, [r7, #6]
 800394c:	8a7b      	ldrh	r3, [r7, #18]
 800394e:	1ad3      	subs	r3, r2, r3
 8003950:	b29b      	uxth	r3, r3
 8003952:	f003 0301 	and.w	r3, r3, #1
 8003956:	b29b      	uxth	r3, r3
 8003958:	88fa      	ldrh	r2, [r7, #6]
 800395a:	1ad3      	subs	r3, r2, r3
 800395c:	80fb      	strh	r3, [r7, #6]
 800395e:	e01c      	b.n	800399a <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8003960:	88fb      	ldrh	r3, [r7, #6]
 8003962:	3b10      	subs	r3, #16
 8003964:	80fb      	strh	r3, [r7, #6]
 8003966:	e018      	b.n	800399a <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8003968:	88fb      	ldrh	r3, [r7, #6]
 800396a:	3b20      	subs	r3, #32
 800396c:	80fb      	strh	r3, [r7, #6]
 800396e:	e014      	b.n	800399a <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8003970:	88fb      	ldrh	r3, [r7, #6]
 8003972:	3b30      	subs	r3, #48	; 0x30
 8003974:	80fb      	strh	r3, [r7, #6]
 8003976:	e010      	b.n	800399a <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8003978:	88fb      	ldrh	r3, [r7, #6]
 800397a:	3b1a      	subs	r3, #26
 800397c:	80fb      	strh	r3, [r7, #6]
 800397e:	e00c      	b.n	800399a <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8003980:	88fb      	ldrh	r3, [r7, #6]
 8003982:	3308      	adds	r3, #8
 8003984:	80fb      	strh	r3, [r7, #6]
 8003986:	e008      	b.n	800399a <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8003988:	88fb      	ldrh	r3, [r7, #6]
 800398a:	3b50      	subs	r3, #80	; 0x50
 800398c:	80fb      	strh	r3, [r7, #6]
 800398e:	e004      	b.n	800399a <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8003990:	88fb      	ldrh	r3, [r7, #6]
 8003992:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 8003996:	80fb      	strh	r3, [r7, #6]
 8003998:	bf00      	nop
			}
			break;
 800399a:	e008      	b.n	80039ae <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800399c:	89fb      	ldrh	r3, [r7, #14]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d195      	bne.n	80038ce <ff_wtoupper+0x1a>
 80039a2:	8a3b      	ldrh	r3, [r7, #16]
 80039a4:	005b      	lsls	r3, r3, #1
 80039a6:	697a      	ldr	r2, [r7, #20]
 80039a8:	4413      	add	r3, r2
 80039aa:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 80039ac:	e78f      	b.n	80038ce <ff_wtoupper+0x1a>
			break;
 80039ae:	bf00      	nop
	}

	return chr;
 80039b0:	88fb      	ldrh	r3, [r7, #6]
}
 80039b2:	4618      	mov	r0, r3
 80039b4:	371c      	adds	r7, #28
 80039b6:	46bd      	mov	sp, r7
 80039b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039bc:	4770      	bx	lr
 80039be:	bf00      	nop
 80039c0:	08005ff0 	.word	0x08005ff0
 80039c4:	080061e4 	.word	0x080061e4

080039c8 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b084      	sub	sp, #16
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	4603      	mov	r3, r0
 80039d0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80039d2:	79fb      	ldrb	r3, [r7, #7]
 80039d4:	4a08      	ldr	r2, [pc, #32]	; (80039f8 <disk_status+0x30>)
 80039d6:	009b      	lsls	r3, r3, #2
 80039d8:	4413      	add	r3, r2
 80039da:	685b      	ldr	r3, [r3, #4]
 80039dc:	685b      	ldr	r3, [r3, #4]
 80039de:	79fa      	ldrb	r2, [r7, #7]
 80039e0:	4905      	ldr	r1, [pc, #20]	; (80039f8 <disk_status+0x30>)
 80039e2:	440a      	add	r2, r1
 80039e4:	7a12      	ldrb	r2, [r2, #8]
 80039e6:	4610      	mov	r0, r2
 80039e8:	4798      	blx	r3
 80039ea:	4603      	mov	r3, r0
 80039ec:	73fb      	strb	r3, [r7, #15]
  return stat;
 80039ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80039f0:	4618      	mov	r0, r3
 80039f2:	3710      	adds	r7, #16
 80039f4:	46bd      	mov	sp, r7
 80039f6:	bd80      	pop	{r7, pc}
 80039f8:	20001354 	.word	0x20001354

080039fc <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b084      	sub	sp, #16
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	4603      	mov	r3, r0
 8003a04:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8003a06:	2300      	movs	r3, #0
 8003a08:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8003a0a:	79fb      	ldrb	r3, [r7, #7]
 8003a0c:	4a0d      	ldr	r2, [pc, #52]	; (8003a44 <disk_initialize+0x48>)
 8003a0e:	5cd3      	ldrb	r3, [r2, r3]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d111      	bne.n	8003a38 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8003a14:	79fb      	ldrb	r3, [r7, #7]
 8003a16:	4a0b      	ldr	r2, [pc, #44]	; (8003a44 <disk_initialize+0x48>)
 8003a18:	2101      	movs	r1, #1
 8003a1a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8003a1c:	79fb      	ldrb	r3, [r7, #7]
 8003a1e:	4a09      	ldr	r2, [pc, #36]	; (8003a44 <disk_initialize+0x48>)
 8003a20:	009b      	lsls	r3, r3, #2
 8003a22:	4413      	add	r3, r2
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	79fa      	ldrb	r2, [r7, #7]
 8003a2a:	4906      	ldr	r1, [pc, #24]	; (8003a44 <disk_initialize+0x48>)
 8003a2c:	440a      	add	r2, r1
 8003a2e:	7a12      	ldrb	r2, [r2, #8]
 8003a30:	4610      	mov	r0, r2
 8003a32:	4798      	blx	r3
 8003a34:	4603      	mov	r3, r0
 8003a36:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8003a38:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	3710      	adds	r7, #16
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bd80      	pop	{r7, pc}
 8003a42:	bf00      	nop
 8003a44:	20001354 	.word	0x20001354

08003a48 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8003a48:	b590      	push	{r4, r7, lr}
 8003a4a:	b087      	sub	sp, #28
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	60b9      	str	r1, [r7, #8]
 8003a50:	607a      	str	r2, [r7, #4]
 8003a52:	603b      	str	r3, [r7, #0]
 8003a54:	4603      	mov	r3, r0
 8003a56:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8003a58:	7bfb      	ldrb	r3, [r7, #15]
 8003a5a:	4a0a      	ldr	r2, [pc, #40]	; (8003a84 <disk_read+0x3c>)
 8003a5c:	009b      	lsls	r3, r3, #2
 8003a5e:	4413      	add	r3, r2
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	689c      	ldr	r4, [r3, #8]
 8003a64:	7bfb      	ldrb	r3, [r7, #15]
 8003a66:	4a07      	ldr	r2, [pc, #28]	; (8003a84 <disk_read+0x3c>)
 8003a68:	4413      	add	r3, r2
 8003a6a:	7a18      	ldrb	r0, [r3, #8]
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	687a      	ldr	r2, [r7, #4]
 8003a70:	68b9      	ldr	r1, [r7, #8]
 8003a72:	47a0      	blx	r4
 8003a74:	4603      	mov	r3, r0
 8003a76:	75fb      	strb	r3, [r7, #23]
  return res;
 8003a78:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	371c      	adds	r7, #28
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	bd90      	pop	{r4, r7, pc}
 8003a82:	bf00      	nop
 8003a84:	20001354 	.word	0x20001354

08003a88 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8003a88:	b590      	push	{r4, r7, lr}
 8003a8a:	b087      	sub	sp, #28
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	60b9      	str	r1, [r7, #8]
 8003a90:	607a      	str	r2, [r7, #4]
 8003a92:	603b      	str	r3, [r7, #0]
 8003a94:	4603      	mov	r3, r0
 8003a96:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8003a98:	7bfb      	ldrb	r3, [r7, #15]
 8003a9a:	4a0a      	ldr	r2, [pc, #40]	; (8003ac4 <disk_write+0x3c>)
 8003a9c:	009b      	lsls	r3, r3, #2
 8003a9e:	4413      	add	r3, r2
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	68dc      	ldr	r4, [r3, #12]
 8003aa4:	7bfb      	ldrb	r3, [r7, #15]
 8003aa6:	4a07      	ldr	r2, [pc, #28]	; (8003ac4 <disk_write+0x3c>)
 8003aa8:	4413      	add	r3, r2
 8003aaa:	7a18      	ldrb	r0, [r3, #8]
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	687a      	ldr	r2, [r7, #4]
 8003ab0:	68b9      	ldr	r1, [r7, #8]
 8003ab2:	47a0      	blx	r4
 8003ab4:	4603      	mov	r3, r0
 8003ab6:	75fb      	strb	r3, [r7, #23]
  return res;
 8003ab8:	7dfb      	ldrb	r3, [r7, #23]
}
 8003aba:	4618      	mov	r0, r3
 8003abc:	371c      	adds	r7, #28
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	bd90      	pop	{r4, r7, pc}
 8003ac2:	bf00      	nop
 8003ac4:	20001354 	.word	0x20001354

08003ac8 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b084      	sub	sp, #16
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	4603      	mov	r3, r0
 8003ad0:	603a      	str	r2, [r7, #0]
 8003ad2:	71fb      	strb	r3, [r7, #7]
 8003ad4:	460b      	mov	r3, r1
 8003ad6:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8003ad8:	79fb      	ldrb	r3, [r7, #7]
 8003ada:	4a09      	ldr	r2, [pc, #36]	; (8003b00 <disk_ioctl+0x38>)
 8003adc:	009b      	lsls	r3, r3, #2
 8003ade:	4413      	add	r3, r2
 8003ae0:	685b      	ldr	r3, [r3, #4]
 8003ae2:	691b      	ldr	r3, [r3, #16]
 8003ae4:	79fa      	ldrb	r2, [r7, #7]
 8003ae6:	4906      	ldr	r1, [pc, #24]	; (8003b00 <disk_ioctl+0x38>)
 8003ae8:	440a      	add	r2, r1
 8003aea:	7a10      	ldrb	r0, [r2, #8]
 8003aec:	79b9      	ldrb	r1, [r7, #6]
 8003aee:	683a      	ldr	r2, [r7, #0]
 8003af0:	4798      	blx	r3
 8003af2:	4603      	mov	r3, r0
 8003af4:	73fb      	strb	r3, [r7, #15]
  return res;
 8003af6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003af8:	4618      	mov	r0, r3
 8003afa:	3710      	adds	r7, #16
 8003afc:	46bd      	mov	sp, r7
 8003afe:	bd80      	pop	{r7, pc}
 8003b00:	20001354 	.word	0x20001354

08003b04 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8003b04:	b480      	push	{r7}
 8003b06:	b085      	sub	sp, #20
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	3301      	adds	r3, #1
 8003b10:	781b      	ldrb	r3, [r3, #0]
 8003b12:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8003b14:	89fb      	ldrh	r3, [r7, #14]
 8003b16:	021b      	lsls	r3, r3, #8
 8003b18:	b21a      	sxth	r2, r3
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	781b      	ldrb	r3, [r3, #0]
 8003b1e:	b21b      	sxth	r3, r3
 8003b20:	4313      	orrs	r3, r2
 8003b22:	b21b      	sxth	r3, r3
 8003b24:	81fb      	strh	r3, [r7, #14]
	return rv;
 8003b26:	89fb      	ldrh	r3, [r7, #14]
}
 8003b28:	4618      	mov	r0, r3
 8003b2a:	3714      	adds	r7, #20
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b32:	4770      	bx	lr

08003b34 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8003b34:	b480      	push	{r7}
 8003b36:	b085      	sub	sp, #20
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	3303      	adds	r3, #3
 8003b40:	781b      	ldrb	r3, [r3, #0]
 8003b42:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	021b      	lsls	r3, r3, #8
 8003b48:	687a      	ldr	r2, [r7, #4]
 8003b4a:	3202      	adds	r2, #2
 8003b4c:	7812      	ldrb	r2, [r2, #0]
 8003b4e:	4313      	orrs	r3, r2
 8003b50:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	021b      	lsls	r3, r3, #8
 8003b56:	687a      	ldr	r2, [r7, #4]
 8003b58:	3201      	adds	r2, #1
 8003b5a:	7812      	ldrb	r2, [r2, #0]
 8003b5c:	4313      	orrs	r3, r2
 8003b5e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	021b      	lsls	r3, r3, #8
 8003b64:	687a      	ldr	r2, [r7, #4]
 8003b66:	7812      	ldrb	r2, [r2, #0]
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	60fb      	str	r3, [r7, #12]
	return rv;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
}
 8003b6e:	4618      	mov	r0, r3
 8003b70:	3714      	adds	r7, #20
 8003b72:	46bd      	mov	sp, r7
 8003b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b78:	4770      	bx	lr

08003b7a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8003b7a:	b480      	push	{r7}
 8003b7c:	b083      	sub	sp, #12
 8003b7e:	af00      	add	r7, sp, #0
 8003b80:	6078      	str	r0, [r7, #4]
 8003b82:	460b      	mov	r3, r1
 8003b84:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	1c5a      	adds	r2, r3, #1
 8003b8a:	607a      	str	r2, [r7, #4]
 8003b8c:	887a      	ldrh	r2, [r7, #2]
 8003b8e:	b2d2      	uxtb	r2, r2
 8003b90:	701a      	strb	r2, [r3, #0]
 8003b92:	887b      	ldrh	r3, [r7, #2]
 8003b94:	0a1b      	lsrs	r3, r3, #8
 8003b96:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	1c5a      	adds	r2, r3, #1
 8003b9c:	607a      	str	r2, [r7, #4]
 8003b9e:	887a      	ldrh	r2, [r7, #2]
 8003ba0:	b2d2      	uxtb	r2, r2
 8003ba2:	701a      	strb	r2, [r3, #0]
}
 8003ba4:	bf00      	nop
 8003ba6:	370c      	adds	r7, #12
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bae:	4770      	bx	lr

08003bb0 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8003bb0:	b480      	push	{r7}
 8003bb2:	b083      	sub	sp, #12
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
 8003bb8:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	1c5a      	adds	r2, r3, #1
 8003bbe:	607a      	str	r2, [r7, #4]
 8003bc0:	683a      	ldr	r2, [r7, #0]
 8003bc2:	b2d2      	uxtb	r2, r2
 8003bc4:	701a      	strb	r2, [r3, #0]
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	0a1b      	lsrs	r3, r3, #8
 8003bca:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	1c5a      	adds	r2, r3, #1
 8003bd0:	607a      	str	r2, [r7, #4]
 8003bd2:	683a      	ldr	r2, [r7, #0]
 8003bd4:	b2d2      	uxtb	r2, r2
 8003bd6:	701a      	strb	r2, [r3, #0]
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	0a1b      	lsrs	r3, r3, #8
 8003bdc:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	1c5a      	adds	r2, r3, #1
 8003be2:	607a      	str	r2, [r7, #4]
 8003be4:	683a      	ldr	r2, [r7, #0]
 8003be6:	b2d2      	uxtb	r2, r2
 8003be8:	701a      	strb	r2, [r3, #0]
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	0a1b      	lsrs	r3, r3, #8
 8003bee:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	1c5a      	adds	r2, r3, #1
 8003bf4:	607a      	str	r2, [r7, #4]
 8003bf6:	683a      	ldr	r2, [r7, #0]
 8003bf8:	b2d2      	uxtb	r2, r2
 8003bfa:	701a      	strb	r2, [r3, #0]
}
 8003bfc:	bf00      	nop
 8003bfe:	370c      	adds	r7, #12
 8003c00:	46bd      	mov	sp, r7
 8003c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c06:	4770      	bx	lr

08003c08 <mem_set>:
	}
}

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8003c08:	b480      	push	{r7}
 8003c0a:	b087      	sub	sp, #28
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	60f8      	str	r0, [r7, #12]
 8003c10:	60b9      	str	r1, [r7, #8]
 8003c12:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8003c18:	697b      	ldr	r3, [r7, #20]
 8003c1a:	1c5a      	adds	r2, r3, #1
 8003c1c:	617a      	str	r2, [r7, #20]
 8003c1e:	68ba      	ldr	r2, [r7, #8]
 8003c20:	b2d2      	uxtb	r2, r2
 8003c22:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	3b01      	subs	r3, #1
 8003c28:	607b      	str	r3, [r7, #4]
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d1f3      	bne.n	8003c18 <mem_set+0x10>
}
 8003c30:	bf00      	nop
 8003c32:	bf00      	nop
 8003c34:	371c      	adds	r7, #28
 8003c36:	46bd      	mov	sp, r7
 8003c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3c:	4770      	bx	lr

08003c3e <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8003c3e:	b480      	push	{r7}
 8003c40:	b089      	sub	sp, #36	; 0x24
 8003c42:	af00      	add	r7, sp, #0
 8003c44:	60f8      	str	r0, [r7, #12]
 8003c46:	60b9      	str	r1, [r7, #8]
 8003c48:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	61fb      	str	r3, [r7, #28]
 8003c4e:	68bb      	ldr	r3, [r7, #8]
 8003c50:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8003c52:	2300      	movs	r3, #0
 8003c54:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8003c56:	69fb      	ldr	r3, [r7, #28]
 8003c58:	1c5a      	adds	r2, r3, #1
 8003c5a:	61fa      	str	r2, [r7, #28]
 8003c5c:	781b      	ldrb	r3, [r3, #0]
 8003c5e:	4619      	mov	r1, r3
 8003c60:	69bb      	ldr	r3, [r7, #24]
 8003c62:	1c5a      	adds	r2, r3, #1
 8003c64:	61ba      	str	r2, [r7, #24]
 8003c66:	781b      	ldrb	r3, [r3, #0]
 8003c68:	1acb      	subs	r3, r1, r3
 8003c6a:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	3b01      	subs	r3, #1
 8003c70:	607b      	str	r3, [r7, #4]
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d002      	beq.n	8003c7e <mem_cmp+0x40>
 8003c78:	697b      	ldr	r3, [r7, #20]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d0eb      	beq.n	8003c56 <mem_cmp+0x18>

	return r;
 8003c7e:	697b      	ldr	r3, [r7, #20]
}
 8003c80:	4618      	mov	r0, r3
 8003c82:	3724      	adds	r7, #36	; 0x24
 8003c84:	46bd      	mov	sp, r7
 8003c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8a:	4770      	bx	lr

08003c8c <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8003c8c:	b480      	push	{r7}
 8003c8e:	b083      	sub	sp, #12
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
 8003c94:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8003c96:	e002      	b.n	8003c9e <chk_chr+0x12>
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	3301      	adds	r3, #1
 8003c9c:	607b      	str	r3, [r7, #4]
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	781b      	ldrb	r3, [r3, #0]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d005      	beq.n	8003cb2 <chk_chr+0x26>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	781b      	ldrb	r3, [r3, #0]
 8003caa:	461a      	mov	r2, r3
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d1f2      	bne.n	8003c98 <chk_chr+0xc>
	return *str;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	781b      	ldrb	r3, [r3, #0]
}
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	370c      	adds	r7, #12
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc0:	4770      	bx	lr
	...

08003cc4 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8003cc4:	b480      	push	{r7}
 8003cc6:	b085      	sub	sp, #20
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
 8003ccc:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8003cce:	2300      	movs	r3, #0
 8003cd0:	60fb      	str	r3, [r7, #12]
 8003cd2:	e01f      	b.n	8003d14 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8003cd4:	4a41      	ldr	r2, [pc, #260]	; (8003ddc <inc_lock+0x118>)
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	011b      	lsls	r3, r3, #4
 8003cda:	4413      	add	r3, r2
 8003cdc:	681a      	ldr	r2, [r3, #0]
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	429a      	cmp	r2, r3
 8003ce4:	d113      	bne.n	8003d0e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8003ce6:	4a3d      	ldr	r2, [pc, #244]	; (8003ddc <inc_lock+0x118>)
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	011b      	lsls	r3, r3, #4
 8003cec:	4413      	add	r3, r2
 8003cee:	3304      	adds	r3, #4
 8003cf0:	681a      	ldr	r2, [r3, #0]
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8003cf6:	429a      	cmp	r2, r3
 8003cf8:	d109      	bne.n	8003d0e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8003cfa:	4a38      	ldr	r2, [pc, #224]	; (8003ddc <inc_lock+0x118>)
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	011b      	lsls	r3, r3, #4
 8003d00:	4413      	add	r3, r2
 8003d02:	3308      	adds	r3, #8
 8003d04:	681a      	ldr	r2, [r3, #0]
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8003d0a:	429a      	cmp	r2, r3
 8003d0c:	d006      	beq.n	8003d1c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	3301      	adds	r3, #1
 8003d12:	60fb      	str	r3, [r7, #12]
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	2b01      	cmp	r3, #1
 8003d18:	d9dc      	bls.n	8003cd4 <inc_lock+0x10>
 8003d1a:	e000      	b.n	8003d1e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8003d1c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	2b02      	cmp	r3, #2
 8003d22:	d132      	bne.n	8003d8a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8003d24:	2300      	movs	r3, #0
 8003d26:	60fb      	str	r3, [r7, #12]
 8003d28:	e002      	b.n	8003d30 <inc_lock+0x6c>
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	3301      	adds	r3, #1
 8003d2e:	60fb      	str	r3, [r7, #12]
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	2b01      	cmp	r3, #1
 8003d34:	d806      	bhi.n	8003d44 <inc_lock+0x80>
 8003d36:	4a29      	ldr	r2, [pc, #164]	; (8003ddc <inc_lock+0x118>)
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	011b      	lsls	r3, r3, #4
 8003d3c:	4413      	add	r3, r2
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d1f2      	bne.n	8003d2a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	2b02      	cmp	r3, #2
 8003d48:	d101      	bne.n	8003d4e <inc_lock+0x8a>
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	e040      	b.n	8003dd0 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681a      	ldr	r2, [r3, #0]
 8003d52:	4922      	ldr	r1, [pc, #136]	; (8003ddc <inc_lock+0x118>)
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	011b      	lsls	r3, r3, #4
 8003d58:	440b      	add	r3, r1
 8003d5a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	689a      	ldr	r2, [r3, #8]
 8003d60:	491e      	ldr	r1, [pc, #120]	; (8003ddc <inc_lock+0x118>)
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	011b      	lsls	r3, r3, #4
 8003d66:	440b      	add	r3, r1
 8003d68:	3304      	adds	r3, #4
 8003d6a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	695a      	ldr	r2, [r3, #20]
 8003d70:	491a      	ldr	r1, [pc, #104]	; (8003ddc <inc_lock+0x118>)
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	011b      	lsls	r3, r3, #4
 8003d76:	440b      	add	r3, r1
 8003d78:	3308      	adds	r3, #8
 8003d7a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8003d7c:	4a17      	ldr	r2, [pc, #92]	; (8003ddc <inc_lock+0x118>)
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	011b      	lsls	r3, r3, #4
 8003d82:	4413      	add	r3, r2
 8003d84:	330c      	adds	r3, #12
 8003d86:	2200      	movs	r2, #0
 8003d88:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d009      	beq.n	8003da4 <inc_lock+0xe0>
 8003d90:	4a12      	ldr	r2, [pc, #72]	; (8003ddc <inc_lock+0x118>)
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	011b      	lsls	r3, r3, #4
 8003d96:	4413      	add	r3, r2
 8003d98:	330c      	adds	r3, #12
 8003d9a:	881b      	ldrh	r3, [r3, #0]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d001      	beq.n	8003da4 <inc_lock+0xe0>
 8003da0:	2300      	movs	r3, #0
 8003da2:	e015      	b.n	8003dd0 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d108      	bne.n	8003dbc <inc_lock+0xf8>
 8003daa:	4a0c      	ldr	r2, [pc, #48]	; (8003ddc <inc_lock+0x118>)
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	011b      	lsls	r3, r3, #4
 8003db0:	4413      	add	r3, r2
 8003db2:	330c      	adds	r3, #12
 8003db4:	881b      	ldrh	r3, [r3, #0]
 8003db6:	3301      	adds	r3, #1
 8003db8:	b29a      	uxth	r2, r3
 8003dba:	e001      	b.n	8003dc0 <inc_lock+0xfc>
 8003dbc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003dc0:	4906      	ldr	r1, [pc, #24]	; (8003ddc <inc_lock+0x118>)
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	011b      	lsls	r3, r3, #4
 8003dc6:	440b      	add	r3, r1
 8003dc8:	330c      	adds	r3, #12
 8003dca:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	3301      	adds	r3, #1
}
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	3714      	adds	r7, #20
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dda:	4770      	bx	lr
 8003ddc:	20001134 	.word	0x20001134

08003de0 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8003de0:	b480      	push	{r7}
 8003de2:	b085      	sub	sp, #20
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8003de8:	2300      	movs	r3, #0
 8003dea:	60fb      	str	r3, [r7, #12]
 8003dec:	e010      	b.n	8003e10 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8003dee:	4a0d      	ldr	r2, [pc, #52]	; (8003e24 <clear_lock+0x44>)
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	011b      	lsls	r3, r3, #4
 8003df4:	4413      	add	r3, r2
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	687a      	ldr	r2, [r7, #4]
 8003dfa:	429a      	cmp	r2, r3
 8003dfc:	d105      	bne.n	8003e0a <clear_lock+0x2a>
 8003dfe:	4a09      	ldr	r2, [pc, #36]	; (8003e24 <clear_lock+0x44>)
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	011b      	lsls	r3, r3, #4
 8003e04:	4413      	add	r3, r2
 8003e06:	2200      	movs	r2, #0
 8003e08:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	3301      	adds	r3, #1
 8003e0e:	60fb      	str	r3, [r7, #12]
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	2b01      	cmp	r3, #1
 8003e14:	d9eb      	bls.n	8003dee <clear_lock+0xe>
	}
}
 8003e16:	bf00      	nop
 8003e18:	bf00      	nop
 8003e1a:	3714      	adds	r7, #20
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e22:	4770      	bx	lr
 8003e24:	20001134 	.word	0x20001134

08003e28 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b086      	sub	sp, #24
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8003e30:	2300      	movs	r3, #0
 8003e32:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	78db      	ldrb	r3, [r3, #3]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d034      	beq.n	8003ea6 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e40:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	7858      	ldrb	r0, [r3, #1]
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8003e4c:	2301      	movs	r3, #1
 8003e4e:	697a      	ldr	r2, [r7, #20]
 8003e50:	f7ff fe1a 	bl	8003a88 <disk_write>
 8003e54:	4603      	mov	r3, r0
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d002      	beq.n	8003e60 <sync_window+0x38>
			res = FR_DISK_ERR;
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	73fb      	strb	r3, [r7, #15]
 8003e5e:	e022      	b.n	8003ea6 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2200      	movs	r2, #0
 8003e64:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e6a:	697a      	ldr	r2, [r7, #20]
 8003e6c:	1ad2      	subs	r2, r2, r3
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6a1b      	ldr	r3, [r3, #32]
 8003e72:	429a      	cmp	r2, r3
 8003e74:	d217      	bcs.n	8003ea6 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	789b      	ldrb	r3, [r3, #2]
 8003e7a:	613b      	str	r3, [r7, #16]
 8003e7c:	e010      	b.n	8003ea0 <sync_window+0x78>
					wsect += fs->fsize;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6a1b      	ldr	r3, [r3, #32]
 8003e82:	697a      	ldr	r2, [r7, #20]
 8003e84:	4413      	add	r3, r2
 8003e86:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	7858      	ldrb	r0, [r3, #1]
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8003e92:	2301      	movs	r3, #1
 8003e94:	697a      	ldr	r2, [r7, #20]
 8003e96:	f7ff fdf7 	bl	8003a88 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8003e9a:	693b      	ldr	r3, [r7, #16]
 8003e9c:	3b01      	subs	r3, #1
 8003e9e:	613b      	str	r3, [r7, #16]
 8003ea0:	693b      	ldr	r3, [r7, #16]
 8003ea2:	2b01      	cmp	r3, #1
 8003ea4:	d8eb      	bhi.n	8003e7e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8003ea6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	3718      	adds	r7, #24
 8003eac:	46bd      	mov	sp, r7
 8003eae:	bd80      	pop	{r7, pc}

08003eb0 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b084      	sub	sp, #16
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
 8003eb8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8003eba:	2300      	movs	r3, #0
 8003ebc:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ec2:	683a      	ldr	r2, [r7, #0]
 8003ec4:	429a      	cmp	r2, r3
 8003ec6:	d01b      	beq.n	8003f00 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8003ec8:	6878      	ldr	r0, [r7, #4]
 8003eca:	f7ff ffad 	bl	8003e28 <sync_window>
 8003ece:	4603      	mov	r3, r0
 8003ed0:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8003ed2:	7bfb      	ldrb	r3, [r7, #15]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d113      	bne.n	8003f00 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	7858      	ldrb	r0, [r3, #1]
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	683a      	ldr	r2, [r7, #0]
 8003ee6:	f7ff fdaf 	bl	8003a48 <disk_read>
 8003eea:	4603      	mov	r3, r0
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d004      	beq.n	8003efa <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8003ef0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003ef4:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8003ef6:	2301      	movs	r3, #1
 8003ef8:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	683a      	ldr	r2, [r7, #0]
 8003efe:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 8003f00:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f02:	4618      	mov	r0, r3
 8003f04:	3710      	adds	r7, #16
 8003f06:	46bd      	mov	sp, r7
 8003f08:	bd80      	pop	{r7, pc}

08003f0a <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8003f0a:	b480      	push	{r7}
 8003f0c:	b083      	sub	sp, #12
 8003f0e:	af00      	add	r7, sp, #0
 8003f10:	6078      	str	r0, [r7, #4]
 8003f12:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	3b02      	subs	r3, #2
 8003f18:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	69db      	ldr	r3, [r3, #28]
 8003f1e:	3b02      	subs	r3, #2
 8003f20:	683a      	ldr	r2, [r7, #0]
 8003f22:	429a      	cmp	r2, r3
 8003f24:	d301      	bcc.n	8003f2a <clust2sect+0x20>
 8003f26:	2300      	movs	r3, #0
 8003f28:	e008      	b.n	8003f3c <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	895b      	ldrh	r3, [r3, #10]
 8003f2e:	461a      	mov	r2, r3
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	fb03 f202 	mul.w	r2, r3, r2
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f3a:	4413      	add	r3, r2
}
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	370c      	adds	r7, #12
 8003f40:	46bd      	mov	sp, r7
 8003f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f46:	4770      	bx	lr

08003f48 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b086      	sub	sp, #24
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
 8003f50:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	2b01      	cmp	r3, #1
 8003f5c:	d904      	bls.n	8003f68 <get_fat+0x20>
 8003f5e:	693b      	ldr	r3, [r7, #16]
 8003f60:	69db      	ldr	r3, [r3, #28]
 8003f62:	683a      	ldr	r2, [r7, #0]
 8003f64:	429a      	cmp	r2, r3
 8003f66:	d302      	bcc.n	8003f6e <get_fat+0x26>
		val = 1;	/* Internal error */
 8003f68:	2301      	movs	r3, #1
 8003f6a:	617b      	str	r3, [r7, #20]
 8003f6c:	e0bb      	b.n	80040e6 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8003f6e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003f72:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8003f74:	693b      	ldr	r3, [r7, #16]
 8003f76:	781b      	ldrb	r3, [r3, #0]
 8003f78:	2b03      	cmp	r3, #3
 8003f7a:	f000 8083 	beq.w	8004084 <get_fat+0x13c>
 8003f7e:	2b03      	cmp	r3, #3
 8003f80:	f300 80a7 	bgt.w	80040d2 <get_fat+0x18a>
 8003f84:	2b01      	cmp	r3, #1
 8003f86:	d002      	beq.n	8003f8e <get_fat+0x46>
 8003f88:	2b02      	cmp	r3, #2
 8003f8a:	d056      	beq.n	800403a <get_fat+0xf2>
 8003f8c:	e0a1      	b.n	80040d2 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	60fb      	str	r3, [r7, #12]
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	085b      	lsrs	r3, r3, #1
 8003f96:	68fa      	ldr	r2, [r7, #12]
 8003f98:	4413      	add	r3, r2
 8003f9a:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003f9c:	693b      	ldr	r3, [r7, #16]
 8003f9e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003fa0:	693b      	ldr	r3, [r7, #16]
 8003fa2:	899b      	ldrh	r3, [r3, #12]
 8003fa4:	4619      	mov	r1, r3
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	fbb3 f3f1 	udiv	r3, r3, r1
 8003fac:	4413      	add	r3, r2
 8003fae:	4619      	mov	r1, r3
 8003fb0:	6938      	ldr	r0, [r7, #16]
 8003fb2:	f7ff ff7d 	bl	8003eb0 <move_window>
 8003fb6:	4603      	mov	r3, r0
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	f040 808d 	bne.w	80040d8 <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	1c5a      	adds	r2, r3, #1
 8003fc2:	60fa      	str	r2, [r7, #12]
 8003fc4:	693a      	ldr	r2, [r7, #16]
 8003fc6:	8992      	ldrh	r2, [r2, #12]
 8003fc8:	fbb3 f1f2 	udiv	r1, r3, r2
 8003fcc:	fb01 f202 	mul.w	r2, r1, r2
 8003fd0:	1a9b      	subs	r3, r3, r2
 8003fd2:	693a      	ldr	r2, [r7, #16]
 8003fd4:	4413      	add	r3, r2
 8003fd6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003fda:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003fdc:	693b      	ldr	r3, [r7, #16]
 8003fde:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003fe0:	693b      	ldr	r3, [r7, #16]
 8003fe2:	899b      	ldrh	r3, [r3, #12]
 8003fe4:	4619      	mov	r1, r3
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	fbb3 f3f1 	udiv	r3, r3, r1
 8003fec:	4413      	add	r3, r2
 8003fee:	4619      	mov	r1, r3
 8003ff0:	6938      	ldr	r0, [r7, #16]
 8003ff2:	f7ff ff5d 	bl	8003eb0 <move_window>
 8003ff6:	4603      	mov	r3, r0
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d16f      	bne.n	80040dc <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 8003ffc:	693b      	ldr	r3, [r7, #16]
 8003ffe:	899b      	ldrh	r3, [r3, #12]
 8004000:	461a      	mov	r2, r3
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	fbb3 f1f2 	udiv	r1, r3, r2
 8004008:	fb01 f202 	mul.w	r2, r1, r2
 800400c:	1a9b      	subs	r3, r3, r2
 800400e:	693a      	ldr	r2, [r7, #16]
 8004010:	4413      	add	r3, r2
 8004012:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004016:	021b      	lsls	r3, r3, #8
 8004018:	461a      	mov	r2, r3
 800401a:	68bb      	ldr	r3, [r7, #8]
 800401c:	4313      	orrs	r3, r2
 800401e:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	f003 0301 	and.w	r3, r3, #1
 8004026:	2b00      	cmp	r3, #0
 8004028:	d002      	beq.n	8004030 <get_fat+0xe8>
 800402a:	68bb      	ldr	r3, [r7, #8]
 800402c:	091b      	lsrs	r3, r3, #4
 800402e:	e002      	b.n	8004036 <get_fat+0xee>
 8004030:	68bb      	ldr	r3, [r7, #8]
 8004032:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004036:	617b      	str	r3, [r7, #20]
			break;
 8004038:	e055      	b.n	80040e6 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800403a:	693b      	ldr	r3, [r7, #16]
 800403c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800403e:	693b      	ldr	r3, [r7, #16]
 8004040:	899b      	ldrh	r3, [r3, #12]
 8004042:	085b      	lsrs	r3, r3, #1
 8004044:	b29b      	uxth	r3, r3
 8004046:	4619      	mov	r1, r3
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	fbb3 f3f1 	udiv	r3, r3, r1
 800404e:	4413      	add	r3, r2
 8004050:	4619      	mov	r1, r3
 8004052:	6938      	ldr	r0, [r7, #16]
 8004054:	f7ff ff2c 	bl	8003eb0 <move_window>
 8004058:	4603      	mov	r3, r0
 800405a:	2b00      	cmp	r3, #0
 800405c:	d140      	bne.n	80040e0 <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800405e:	693b      	ldr	r3, [r7, #16]
 8004060:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	005b      	lsls	r3, r3, #1
 8004068:	693a      	ldr	r2, [r7, #16]
 800406a:	8992      	ldrh	r2, [r2, #12]
 800406c:	fbb3 f0f2 	udiv	r0, r3, r2
 8004070:	fb00 f202 	mul.w	r2, r0, r2
 8004074:	1a9b      	subs	r3, r3, r2
 8004076:	440b      	add	r3, r1
 8004078:	4618      	mov	r0, r3
 800407a:	f7ff fd43 	bl	8003b04 <ld_word>
 800407e:	4603      	mov	r3, r0
 8004080:	617b      	str	r3, [r7, #20]
			break;
 8004082:	e030      	b.n	80040e6 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8004084:	693b      	ldr	r3, [r7, #16]
 8004086:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004088:	693b      	ldr	r3, [r7, #16]
 800408a:	899b      	ldrh	r3, [r3, #12]
 800408c:	089b      	lsrs	r3, r3, #2
 800408e:	b29b      	uxth	r3, r3
 8004090:	4619      	mov	r1, r3
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	fbb3 f3f1 	udiv	r3, r3, r1
 8004098:	4413      	add	r3, r2
 800409a:	4619      	mov	r1, r3
 800409c:	6938      	ldr	r0, [r7, #16]
 800409e:	f7ff ff07 	bl	8003eb0 <move_window>
 80040a2:	4603      	mov	r3, r0
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d11d      	bne.n	80040e4 <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80040a8:	693b      	ldr	r3, [r7, #16]
 80040aa:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	009b      	lsls	r3, r3, #2
 80040b2:	693a      	ldr	r2, [r7, #16]
 80040b4:	8992      	ldrh	r2, [r2, #12]
 80040b6:	fbb3 f0f2 	udiv	r0, r3, r2
 80040ba:	fb00 f202 	mul.w	r2, r0, r2
 80040be:	1a9b      	subs	r3, r3, r2
 80040c0:	440b      	add	r3, r1
 80040c2:	4618      	mov	r0, r3
 80040c4:	f7ff fd36 	bl	8003b34 <ld_dword>
 80040c8:	4603      	mov	r3, r0
 80040ca:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80040ce:	617b      	str	r3, [r7, #20]
			break;
 80040d0:	e009      	b.n	80040e6 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80040d2:	2301      	movs	r3, #1
 80040d4:	617b      	str	r3, [r7, #20]
 80040d6:	e006      	b.n	80040e6 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80040d8:	bf00      	nop
 80040da:	e004      	b.n	80040e6 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80040dc:	bf00      	nop
 80040de:	e002      	b.n	80040e6 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80040e0:	bf00      	nop
 80040e2:	e000      	b.n	80040e6 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80040e4:	bf00      	nop
		}
	}

	return val;
 80040e6:	697b      	ldr	r3, [r7, #20]
}
 80040e8:	4618      	mov	r0, r3
 80040ea:	3718      	adds	r7, #24
 80040ec:	46bd      	mov	sp, r7
 80040ee:	bd80      	pop	{r7, pc}

080040f0 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80040f0:	b590      	push	{r4, r7, lr}
 80040f2:	b089      	sub	sp, #36	; 0x24
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	60f8      	str	r0, [r7, #12]
 80040f8:	60b9      	str	r1, [r7, #8]
 80040fa:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80040fc:	2302      	movs	r3, #2
 80040fe:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8004100:	68bb      	ldr	r3, [r7, #8]
 8004102:	2b01      	cmp	r3, #1
 8004104:	f240 8102 	bls.w	800430c <put_fat+0x21c>
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	69db      	ldr	r3, [r3, #28]
 800410c:	68ba      	ldr	r2, [r7, #8]
 800410e:	429a      	cmp	r2, r3
 8004110:	f080 80fc 	bcs.w	800430c <put_fat+0x21c>
		switch (fs->fs_type) {
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	781b      	ldrb	r3, [r3, #0]
 8004118:	2b03      	cmp	r3, #3
 800411a:	f000 80b6 	beq.w	800428a <put_fat+0x19a>
 800411e:	2b03      	cmp	r3, #3
 8004120:	f300 80fd 	bgt.w	800431e <put_fat+0x22e>
 8004124:	2b01      	cmp	r3, #1
 8004126:	d003      	beq.n	8004130 <put_fat+0x40>
 8004128:	2b02      	cmp	r3, #2
 800412a:	f000 8083 	beq.w	8004234 <put_fat+0x144>
 800412e:	e0f6      	b.n	800431e <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8004130:	68bb      	ldr	r3, [r7, #8]
 8004132:	61bb      	str	r3, [r7, #24]
 8004134:	69bb      	ldr	r3, [r7, #24]
 8004136:	085b      	lsrs	r3, r3, #1
 8004138:	69ba      	ldr	r2, [r7, #24]
 800413a:	4413      	add	r3, r2
 800413c:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	899b      	ldrh	r3, [r3, #12]
 8004146:	4619      	mov	r1, r3
 8004148:	69bb      	ldr	r3, [r7, #24]
 800414a:	fbb3 f3f1 	udiv	r3, r3, r1
 800414e:	4413      	add	r3, r2
 8004150:	4619      	mov	r1, r3
 8004152:	68f8      	ldr	r0, [r7, #12]
 8004154:	f7ff feac 	bl	8003eb0 <move_window>
 8004158:	4603      	mov	r3, r0
 800415a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800415c:	7ffb      	ldrb	r3, [r7, #31]
 800415e:	2b00      	cmp	r3, #0
 8004160:	f040 80d6 	bne.w	8004310 <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800416a:	69bb      	ldr	r3, [r7, #24]
 800416c:	1c5a      	adds	r2, r3, #1
 800416e:	61ba      	str	r2, [r7, #24]
 8004170:	68fa      	ldr	r2, [r7, #12]
 8004172:	8992      	ldrh	r2, [r2, #12]
 8004174:	fbb3 f0f2 	udiv	r0, r3, r2
 8004178:	fb00 f202 	mul.w	r2, r0, r2
 800417c:	1a9b      	subs	r3, r3, r2
 800417e:	440b      	add	r3, r1
 8004180:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8004182:	68bb      	ldr	r3, [r7, #8]
 8004184:	f003 0301 	and.w	r3, r3, #1
 8004188:	2b00      	cmp	r3, #0
 800418a:	d00d      	beq.n	80041a8 <put_fat+0xb8>
 800418c:	697b      	ldr	r3, [r7, #20]
 800418e:	781b      	ldrb	r3, [r3, #0]
 8004190:	b25b      	sxtb	r3, r3
 8004192:	f003 030f 	and.w	r3, r3, #15
 8004196:	b25a      	sxtb	r2, r3
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	b2db      	uxtb	r3, r3
 800419c:	011b      	lsls	r3, r3, #4
 800419e:	b25b      	sxtb	r3, r3
 80041a0:	4313      	orrs	r3, r2
 80041a2:	b25b      	sxtb	r3, r3
 80041a4:	b2db      	uxtb	r3, r3
 80041a6:	e001      	b.n	80041ac <put_fat+0xbc>
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	b2db      	uxtb	r3, r3
 80041ac:	697a      	ldr	r2, [r7, #20]
 80041ae:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	2201      	movs	r2, #1
 80041b4:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	899b      	ldrh	r3, [r3, #12]
 80041be:	4619      	mov	r1, r3
 80041c0:	69bb      	ldr	r3, [r7, #24]
 80041c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80041c6:	4413      	add	r3, r2
 80041c8:	4619      	mov	r1, r3
 80041ca:	68f8      	ldr	r0, [r7, #12]
 80041cc:	f7ff fe70 	bl	8003eb0 <move_window>
 80041d0:	4603      	mov	r3, r0
 80041d2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80041d4:	7ffb      	ldrb	r3, [r7, #31]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	f040 809c 	bne.w	8004314 <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	899b      	ldrh	r3, [r3, #12]
 80041e6:	461a      	mov	r2, r3
 80041e8:	69bb      	ldr	r3, [r7, #24]
 80041ea:	fbb3 f0f2 	udiv	r0, r3, r2
 80041ee:	fb00 f202 	mul.w	r2, r0, r2
 80041f2:	1a9b      	subs	r3, r3, r2
 80041f4:	440b      	add	r3, r1
 80041f6:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80041f8:	68bb      	ldr	r3, [r7, #8]
 80041fa:	f003 0301 	and.w	r3, r3, #1
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d003      	beq.n	800420a <put_fat+0x11a>
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	091b      	lsrs	r3, r3, #4
 8004206:	b2db      	uxtb	r3, r3
 8004208:	e00e      	b.n	8004228 <put_fat+0x138>
 800420a:	697b      	ldr	r3, [r7, #20]
 800420c:	781b      	ldrb	r3, [r3, #0]
 800420e:	b25b      	sxtb	r3, r3
 8004210:	f023 030f 	bic.w	r3, r3, #15
 8004214:	b25a      	sxtb	r2, r3
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	0a1b      	lsrs	r3, r3, #8
 800421a:	b25b      	sxtb	r3, r3
 800421c:	f003 030f 	and.w	r3, r3, #15
 8004220:	b25b      	sxtb	r3, r3
 8004222:	4313      	orrs	r3, r2
 8004224:	b25b      	sxtb	r3, r3
 8004226:	b2db      	uxtb	r3, r3
 8004228:	697a      	ldr	r2, [r7, #20]
 800422a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	2201      	movs	r2, #1
 8004230:	70da      	strb	r2, [r3, #3]
			break;
 8004232:	e074      	b.n	800431e <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	899b      	ldrh	r3, [r3, #12]
 800423c:	085b      	lsrs	r3, r3, #1
 800423e:	b29b      	uxth	r3, r3
 8004240:	4619      	mov	r1, r3
 8004242:	68bb      	ldr	r3, [r7, #8]
 8004244:	fbb3 f3f1 	udiv	r3, r3, r1
 8004248:	4413      	add	r3, r2
 800424a:	4619      	mov	r1, r3
 800424c:	68f8      	ldr	r0, [r7, #12]
 800424e:	f7ff fe2f 	bl	8003eb0 <move_window>
 8004252:	4603      	mov	r3, r0
 8004254:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004256:	7ffb      	ldrb	r3, [r7, #31]
 8004258:	2b00      	cmp	r3, #0
 800425a:	d15d      	bne.n	8004318 <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8004262:	68bb      	ldr	r3, [r7, #8]
 8004264:	005b      	lsls	r3, r3, #1
 8004266:	68fa      	ldr	r2, [r7, #12]
 8004268:	8992      	ldrh	r2, [r2, #12]
 800426a:	fbb3 f0f2 	udiv	r0, r3, r2
 800426e:	fb00 f202 	mul.w	r2, r0, r2
 8004272:	1a9b      	subs	r3, r3, r2
 8004274:	440b      	add	r3, r1
 8004276:	687a      	ldr	r2, [r7, #4]
 8004278:	b292      	uxth	r2, r2
 800427a:	4611      	mov	r1, r2
 800427c:	4618      	mov	r0, r3
 800427e:	f7ff fc7c 	bl	8003b7a <st_word>
			fs->wflag = 1;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	2201      	movs	r2, #1
 8004286:	70da      	strb	r2, [r3, #3]
			break;
 8004288:	e049      	b.n	800431e <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	899b      	ldrh	r3, [r3, #12]
 8004292:	089b      	lsrs	r3, r3, #2
 8004294:	b29b      	uxth	r3, r3
 8004296:	4619      	mov	r1, r3
 8004298:	68bb      	ldr	r3, [r7, #8]
 800429a:	fbb3 f3f1 	udiv	r3, r3, r1
 800429e:	4413      	add	r3, r2
 80042a0:	4619      	mov	r1, r3
 80042a2:	68f8      	ldr	r0, [r7, #12]
 80042a4:	f7ff fe04 	bl	8003eb0 <move_window>
 80042a8:	4603      	mov	r3, r0
 80042aa:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80042ac:	7ffb      	ldrb	r3, [r7, #31]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d134      	bne.n	800431c <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80042be:	68bb      	ldr	r3, [r7, #8]
 80042c0:	009b      	lsls	r3, r3, #2
 80042c2:	68fa      	ldr	r2, [r7, #12]
 80042c4:	8992      	ldrh	r2, [r2, #12]
 80042c6:	fbb3 f0f2 	udiv	r0, r3, r2
 80042ca:	fb00 f202 	mul.w	r2, r0, r2
 80042ce:	1a9b      	subs	r3, r3, r2
 80042d0:	440b      	add	r3, r1
 80042d2:	4618      	mov	r0, r3
 80042d4:	f7ff fc2e 	bl	8003b34 <ld_dword>
 80042d8:	4603      	mov	r3, r0
 80042da:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80042de:	4323      	orrs	r3, r4
 80042e0:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80042e8:	68bb      	ldr	r3, [r7, #8]
 80042ea:	009b      	lsls	r3, r3, #2
 80042ec:	68fa      	ldr	r2, [r7, #12]
 80042ee:	8992      	ldrh	r2, [r2, #12]
 80042f0:	fbb3 f0f2 	udiv	r0, r3, r2
 80042f4:	fb00 f202 	mul.w	r2, r0, r2
 80042f8:	1a9b      	subs	r3, r3, r2
 80042fa:	440b      	add	r3, r1
 80042fc:	6879      	ldr	r1, [r7, #4]
 80042fe:	4618      	mov	r0, r3
 8004300:	f7ff fc56 	bl	8003bb0 <st_dword>
			fs->wflag = 1;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	2201      	movs	r2, #1
 8004308:	70da      	strb	r2, [r3, #3]
			break;
 800430a:	e008      	b.n	800431e <put_fat+0x22e>
		}
	}
 800430c:	bf00      	nop
 800430e:	e006      	b.n	800431e <put_fat+0x22e>
			if (res != FR_OK) break;
 8004310:	bf00      	nop
 8004312:	e004      	b.n	800431e <put_fat+0x22e>
			if (res != FR_OK) break;
 8004314:	bf00      	nop
 8004316:	e002      	b.n	800431e <put_fat+0x22e>
			if (res != FR_OK) break;
 8004318:	bf00      	nop
 800431a:	e000      	b.n	800431e <put_fat+0x22e>
			if (res != FR_OK) break;
 800431c:	bf00      	nop
	return res;
 800431e:	7ffb      	ldrb	r3, [r7, #31]
}
 8004320:	4618      	mov	r0, r3
 8004322:	3724      	adds	r7, #36	; 0x24
 8004324:	46bd      	mov	sp, r7
 8004326:	bd90      	pop	{r4, r7, pc}

08004328 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b088      	sub	sp, #32
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
 8004330:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d10d      	bne.n	800435a <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800433e:	693b      	ldr	r3, [r7, #16]
 8004340:	695b      	ldr	r3, [r3, #20]
 8004342:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8004344:	69bb      	ldr	r3, [r7, #24]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d004      	beq.n	8004354 <create_chain+0x2c>
 800434a:	693b      	ldr	r3, [r7, #16]
 800434c:	69db      	ldr	r3, [r3, #28]
 800434e:	69ba      	ldr	r2, [r7, #24]
 8004350:	429a      	cmp	r2, r3
 8004352:	d31b      	bcc.n	800438c <create_chain+0x64>
 8004354:	2301      	movs	r3, #1
 8004356:	61bb      	str	r3, [r7, #24]
 8004358:	e018      	b.n	800438c <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800435a:	6839      	ldr	r1, [r7, #0]
 800435c:	6878      	ldr	r0, [r7, #4]
 800435e:	f7ff fdf3 	bl	8003f48 <get_fat>
 8004362:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	2b01      	cmp	r3, #1
 8004368:	d801      	bhi.n	800436e <create_chain+0x46>
 800436a:	2301      	movs	r3, #1
 800436c:	e070      	b.n	8004450 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004374:	d101      	bne.n	800437a <create_chain+0x52>
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	e06a      	b.n	8004450 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800437a:	693b      	ldr	r3, [r7, #16]
 800437c:	69db      	ldr	r3, [r3, #28]
 800437e:	68fa      	ldr	r2, [r7, #12]
 8004380:	429a      	cmp	r2, r3
 8004382:	d201      	bcs.n	8004388 <create_chain+0x60>
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	e063      	b.n	8004450 <create_chain+0x128>
		scl = clst;
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800438c:	69bb      	ldr	r3, [r7, #24]
 800438e:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8004390:	69fb      	ldr	r3, [r7, #28]
 8004392:	3301      	adds	r3, #1
 8004394:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8004396:	693b      	ldr	r3, [r7, #16]
 8004398:	69db      	ldr	r3, [r3, #28]
 800439a:	69fa      	ldr	r2, [r7, #28]
 800439c:	429a      	cmp	r2, r3
 800439e:	d307      	bcc.n	80043b0 <create_chain+0x88>
				ncl = 2;
 80043a0:	2302      	movs	r3, #2
 80043a2:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80043a4:	69fa      	ldr	r2, [r7, #28]
 80043a6:	69bb      	ldr	r3, [r7, #24]
 80043a8:	429a      	cmp	r2, r3
 80043aa:	d901      	bls.n	80043b0 <create_chain+0x88>
 80043ac:	2300      	movs	r3, #0
 80043ae:	e04f      	b.n	8004450 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80043b0:	69f9      	ldr	r1, [r7, #28]
 80043b2:	6878      	ldr	r0, [r7, #4]
 80043b4:	f7ff fdc8 	bl	8003f48 <get_fat>
 80043b8:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d00e      	beq.n	80043de <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	2b01      	cmp	r3, #1
 80043c4:	d003      	beq.n	80043ce <create_chain+0xa6>
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80043cc:	d101      	bne.n	80043d2 <create_chain+0xaa>
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	e03e      	b.n	8004450 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80043d2:	69fa      	ldr	r2, [r7, #28]
 80043d4:	69bb      	ldr	r3, [r7, #24]
 80043d6:	429a      	cmp	r2, r3
 80043d8:	d1da      	bne.n	8004390 <create_chain+0x68>
 80043da:	2300      	movs	r3, #0
 80043dc:	e038      	b.n	8004450 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80043de:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80043e0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80043e4:	69f9      	ldr	r1, [r7, #28]
 80043e6:	6938      	ldr	r0, [r7, #16]
 80043e8:	f7ff fe82 	bl	80040f0 <put_fat>
 80043ec:	4603      	mov	r3, r0
 80043ee:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80043f0:	7dfb      	ldrb	r3, [r7, #23]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d109      	bne.n	800440a <create_chain+0xe2>
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d006      	beq.n	800440a <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80043fc:	69fa      	ldr	r2, [r7, #28]
 80043fe:	6839      	ldr	r1, [r7, #0]
 8004400:	6938      	ldr	r0, [r7, #16]
 8004402:	f7ff fe75 	bl	80040f0 <put_fat>
 8004406:	4603      	mov	r3, r0
 8004408:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800440a:	7dfb      	ldrb	r3, [r7, #23]
 800440c:	2b00      	cmp	r3, #0
 800440e:	d116      	bne.n	800443e <create_chain+0x116>
		fs->last_clst = ncl;
 8004410:	693b      	ldr	r3, [r7, #16]
 8004412:	69fa      	ldr	r2, [r7, #28]
 8004414:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8004416:	693b      	ldr	r3, [r7, #16]
 8004418:	699a      	ldr	r2, [r3, #24]
 800441a:	693b      	ldr	r3, [r7, #16]
 800441c:	69db      	ldr	r3, [r3, #28]
 800441e:	3b02      	subs	r3, #2
 8004420:	429a      	cmp	r2, r3
 8004422:	d804      	bhi.n	800442e <create_chain+0x106>
 8004424:	693b      	ldr	r3, [r7, #16]
 8004426:	699b      	ldr	r3, [r3, #24]
 8004428:	1e5a      	subs	r2, r3, #1
 800442a:	693b      	ldr	r3, [r7, #16]
 800442c:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 800442e:	693b      	ldr	r3, [r7, #16]
 8004430:	791b      	ldrb	r3, [r3, #4]
 8004432:	f043 0301 	orr.w	r3, r3, #1
 8004436:	b2da      	uxtb	r2, r3
 8004438:	693b      	ldr	r3, [r7, #16]
 800443a:	711a      	strb	r2, [r3, #4]
 800443c:	e007      	b.n	800444e <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800443e:	7dfb      	ldrb	r3, [r7, #23]
 8004440:	2b01      	cmp	r3, #1
 8004442:	d102      	bne.n	800444a <create_chain+0x122>
 8004444:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004448:	e000      	b.n	800444c <create_chain+0x124>
 800444a:	2301      	movs	r3, #1
 800444c:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800444e:	69fb      	ldr	r3, [r7, #28]
}
 8004450:	4618      	mov	r0, r3
 8004452:	3720      	adds	r7, #32
 8004454:	46bd      	mov	sp, r7
 8004456:	bd80      	pop	{r7, pc}

08004458 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b086      	sub	sp, #24
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
 8004460:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800446e:	d204      	bcs.n	800447a <dir_sdi+0x22>
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	f003 031f 	and.w	r3, r3, #31
 8004476:	2b00      	cmp	r3, #0
 8004478:	d001      	beq.n	800447e <dir_sdi+0x26>
		return FR_INT_ERR;
 800447a:	2302      	movs	r3, #2
 800447c:	e071      	b.n	8004562 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	683a      	ldr	r2, [r7, #0]
 8004482:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	689b      	ldr	r3, [r3, #8]
 8004488:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800448a:	697b      	ldr	r3, [r7, #20]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d106      	bne.n	800449e <dir_sdi+0x46>
 8004490:	693b      	ldr	r3, [r7, #16]
 8004492:	781b      	ldrb	r3, [r3, #0]
 8004494:	2b02      	cmp	r3, #2
 8004496:	d902      	bls.n	800449e <dir_sdi+0x46>
		clst = fs->dirbase;
 8004498:	693b      	ldr	r3, [r7, #16]
 800449a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800449c:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800449e:	697b      	ldr	r3, [r7, #20]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d10c      	bne.n	80044be <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	095b      	lsrs	r3, r3, #5
 80044a8:	693a      	ldr	r2, [r7, #16]
 80044aa:	8912      	ldrh	r2, [r2, #8]
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d301      	bcc.n	80044b4 <dir_sdi+0x5c>
 80044b0:	2302      	movs	r3, #2
 80044b2:	e056      	b.n	8004562 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 80044b4:	693b      	ldr	r3, [r7, #16]
 80044b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	61da      	str	r2, [r3, #28]
 80044bc:	e02d      	b.n	800451a <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80044be:	693b      	ldr	r3, [r7, #16]
 80044c0:	895b      	ldrh	r3, [r3, #10]
 80044c2:	461a      	mov	r2, r3
 80044c4:	693b      	ldr	r3, [r7, #16]
 80044c6:	899b      	ldrh	r3, [r3, #12]
 80044c8:	fb02 f303 	mul.w	r3, r2, r3
 80044cc:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80044ce:	e019      	b.n	8004504 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6979      	ldr	r1, [r7, #20]
 80044d4:	4618      	mov	r0, r3
 80044d6:	f7ff fd37 	bl	8003f48 <get_fat>
 80044da:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80044dc:	697b      	ldr	r3, [r7, #20]
 80044de:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80044e2:	d101      	bne.n	80044e8 <dir_sdi+0x90>
 80044e4:	2301      	movs	r3, #1
 80044e6:	e03c      	b.n	8004562 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80044e8:	697b      	ldr	r3, [r7, #20]
 80044ea:	2b01      	cmp	r3, #1
 80044ec:	d904      	bls.n	80044f8 <dir_sdi+0xa0>
 80044ee:	693b      	ldr	r3, [r7, #16]
 80044f0:	69db      	ldr	r3, [r3, #28]
 80044f2:	697a      	ldr	r2, [r7, #20]
 80044f4:	429a      	cmp	r2, r3
 80044f6:	d301      	bcc.n	80044fc <dir_sdi+0xa4>
 80044f8:	2302      	movs	r3, #2
 80044fa:	e032      	b.n	8004562 <dir_sdi+0x10a>
			ofs -= csz;
 80044fc:	683a      	ldr	r2, [r7, #0]
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	1ad3      	subs	r3, r2, r3
 8004502:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8004504:	683a      	ldr	r2, [r7, #0]
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	429a      	cmp	r2, r3
 800450a:	d2e1      	bcs.n	80044d0 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800450c:	6979      	ldr	r1, [r7, #20]
 800450e:	6938      	ldr	r0, [r7, #16]
 8004510:	f7ff fcfb 	bl	8003f0a <clust2sect>
 8004514:	4602      	mov	r2, r0
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	697a      	ldr	r2, [r7, #20]
 800451e:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	69db      	ldr	r3, [r3, #28]
 8004524:	2b00      	cmp	r3, #0
 8004526:	d101      	bne.n	800452c <dir_sdi+0xd4>
 8004528:	2302      	movs	r3, #2
 800452a:	e01a      	b.n	8004562 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	69da      	ldr	r2, [r3, #28]
 8004530:	693b      	ldr	r3, [r7, #16]
 8004532:	899b      	ldrh	r3, [r3, #12]
 8004534:	4619      	mov	r1, r3
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	fbb3 f3f1 	udiv	r3, r3, r1
 800453c:	441a      	add	r2, r3
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8004542:	693b      	ldr	r3, [r7, #16]
 8004544:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8004548:	693b      	ldr	r3, [r7, #16]
 800454a:	899b      	ldrh	r3, [r3, #12]
 800454c:	461a      	mov	r2, r3
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	fbb3 f0f2 	udiv	r0, r3, r2
 8004554:	fb00 f202 	mul.w	r2, r0, r2
 8004558:	1a9b      	subs	r3, r3, r2
 800455a:	18ca      	adds	r2, r1, r3
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8004560:	2300      	movs	r3, #0
}
 8004562:	4618      	mov	r0, r3
 8004564:	3718      	adds	r7, #24
 8004566:	46bd      	mov	sp, r7
 8004568:	bd80      	pop	{r7, pc}

0800456a <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800456a:	b580      	push	{r7, lr}
 800456c:	b086      	sub	sp, #24
 800456e:	af00      	add	r7, sp, #0
 8004570:	6078      	str	r0, [r7, #4]
 8004572:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	695b      	ldr	r3, [r3, #20]
 800457e:	3320      	adds	r3, #32
 8004580:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	69db      	ldr	r3, [r3, #28]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d003      	beq.n	8004592 <dir_next+0x28>
 800458a:	68bb      	ldr	r3, [r7, #8]
 800458c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004590:	d301      	bcc.n	8004596 <dir_next+0x2c>
 8004592:	2304      	movs	r3, #4
 8004594:	e0bb      	b.n	800470e <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	899b      	ldrh	r3, [r3, #12]
 800459a:	461a      	mov	r2, r3
 800459c:	68bb      	ldr	r3, [r7, #8]
 800459e:	fbb3 f1f2 	udiv	r1, r3, r2
 80045a2:	fb01 f202 	mul.w	r2, r1, r2
 80045a6:	1a9b      	subs	r3, r3, r2
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	f040 809d 	bne.w	80046e8 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	69db      	ldr	r3, [r3, #28]
 80045b2:	1c5a      	adds	r2, r3, #1
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	699b      	ldr	r3, [r3, #24]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d10b      	bne.n	80045d8 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80045c0:	68bb      	ldr	r3, [r7, #8]
 80045c2:	095b      	lsrs	r3, r3, #5
 80045c4:	68fa      	ldr	r2, [r7, #12]
 80045c6:	8912      	ldrh	r2, [r2, #8]
 80045c8:	4293      	cmp	r3, r2
 80045ca:	f0c0 808d 	bcc.w	80046e8 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	2200      	movs	r2, #0
 80045d2:	61da      	str	r2, [r3, #28]
 80045d4:	2304      	movs	r3, #4
 80045d6:	e09a      	b.n	800470e <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	899b      	ldrh	r3, [r3, #12]
 80045dc:	461a      	mov	r2, r3
 80045de:	68bb      	ldr	r3, [r7, #8]
 80045e0:	fbb3 f3f2 	udiv	r3, r3, r2
 80045e4:	68fa      	ldr	r2, [r7, #12]
 80045e6:	8952      	ldrh	r2, [r2, #10]
 80045e8:	3a01      	subs	r2, #1
 80045ea:	4013      	ands	r3, r2
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d17b      	bne.n	80046e8 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80045f0:	687a      	ldr	r2, [r7, #4]
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	699b      	ldr	r3, [r3, #24]
 80045f6:	4619      	mov	r1, r3
 80045f8:	4610      	mov	r0, r2
 80045fa:	f7ff fca5 	bl	8003f48 <get_fat>
 80045fe:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8004600:	697b      	ldr	r3, [r7, #20]
 8004602:	2b01      	cmp	r3, #1
 8004604:	d801      	bhi.n	800460a <dir_next+0xa0>
 8004606:	2302      	movs	r3, #2
 8004608:	e081      	b.n	800470e <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800460a:	697b      	ldr	r3, [r7, #20]
 800460c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004610:	d101      	bne.n	8004616 <dir_next+0xac>
 8004612:	2301      	movs	r3, #1
 8004614:	e07b      	b.n	800470e <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	69db      	ldr	r3, [r3, #28]
 800461a:	697a      	ldr	r2, [r7, #20]
 800461c:	429a      	cmp	r2, r3
 800461e:	d359      	bcc.n	80046d4 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d104      	bne.n	8004630 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	2200      	movs	r2, #0
 800462a:	61da      	str	r2, [r3, #28]
 800462c:	2304      	movs	r3, #4
 800462e:	e06e      	b.n	800470e <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8004630:	687a      	ldr	r2, [r7, #4]
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	699b      	ldr	r3, [r3, #24]
 8004636:	4619      	mov	r1, r3
 8004638:	4610      	mov	r0, r2
 800463a:	f7ff fe75 	bl	8004328 <create_chain>
 800463e:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8004640:	697b      	ldr	r3, [r7, #20]
 8004642:	2b00      	cmp	r3, #0
 8004644:	d101      	bne.n	800464a <dir_next+0xe0>
 8004646:	2307      	movs	r3, #7
 8004648:	e061      	b.n	800470e <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800464a:	697b      	ldr	r3, [r7, #20]
 800464c:	2b01      	cmp	r3, #1
 800464e:	d101      	bne.n	8004654 <dir_next+0xea>
 8004650:	2302      	movs	r3, #2
 8004652:	e05c      	b.n	800470e <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8004654:	697b      	ldr	r3, [r7, #20]
 8004656:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800465a:	d101      	bne.n	8004660 <dir_next+0xf6>
 800465c:	2301      	movs	r3, #1
 800465e:	e056      	b.n	800470e <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8004660:	68f8      	ldr	r0, [r7, #12]
 8004662:	f7ff fbe1 	bl	8003e28 <sync_window>
 8004666:	4603      	mov	r3, r0
 8004668:	2b00      	cmp	r3, #0
 800466a:	d001      	beq.n	8004670 <dir_next+0x106>
 800466c:	2301      	movs	r3, #1
 800466e:	e04e      	b.n	800470e <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	899b      	ldrh	r3, [r3, #12]
 800467a:	461a      	mov	r2, r3
 800467c:	2100      	movs	r1, #0
 800467e:	f7ff fac3 	bl	8003c08 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8004682:	2300      	movs	r3, #0
 8004684:	613b      	str	r3, [r7, #16]
 8004686:	6979      	ldr	r1, [r7, #20]
 8004688:	68f8      	ldr	r0, [r7, #12]
 800468a:	f7ff fc3e 	bl	8003f0a <clust2sect>
 800468e:	4602      	mov	r2, r0
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	635a      	str	r2, [r3, #52]	; 0x34
 8004694:	e012      	b.n	80046bc <dir_next+0x152>
						fs->wflag = 1;
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	2201      	movs	r2, #1
 800469a:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800469c:	68f8      	ldr	r0, [r7, #12]
 800469e:	f7ff fbc3 	bl	8003e28 <sync_window>
 80046a2:	4603      	mov	r3, r0
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d001      	beq.n	80046ac <dir_next+0x142>
 80046a8:	2301      	movs	r3, #1
 80046aa:	e030      	b.n	800470e <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80046ac:	693b      	ldr	r3, [r7, #16]
 80046ae:	3301      	adds	r3, #1
 80046b0:	613b      	str	r3, [r7, #16]
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046b6:	1c5a      	adds	r2, r3, #1
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	635a      	str	r2, [r3, #52]	; 0x34
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	895b      	ldrh	r3, [r3, #10]
 80046c0:	461a      	mov	r2, r3
 80046c2:	693b      	ldr	r3, [r7, #16]
 80046c4:	4293      	cmp	r3, r2
 80046c6:	d3e6      	bcc.n	8004696 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80046cc:	693b      	ldr	r3, [r7, #16]
 80046ce:	1ad2      	subs	r2, r2, r3
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	697a      	ldr	r2, [r7, #20]
 80046d8:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80046da:	6979      	ldr	r1, [r7, #20]
 80046dc:	68f8      	ldr	r0, [r7, #12]
 80046de:	f7ff fc14 	bl	8003f0a <clust2sect>
 80046e2:	4602      	mov	r2, r0
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	68ba      	ldr	r2, [r7, #8]
 80046ec:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	899b      	ldrh	r3, [r3, #12]
 80046f8:	461a      	mov	r2, r3
 80046fa:	68bb      	ldr	r3, [r7, #8]
 80046fc:	fbb3 f0f2 	udiv	r0, r3, r2
 8004700:	fb00 f202 	mul.w	r2, r0, r2
 8004704:	1a9b      	subs	r3, r3, r2
 8004706:	18ca      	adds	r2, r1, r3
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800470c:	2300      	movs	r3, #0
}
 800470e:	4618      	mov	r0, r3
 8004710:	3718      	adds	r7, #24
 8004712:	46bd      	mov	sp, r7
 8004714:	bd80      	pop	{r7, pc}

08004716 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8004716:	b580      	push	{r7, lr}
 8004718:	b084      	sub	sp, #16
 800471a:	af00      	add	r7, sp, #0
 800471c:	6078      	str	r0, [r7, #4]
 800471e:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	331a      	adds	r3, #26
 8004724:	4618      	mov	r0, r3
 8004726:	f7ff f9ed 	bl	8003b04 <ld_word>
 800472a:	4603      	mov	r3, r0
 800472c:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	781b      	ldrb	r3, [r3, #0]
 8004732:	2b03      	cmp	r3, #3
 8004734:	d109      	bne.n	800474a <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	3314      	adds	r3, #20
 800473a:	4618      	mov	r0, r3
 800473c:	f7ff f9e2 	bl	8003b04 <ld_word>
 8004740:	4603      	mov	r3, r0
 8004742:	041b      	lsls	r3, r3, #16
 8004744:	68fa      	ldr	r2, [r7, #12]
 8004746:	4313      	orrs	r3, r2
 8004748:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800474a:	68fb      	ldr	r3, [r7, #12]
}
 800474c:	4618      	mov	r0, r3
 800474e:	3710      	adds	r7, #16
 8004750:	46bd      	mov	sp, r7
 8004752:	bd80      	pop	{r7, pc}

08004754 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8004754:	b590      	push	{r4, r7, lr}
 8004756:	b087      	sub	sp, #28
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
 800475c:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	331a      	adds	r3, #26
 8004762:	4618      	mov	r0, r3
 8004764:	f7ff f9ce 	bl	8003b04 <ld_word>
 8004768:	4603      	mov	r3, r0
 800476a:	2b00      	cmp	r3, #0
 800476c:	d001      	beq.n	8004772 <cmp_lfn+0x1e>
 800476e:	2300      	movs	r3, #0
 8004770:	e059      	b.n	8004826 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	781b      	ldrb	r3, [r3, #0]
 8004776:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800477a:	1e5a      	subs	r2, r3, #1
 800477c:	4613      	mov	r3, r2
 800477e:	005b      	lsls	r3, r3, #1
 8004780:	4413      	add	r3, r2
 8004782:	009b      	lsls	r3, r3, #2
 8004784:	4413      	add	r3, r2
 8004786:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8004788:	2301      	movs	r3, #1
 800478a:	81fb      	strh	r3, [r7, #14]
 800478c:	2300      	movs	r3, #0
 800478e:	613b      	str	r3, [r7, #16]
 8004790:	e033      	b.n	80047fa <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8004792:	4a27      	ldr	r2, [pc, #156]	; (8004830 <cmp_lfn+0xdc>)
 8004794:	693b      	ldr	r3, [r7, #16]
 8004796:	4413      	add	r3, r2
 8004798:	781b      	ldrb	r3, [r3, #0]
 800479a:	461a      	mov	r2, r3
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	4413      	add	r3, r2
 80047a0:	4618      	mov	r0, r3
 80047a2:	f7ff f9af 	bl	8003b04 <ld_word>
 80047a6:	4603      	mov	r3, r0
 80047a8:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 80047aa:	89fb      	ldrh	r3, [r7, #14]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d01a      	beq.n	80047e6 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 80047b0:	697b      	ldr	r3, [r7, #20]
 80047b2:	2bfe      	cmp	r3, #254	; 0xfe
 80047b4:	d812      	bhi.n	80047dc <cmp_lfn+0x88>
 80047b6:	89bb      	ldrh	r3, [r7, #12]
 80047b8:	4618      	mov	r0, r3
 80047ba:	f7ff f87b 	bl	80038b4 <ff_wtoupper>
 80047be:	4603      	mov	r3, r0
 80047c0:	461c      	mov	r4, r3
 80047c2:	697b      	ldr	r3, [r7, #20]
 80047c4:	1c5a      	adds	r2, r3, #1
 80047c6:	617a      	str	r2, [r7, #20]
 80047c8:	005b      	lsls	r3, r3, #1
 80047ca:	687a      	ldr	r2, [r7, #4]
 80047cc:	4413      	add	r3, r2
 80047ce:	881b      	ldrh	r3, [r3, #0]
 80047d0:	4618      	mov	r0, r3
 80047d2:	f7ff f86f 	bl	80038b4 <ff_wtoupper>
 80047d6:	4603      	mov	r3, r0
 80047d8:	429c      	cmp	r4, r3
 80047da:	d001      	beq.n	80047e0 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 80047dc:	2300      	movs	r3, #0
 80047de:	e022      	b.n	8004826 <cmp_lfn+0xd2>
			}
			wc = uc;
 80047e0:	89bb      	ldrh	r3, [r7, #12]
 80047e2:	81fb      	strh	r3, [r7, #14]
 80047e4:	e006      	b.n	80047f4 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 80047e6:	89bb      	ldrh	r3, [r7, #12]
 80047e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d001      	beq.n	80047f4 <cmp_lfn+0xa0>
 80047f0:	2300      	movs	r3, #0
 80047f2:	e018      	b.n	8004826 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80047f4:	693b      	ldr	r3, [r7, #16]
 80047f6:	3301      	adds	r3, #1
 80047f8:	613b      	str	r3, [r7, #16]
 80047fa:	693b      	ldr	r3, [r7, #16]
 80047fc:	2b0c      	cmp	r3, #12
 80047fe:	d9c8      	bls.n	8004792 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	781b      	ldrb	r3, [r3, #0]
 8004804:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004808:	2b00      	cmp	r3, #0
 800480a:	d00b      	beq.n	8004824 <cmp_lfn+0xd0>
 800480c:	89fb      	ldrh	r3, [r7, #14]
 800480e:	2b00      	cmp	r3, #0
 8004810:	d008      	beq.n	8004824 <cmp_lfn+0xd0>
 8004812:	697b      	ldr	r3, [r7, #20]
 8004814:	005b      	lsls	r3, r3, #1
 8004816:	687a      	ldr	r2, [r7, #4]
 8004818:	4413      	add	r3, r2
 800481a:	881b      	ldrh	r3, [r3, #0]
 800481c:	2b00      	cmp	r3, #0
 800481e:	d001      	beq.n	8004824 <cmp_lfn+0xd0>
 8004820:	2300      	movs	r3, #0
 8004822:	e000      	b.n	8004826 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8004824:	2301      	movs	r3, #1
}
 8004826:	4618      	mov	r0, r3
 8004828:	371c      	adds	r7, #28
 800482a:	46bd      	mov	sp, r7
 800482c:	bd90      	pop	{r4, r7, pc}
 800482e:	bf00      	nop
 8004830:	08006320 	.word	0x08006320

08004834 <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 8004834:	b580      	push	{r7, lr}
 8004836:	b086      	sub	sp, #24
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
 800483c:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	331a      	adds	r3, #26
 8004842:	4618      	mov	r0, r3
 8004844:	f7ff f95e 	bl	8003b04 <ld_word>
 8004848:	4603      	mov	r3, r0
 800484a:	2b00      	cmp	r3, #0
 800484c:	d001      	beq.n	8004852 <pick_lfn+0x1e>
 800484e:	2300      	movs	r3, #0
 8004850:	e04d      	b.n	80048ee <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	781b      	ldrb	r3, [r3, #0]
 8004856:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800485a:	1e5a      	subs	r2, r3, #1
 800485c:	4613      	mov	r3, r2
 800485e:	005b      	lsls	r3, r3, #1
 8004860:	4413      	add	r3, r2
 8004862:	009b      	lsls	r3, r3, #2
 8004864:	4413      	add	r3, r2
 8004866:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8004868:	2301      	movs	r3, #1
 800486a:	81fb      	strh	r3, [r7, #14]
 800486c:	2300      	movs	r3, #0
 800486e:	613b      	str	r3, [r7, #16]
 8004870:	e028      	b.n	80048c4 <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8004872:	4a21      	ldr	r2, [pc, #132]	; (80048f8 <pick_lfn+0xc4>)
 8004874:	693b      	ldr	r3, [r7, #16]
 8004876:	4413      	add	r3, r2
 8004878:	781b      	ldrb	r3, [r3, #0]
 800487a:	461a      	mov	r2, r3
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	4413      	add	r3, r2
 8004880:	4618      	mov	r0, r3
 8004882:	f7ff f93f 	bl	8003b04 <ld_word>
 8004886:	4603      	mov	r3, r0
 8004888:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800488a:	89fb      	ldrh	r3, [r7, #14]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d00f      	beq.n	80048b0 <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 8004890:	697b      	ldr	r3, [r7, #20]
 8004892:	2bfe      	cmp	r3, #254	; 0xfe
 8004894:	d901      	bls.n	800489a <pick_lfn+0x66>
 8004896:	2300      	movs	r3, #0
 8004898:	e029      	b.n	80048ee <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800489a:	89bb      	ldrh	r3, [r7, #12]
 800489c:	81fb      	strh	r3, [r7, #14]
 800489e:	697b      	ldr	r3, [r7, #20]
 80048a0:	1c5a      	adds	r2, r3, #1
 80048a2:	617a      	str	r2, [r7, #20]
 80048a4:	005b      	lsls	r3, r3, #1
 80048a6:	687a      	ldr	r2, [r7, #4]
 80048a8:	4413      	add	r3, r2
 80048aa:	89fa      	ldrh	r2, [r7, #14]
 80048ac:	801a      	strh	r2, [r3, #0]
 80048ae:	e006      	b.n	80048be <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 80048b0:	89bb      	ldrh	r3, [r7, #12]
 80048b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d001      	beq.n	80048be <pick_lfn+0x8a>
 80048ba:	2300      	movs	r3, #0
 80048bc:	e017      	b.n	80048ee <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80048be:	693b      	ldr	r3, [r7, #16]
 80048c0:	3301      	adds	r3, #1
 80048c2:	613b      	str	r3, [r7, #16]
 80048c4:	693b      	ldr	r3, [r7, #16]
 80048c6:	2b0c      	cmp	r3, #12
 80048c8:	d9d3      	bls.n	8004872 <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	781b      	ldrb	r3, [r3, #0]
 80048ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d00a      	beq.n	80048ec <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 80048d6:	697b      	ldr	r3, [r7, #20]
 80048d8:	2bfe      	cmp	r3, #254	; 0xfe
 80048da:	d901      	bls.n	80048e0 <pick_lfn+0xac>
 80048dc:	2300      	movs	r3, #0
 80048de:	e006      	b.n	80048ee <pick_lfn+0xba>
		lfnbuf[i] = 0;
 80048e0:	697b      	ldr	r3, [r7, #20]
 80048e2:	005b      	lsls	r3, r3, #1
 80048e4:	687a      	ldr	r2, [r7, #4]
 80048e6:	4413      	add	r3, r2
 80048e8:	2200      	movs	r2, #0
 80048ea:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 80048ec:	2301      	movs	r3, #1
}
 80048ee:	4618      	mov	r0, r3
 80048f0:	3718      	adds	r7, #24
 80048f2:	46bd      	mov	sp, r7
 80048f4:	bd80      	pop	{r7, pc}
 80048f6:	bf00      	nop
 80048f8:	08006320 	.word	0x08006320

080048fc <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 80048fc:	b480      	push	{r7}
 80048fe:	b085      	sub	sp, #20
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8004904:	2300      	movs	r3, #0
 8004906:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8004908:	230b      	movs	r3, #11
 800490a:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800490c:	7bfb      	ldrb	r3, [r7, #15]
 800490e:	b2da      	uxtb	r2, r3
 8004910:	0852      	lsrs	r2, r2, #1
 8004912:	01db      	lsls	r3, r3, #7
 8004914:	4313      	orrs	r3, r2
 8004916:	b2da      	uxtb	r2, r3
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	1c59      	adds	r1, r3, #1
 800491c:	6079      	str	r1, [r7, #4]
 800491e:	781b      	ldrb	r3, [r3, #0]
 8004920:	4413      	add	r3, r2
 8004922:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8004924:	68bb      	ldr	r3, [r7, #8]
 8004926:	3b01      	subs	r3, #1
 8004928:	60bb      	str	r3, [r7, #8]
 800492a:	68bb      	ldr	r3, [r7, #8]
 800492c:	2b00      	cmp	r3, #0
 800492e:	d1ed      	bne.n	800490c <sum_sfn+0x10>
	return sum;
 8004930:	7bfb      	ldrb	r3, [r7, #15]
}
 8004932:	4618      	mov	r0, r3
 8004934:	3714      	adds	r7, #20
 8004936:	46bd      	mov	sp, r7
 8004938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493c:	4770      	bx	lr

0800493e <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800493e:	b580      	push	{r7, lr}
 8004940:	b086      	sub	sp, #24
 8004942:	af00      	add	r7, sp, #0
 8004944:	6078      	str	r0, [r7, #4]
 8004946:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 8004948:	2304      	movs	r3, #4
 800494a:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 8004952:	23ff      	movs	r3, #255	; 0xff
 8004954:	757b      	strb	r3, [r7, #21]
 8004956:	23ff      	movs	r3, #255	; 0xff
 8004958:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 800495a:	e081      	b.n	8004a60 <dir_read+0x122>
		res = move_window(fs, dp->sect);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	69db      	ldr	r3, [r3, #28]
 8004960:	4619      	mov	r1, r3
 8004962:	6938      	ldr	r0, [r7, #16]
 8004964:	f7ff faa4 	bl	8003eb0 <move_window>
 8004968:	4603      	mov	r3, r0
 800496a:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800496c:	7dfb      	ldrb	r3, [r7, #23]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d17c      	bne.n	8004a6c <dir_read+0x12e>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6a1b      	ldr	r3, [r3, #32]
 8004976:	781b      	ldrb	r3, [r3, #0]
 8004978:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 800497a:	7dbb      	ldrb	r3, [r7, #22]
 800497c:	2b00      	cmp	r3, #0
 800497e:	d102      	bne.n	8004986 <dir_read+0x48>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 8004980:	2304      	movs	r3, #4
 8004982:	75fb      	strb	r3, [r7, #23]
 8004984:	e077      	b.n	8004a76 <dir_read+0x138>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6a1b      	ldr	r3, [r3, #32]
 800498a:	330b      	adds	r3, #11
 800498c:	781b      	ldrb	r3, [r3, #0]
 800498e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004992:	73fb      	strb	r3, [r7, #15]
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	7bfa      	ldrb	r2, [r7, #15]
 8004998:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 800499a:	7dbb      	ldrb	r3, [r7, #22]
 800499c:	2be5      	cmp	r3, #229	; 0xe5
 800499e:	d00e      	beq.n	80049be <dir_read+0x80>
 80049a0:	7dbb      	ldrb	r3, [r7, #22]
 80049a2:	2b2e      	cmp	r3, #46	; 0x2e
 80049a4:	d00b      	beq.n	80049be <dir_read+0x80>
 80049a6:	7bfb      	ldrb	r3, [r7, #15]
 80049a8:	f023 0320 	bic.w	r3, r3, #32
 80049ac:	2b08      	cmp	r3, #8
 80049ae:	bf0c      	ite	eq
 80049b0:	2301      	moveq	r3, #1
 80049b2:	2300      	movne	r3, #0
 80049b4:	b2db      	uxtb	r3, r3
 80049b6:	461a      	mov	r2, r3
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d002      	beq.n	80049c4 <dir_read+0x86>
				ord = 0xFF;
 80049be:	23ff      	movs	r3, #255	; 0xff
 80049c0:	757b      	strb	r3, [r7, #21]
 80049c2:	e044      	b.n	8004a4e <dir_read+0x110>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 80049c4:	7bfb      	ldrb	r3, [r7, #15]
 80049c6:	2b0f      	cmp	r3, #15
 80049c8:	d12f      	bne.n	8004a2a <dir_read+0xec>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 80049ca:	7dbb      	ldrb	r3, [r7, #22]
 80049cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d00d      	beq.n	80049f0 <dir_read+0xb2>
						sum = dp->dir[LDIR_Chksum];
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6a1b      	ldr	r3, [r3, #32]
 80049d8:	7b5b      	ldrb	r3, [r3, #13]
 80049da:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 80049dc:	7dbb      	ldrb	r3, [r7, #22]
 80049de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80049e2:	75bb      	strb	r3, [r7, #22]
 80049e4:	7dbb      	ldrb	r3, [r7, #22]
 80049e6:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	695a      	ldr	r2, [r3, #20]
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 80049f0:	7dba      	ldrb	r2, [r7, #22]
 80049f2:	7d7b      	ldrb	r3, [r7, #21]
 80049f4:	429a      	cmp	r2, r3
 80049f6:	d115      	bne.n	8004a24 <dir_read+0xe6>
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6a1b      	ldr	r3, [r3, #32]
 80049fc:	330d      	adds	r3, #13
 80049fe:	781b      	ldrb	r3, [r3, #0]
 8004a00:	7d3a      	ldrb	r2, [r7, #20]
 8004a02:	429a      	cmp	r2, r3
 8004a04:	d10e      	bne.n	8004a24 <dir_read+0xe6>
 8004a06:	693b      	ldr	r3, [r7, #16]
 8004a08:	691a      	ldr	r2, [r3, #16]
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6a1b      	ldr	r3, [r3, #32]
 8004a0e:	4619      	mov	r1, r3
 8004a10:	4610      	mov	r0, r2
 8004a12:	f7ff ff0f 	bl	8004834 <pick_lfn>
 8004a16:	4603      	mov	r3, r0
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d003      	beq.n	8004a24 <dir_read+0xe6>
 8004a1c:	7d7b      	ldrb	r3, [r7, #21]
 8004a1e:	3b01      	subs	r3, #1
 8004a20:	b2db      	uxtb	r3, r3
 8004a22:	e000      	b.n	8004a26 <dir_read+0xe8>
 8004a24:	23ff      	movs	r3, #255	; 0xff
 8004a26:	757b      	strb	r3, [r7, #21]
 8004a28:	e011      	b.n	8004a4e <dir_read+0x110>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 8004a2a:	7d7b      	ldrb	r3, [r7, #21]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d109      	bne.n	8004a44 <dir_read+0x106>
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6a1b      	ldr	r3, [r3, #32]
 8004a34:	4618      	mov	r0, r3
 8004a36:	f7ff ff61 	bl	80048fc <sum_sfn>
 8004a3a:	4603      	mov	r3, r0
 8004a3c:	461a      	mov	r2, r3
 8004a3e:	7d3b      	ldrb	r3, [r7, #20]
 8004a40:	4293      	cmp	r3, r2
 8004a42:	d015      	beq.n	8004a70 <dir_read+0x132>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004a4a:	631a      	str	r2, [r3, #48]	; 0x30
					}
					break;
 8004a4c:	e010      	b.n	8004a70 <dir_read+0x132>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 8004a4e:	2100      	movs	r1, #0
 8004a50:	6878      	ldr	r0, [r7, #4]
 8004a52:	f7ff fd8a 	bl	800456a <dir_next>
 8004a56:	4603      	mov	r3, r0
 8004a58:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8004a5a:	7dfb      	ldrb	r3, [r7, #23]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d109      	bne.n	8004a74 <dir_read+0x136>
	while (dp->sect) {
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	69db      	ldr	r3, [r3, #28]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	f47f af79 	bne.w	800495c <dir_read+0x1e>
 8004a6a:	e004      	b.n	8004a76 <dir_read+0x138>
		if (res != FR_OK) break;
 8004a6c:	bf00      	nop
 8004a6e:	e002      	b.n	8004a76 <dir_read+0x138>
					break;
 8004a70:	bf00      	nop
 8004a72:	e000      	b.n	8004a76 <dir_read+0x138>
		if (res != FR_OK) break;
 8004a74:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8004a76:	7dfb      	ldrb	r3, [r7, #23]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d002      	beq.n	8004a82 <dir_read+0x144>
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2200      	movs	r2, #0
 8004a80:	61da      	str	r2, [r3, #28]
	return res;
 8004a82:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a84:	4618      	mov	r0, r3
 8004a86:	3718      	adds	r7, #24
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	bd80      	pop	{r7, pc}

08004a8c <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b086      	sub	sp, #24
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8004a9a:	2100      	movs	r1, #0
 8004a9c:	6878      	ldr	r0, [r7, #4]
 8004a9e:	f7ff fcdb 	bl	8004458 <dir_sdi>
 8004aa2:	4603      	mov	r3, r0
 8004aa4:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8004aa6:	7dfb      	ldrb	r3, [r7, #23]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d001      	beq.n	8004ab0 <dir_find+0x24>
 8004aac:	7dfb      	ldrb	r3, [r7, #23]
 8004aae:	e0a9      	b.n	8004c04 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8004ab0:	23ff      	movs	r3, #255	; 0xff
 8004ab2:	753b      	strb	r3, [r7, #20]
 8004ab4:	7d3b      	ldrb	r3, [r7, #20]
 8004ab6:	757b      	strb	r3, [r7, #21]
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004abe:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	69db      	ldr	r3, [r3, #28]
 8004ac4:	4619      	mov	r1, r3
 8004ac6:	6938      	ldr	r0, [r7, #16]
 8004ac8:	f7ff f9f2 	bl	8003eb0 <move_window>
 8004acc:	4603      	mov	r3, r0
 8004ace:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8004ad0:	7dfb      	ldrb	r3, [r7, #23]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	f040 8090 	bne.w	8004bf8 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6a1b      	ldr	r3, [r3, #32]
 8004adc:	781b      	ldrb	r3, [r3, #0]
 8004ade:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8004ae0:	7dbb      	ldrb	r3, [r7, #22]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d102      	bne.n	8004aec <dir_find+0x60>
 8004ae6:	2304      	movs	r3, #4
 8004ae8:	75fb      	strb	r3, [r7, #23]
 8004aea:	e08a      	b.n	8004c02 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6a1b      	ldr	r3, [r3, #32]
 8004af0:	330b      	adds	r3, #11
 8004af2:	781b      	ldrb	r3, [r3, #0]
 8004af4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004af8:	73fb      	strb	r3, [r7, #15]
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	7bfa      	ldrb	r2, [r7, #15]
 8004afe:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8004b00:	7dbb      	ldrb	r3, [r7, #22]
 8004b02:	2be5      	cmp	r3, #229	; 0xe5
 8004b04:	d007      	beq.n	8004b16 <dir_find+0x8a>
 8004b06:	7bfb      	ldrb	r3, [r7, #15]
 8004b08:	f003 0308 	and.w	r3, r3, #8
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d009      	beq.n	8004b24 <dir_find+0x98>
 8004b10:	7bfb      	ldrb	r3, [r7, #15]
 8004b12:	2b0f      	cmp	r3, #15
 8004b14:	d006      	beq.n	8004b24 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8004b16:	23ff      	movs	r3, #255	; 0xff
 8004b18:	757b      	strb	r3, [r7, #21]
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004b20:	631a      	str	r2, [r3, #48]	; 0x30
 8004b22:	e05e      	b.n	8004be2 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8004b24:	7bfb      	ldrb	r3, [r7, #15]
 8004b26:	2b0f      	cmp	r3, #15
 8004b28:	d136      	bne.n	8004b98 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8004b30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d154      	bne.n	8004be2 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8004b38:	7dbb      	ldrb	r3, [r7, #22]
 8004b3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d00d      	beq.n	8004b5e <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6a1b      	ldr	r3, [r3, #32]
 8004b46:	7b5b      	ldrb	r3, [r3, #13]
 8004b48:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8004b4a:	7dbb      	ldrb	r3, [r7, #22]
 8004b4c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b50:	75bb      	strb	r3, [r7, #22]
 8004b52:	7dbb      	ldrb	r3, [r7, #22]
 8004b54:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	695a      	ldr	r2, [r3, #20]
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8004b5e:	7dba      	ldrb	r2, [r7, #22]
 8004b60:	7d7b      	ldrb	r3, [r7, #21]
 8004b62:	429a      	cmp	r2, r3
 8004b64:	d115      	bne.n	8004b92 <dir_find+0x106>
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6a1b      	ldr	r3, [r3, #32]
 8004b6a:	330d      	adds	r3, #13
 8004b6c:	781b      	ldrb	r3, [r3, #0]
 8004b6e:	7d3a      	ldrb	r2, [r7, #20]
 8004b70:	429a      	cmp	r2, r3
 8004b72:	d10e      	bne.n	8004b92 <dir_find+0x106>
 8004b74:	693b      	ldr	r3, [r7, #16]
 8004b76:	691a      	ldr	r2, [r3, #16]
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6a1b      	ldr	r3, [r3, #32]
 8004b7c:	4619      	mov	r1, r3
 8004b7e:	4610      	mov	r0, r2
 8004b80:	f7ff fde8 	bl	8004754 <cmp_lfn>
 8004b84:	4603      	mov	r3, r0
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d003      	beq.n	8004b92 <dir_find+0x106>
 8004b8a:	7d7b      	ldrb	r3, [r7, #21]
 8004b8c:	3b01      	subs	r3, #1
 8004b8e:	b2db      	uxtb	r3, r3
 8004b90:	e000      	b.n	8004b94 <dir_find+0x108>
 8004b92:	23ff      	movs	r3, #255	; 0xff
 8004b94:	757b      	strb	r3, [r7, #21]
 8004b96:	e024      	b.n	8004be2 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8004b98:	7d7b      	ldrb	r3, [r7, #21]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d109      	bne.n	8004bb2 <dir_find+0x126>
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6a1b      	ldr	r3, [r3, #32]
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	f7ff feaa 	bl	80048fc <sum_sfn>
 8004ba8:	4603      	mov	r3, r0
 8004baa:	461a      	mov	r2, r3
 8004bac:	7d3b      	ldrb	r3, [r7, #20]
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	d024      	beq.n	8004bfc <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8004bb8:	f003 0301 	and.w	r3, r3, #1
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d10a      	bne.n	8004bd6 <dir_find+0x14a>
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6a18      	ldr	r0, [r3, #32]
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	3324      	adds	r3, #36	; 0x24
 8004bc8:	220b      	movs	r2, #11
 8004bca:	4619      	mov	r1, r3
 8004bcc:	f7ff f837 	bl	8003c3e <mem_cmp>
 8004bd0:	4603      	mov	r3, r0
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d014      	beq.n	8004c00 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8004bd6:	23ff      	movs	r3, #255	; 0xff
 8004bd8:	757b      	strb	r3, [r7, #21]
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004be0:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8004be2:	2100      	movs	r1, #0
 8004be4:	6878      	ldr	r0, [r7, #4]
 8004be6:	f7ff fcc0 	bl	800456a <dir_next>
 8004bea:	4603      	mov	r3, r0
 8004bec:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8004bee:	7dfb      	ldrb	r3, [r7, #23]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	f43f af65 	beq.w	8004ac0 <dir_find+0x34>
 8004bf6:	e004      	b.n	8004c02 <dir_find+0x176>
		if (res != FR_OK) break;
 8004bf8:	bf00      	nop
 8004bfa:	e002      	b.n	8004c02 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8004bfc:	bf00      	nop
 8004bfe:	e000      	b.n	8004c02 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8004c00:	bf00      	nop

	return res;
 8004c02:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c04:	4618      	mov	r0, r3
 8004c06:	3718      	adds	r7, #24
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	bd80      	pop	{r7, pc}

08004c0c <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	b088      	sub	sp, #32
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
 8004c14:	6039      	str	r1, [r7, #0]
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	613b      	str	r3, [r7, #16]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	2200      	movs	r2, #0
 8004c20:	759a      	strb	r2, [r3, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	69db      	ldr	r3, [r3, #28]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	f000 80c9 	beq.w	8004dbe <get_fileinfo+0x1b2>
		get_xdir_info(fs->dirbuf, fno);
		return;
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c30:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004c34:	d032      	beq.n	8004c9c <get_fileinfo+0x90>
			i = j = 0;
 8004c36:	2300      	movs	r3, #0
 8004c38:	61bb      	str	r3, [r7, #24]
 8004c3a:	69bb      	ldr	r3, [r7, #24]
 8004c3c:	61fb      	str	r3, [r7, #28]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 8004c3e:	e01b      	b.n	8004c78 <get_fileinfo+0x6c>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 8004c40:	89fb      	ldrh	r3, [r7, #14]
 8004c42:	2100      	movs	r1, #0
 8004c44:	4618      	mov	r0, r3
 8004c46:	f7fe fdf9 	bl	800383c <ff_convert>
 8004c4a:	4603      	mov	r3, r0
 8004c4c:	81fb      	strh	r3, [r7, #14]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 8004c4e:	89fb      	ldrh	r3, [r7, #14]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d102      	bne.n	8004c5a <get_fileinfo+0x4e>
 8004c54:	2300      	movs	r3, #0
 8004c56:	61fb      	str	r3, [r7, #28]
 8004c58:	e01a      	b.n	8004c90 <get_fileinfo+0x84>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 8004c5a:	69fb      	ldr	r3, [r7, #28]
 8004c5c:	2bfe      	cmp	r3, #254	; 0xfe
 8004c5e:	d902      	bls.n	8004c66 <get_fileinfo+0x5a>
 8004c60:	2300      	movs	r3, #0
 8004c62:	61fb      	str	r3, [r7, #28]
 8004c64:	e014      	b.n	8004c90 <get_fileinfo+0x84>
				fno->fname[i++] = (TCHAR)w;
 8004c66:	69fb      	ldr	r3, [r7, #28]
 8004c68:	1c5a      	adds	r2, r3, #1
 8004c6a:	61fa      	str	r2, [r7, #28]
 8004c6c:	89fa      	ldrh	r2, [r7, #14]
 8004c6e:	b2d1      	uxtb	r1, r2
 8004c70:	683a      	ldr	r2, [r7, #0]
 8004c72:	4413      	add	r3, r2
 8004c74:	460a      	mov	r2, r1
 8004c76:	759a      	strb	r2, [r3, #22]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 8004c78:	693b      	ldr	r3, [r7, #16]
 8004c7a:	691a      	ldr	r2, [r3, #16]
 8004c7c:	69bb      	ldr	r3, [r7, #24]
 8004c7e:	1c59      	adds	r1, r3, #1
 8004c80:	61b9      	str	r1, [r7, #24]
 8004c82:	005b      	lsls	r3, r3, #1
 8004c84:	4413      	add	r3, r2
 8004c86:	881b      	ldrh	r3, [r3, #0]
 8004c88:	81fb      	strh	r3, [r7, #14]
 8004c8a:	89fb      	ldrh	r3, [r7, #14]
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d1d7      	bne.n	8004c40 <get_fileinfo+0x34>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 8004c90:	683a      	ldr	r2, [r7, #0]
 8004c92:	69fb      	ldr	r3, [r7, #28]
 8004c94:	4413      	add	r3, r2
 8004c96:	3316      	adds	r3, #22
 8004c98:	2200      	movs	r2, #0
 8004c9a:	701a      	strb	r2, [r3, #0]
		}
	}

	i = j = 0;
 8004c9c:	2300      	movs	r3, #0
 8004c9e:	61bb      	str	r3, [r7, #24]
 8004ca0:	69bb      	ldr	r3, [r7, #24]
 8004ca2:	61fb      	str	r3, [r7, #28]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 8004ca4:	683a      	ldr	r2, [r7, #0]
 8004ca6:	69fb      	ldr	r3, [r7, #28]
 8004ca8:	4413      	add	r3, r2
 8004caa:	3316      	adds	r3, #22
 8004cac:	781b      	ldrb	r3, [r3, #0]
 8004cae:	81bb      	strh	r3, [r7, #12]
	while (i < 11) {		/* Copy name body and extension */
 8004cb0:	e04c      	b.n	8004d4c <get_fileinfo+0x140>
		c = (TCHAR)dp->dir[i++];
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6a1a      	ldr	r2, [r3, #32]
 8004cb6:	69fb      	ldr	r3, [r7, #28]
 8004cb8:	1c59      	adds	r1, r3, #1
 8004cba:	61f9      	str	r1, [r7, #28]
 8004cbc:	4413      	add	r3, r2
 8004cbe:	781b      	ldrb	r3, [r3, #0]
 8004cc0:	75fb      	strb	r3, [r7, #23]
		if (c == ' ') continue;				/* Skip padding spaces */
 8004cc2:	7dfb      	ldrb	r3, [r7, #23]
 8004cc4:	2b20      	cmp	r3, #32
 8004cc6:	d100      	bne.n	8004cca <get_fileinfo+0xbe>
 8004cc8:	e040      	b.n	8004d4c <get_fileinfo+0x140>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 8004cca:	7dfb      	ldrb	r3, [r7, #23]
 8004ccc:	2b05      	cmp	r3, #5
 8004cce:	d101      	bne.n	8004cd4 <get_fileinfo+0xc8>
 8004cd0:	23e5      	movs	r3, #229	; 0xe5
 8004cd2:	75fb      	strb	r3, [r7, #23]
		if (i == 9) {						/* Insert a . if extension is exist */
 8004cd4:	69fb      	ldr	r3, [r7, #28]
 8004cd6:	2b09      	cmp	r3, #9
 8004cd8:	d10f      	bne.n	8004cfa <get_fileinfo+0xee>
			if (!lfv) fno->fname[j] = '.';
 8004cda:	89bb      	ldrh	r3, [r7, #12]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d105      	bne.n	8004cec <get_fileinfo+0xe0>
 8004ce0:	683a      	ldr	r2, [r7, #0]
 8004ce2:	69bb      	ldr	r3, [r7, #24]
 8004ce4:	4413      	add	r3, r2
 8004ce6:	3316      	adds	r3, #22
 8004ce8:	222e      	movs	r2, #46	; 0x2e
 8004cea:	701a      	strb	r2, [r3, #0]
			fno->altname[j++] = '.';
 8004cec:	69bb      	ldr	r3, [r7, #24]
 8004cee:	1c5a      	adds	r2, r3, #1
 8004cf0:	61ba      	str	r2, [r7, #24]
 8004cf2:	683a      	ldr	r2, [r7, #0]
 8004cf4:	4413      	add	r3, r2
 8004cf6:	222e      	movs	r2, #46	; 0x2e
 8004cf8:	725a      	strb	r2, [r3, #9]
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 8004cfa:	683a      	ldr	r2, [r7, #0]
 8004cfc:	69bb      	ldr	r3, [r7, #24]
 8004cfe:	4413      	add	r3, r2
 8004d00:	3309      	adds	r3, #9
 8004d02:	7dfa      	ldrb	r2, [r7, #23]
 8004d04:	701a      	strb	r2, [r3, #0]
		if (!lfv) {
 8004d06:	89bb      	ldrh	r3, [r7, #12]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d11c      	bne.n	8004d46 <get_fileinfo+0x13a>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 8004d0c:	7dfb      	ldrb	r3, [r7, #23]
 8004d0e:	2b40      	cmp	r3, #64	; 0x40
 8004d10:	d913      	bls.n	8004d3a <get_fileinfo+0x12e>
 8004d12:	7dfb      	ldrb	r3, [r7, #23]
 8004d14:	2b5a      	cmp	r3, #90	; 0x5a
 8004d16:	d810      	bhi.n	8004d3a <get_fileinfo+0x12e>
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6a1b      	ldr	r3, [r3, #32]
 8004d1c:	330c      	adds	r3, #12
 8004d1e:	781b      	ldrb	r3, [r3, #0]
 8004d20:	461a      	mov	r2, r3
 8004d22:	69fb      	ldr	r3, [r7, #28]
 8004d24:	2b08      	cmp	r3, #8
 8004d26:	d901      	bls.n	8004d2c <get_fileinfo+0x120>
 8004d28:	2310      	movs	r3, #16
 8004d2a:	e000      	b.n	8004d2e <get_fileinfo+0x122>
 8004d2c:	2308      	movs	r3, #8
 8004d2e:	4013      	ands	r3, r2
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d002      	beq.n	8004d3a <get_fileinfo+0x12e>
				c += 0x20;			/* To lower */
 8004d34:	7dfb      	ldrb	r3, [r7, #23]
 8004d36:	3320      	adds	r3, #32
 8004d38:	75fb      	strb	r3, [r7, #23]
			}
			fno->fname[j] = c;
 8004d3a:	683a      	ldr	r2, [r7, #0]
 8004d3c:	69bb      	ldr	r3, [r7, #24]
 8004d3e:	4413      	add	r3, r2
 8004d40:	3316      	adds	r3, #22
 8004d42:	7dfa      	ldrb	r2, [r7, #23]
 8004d44:	701a      	strb	r2, [r3, #0]
		}
		j++;
 8004d46:	69bb      	ldr	r3, [r7, #24]
 8004d48:	3301      	adds	r3, #1
 8004d4a:	61bb      	str	r3, [r7, #24]
	while (i < 11) {		/* Copy name body and extension */
 8004d4c:	69fb      	ldr	r3, [r7, #28]
 8004d4e:	2b0a      	cmp	r3, #10
 8004d50:	d9af      	bls.n	8004cb2 <get_fileinfo+0xa6>
	}
	if (!lfv) {
 8004d52:	89bb      	ldrh	r3, [r7, #12]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d10d      	bne.n	8004d74 <get_fileinfo+0x168>
		fno->fname[j] = 0;
 8004d58:	683a      	ldr	r2, [r7, #0]
 8004d5a:	69bb      	ldr	r3, [r7, #24]
 8004d5c:	4413      	add	r3, r2
 8004d5e:	3316      	adds	r3, #22
 8004d60:	2200      	movs	r2, #0
 8004d62:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	6a1b      	ldr	r3, [r3, #32]
 8004d68:	330c      	adds	r3, #12
 8004d6a:	781b      	ldrb	r3, [r3, #0]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d101      	bne.n	8004d74 <get_fileinfo+0x168>
 8004d70:	2300      	movs	r3, #0
 8004d72:	61bb      	str	r3, [r7, #24]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 8004d74:	683a      	ldr	r2, [r7, #0]
 8004d76:	69bb      	ldr	r3, [r7, #24]
 8004d78:	4413      	add	r3, r2
 8004d7a:	3309      	adds	r3, #9
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	701a      	strb	r2, [r3, #0]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	6a1b      	ldr	r3, [r3, #32]
 8004d84:	7ada      	ldrb	r2, [r3, #11]
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6a1b      	ldr	r3, [r3, #32]
 8004d8e:	331c      	adds	r3, #28
 8004d90:	4618      	mov	r0, r3
 8004d92:	f7fe fecf 	bl	8003b34 <ld_dword>
 8004d96:	4602      	mov	r2, r0
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	6a1b      	ldr	r3, [r3, #32]
 8004da0:	3316      	adds	r3, #22
 8004da2:	4618      	mov	r0, r3
 8004da4:	f7fe fec6 	bl	8003b34 <ld_dword>
 8004da8:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 8004daa:	68bb      	ldr	r3, [r7, #8]
 8004dac:	b29a      	uxth	r2, r3
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	80da      	strh	r2, [r3, #6]
 8004db2:	68bb      	ldr	r3, [r7, #8]
 8004db4:	0c1b      	lsrs	r3, r3, #16
 8004db6:	b29a      	uxth	r2, r3
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	809a      	strh	r2, [r3, #4]
 8004dbc:	e000      	b.n	8004dc0 <get_fileinfo+0x1b4>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8004dbe:	bf00      	nop
}
 8004dc0:	3720      	adds	r7, #32
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	bd80      	pop	{r7, pc}
	...

08004dc8 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b08a      	sub	sp, #40	; 0x28
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
 8004dd0:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8004dd2:	683b      	ldr	r3, [r7, #0]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	613b      	str	r3, [r7, #16]
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	691b      	ldr	r3, [r3, #16]
 8004dde:	60fb      	str	r3, [r7, #12]
 8004de0:	2300      	movs	r3, #0
 8004de2:	617b      	str	r3, [r7, #20]
 8004de4:	697b      	ldr	r3, [r7, #20]
 8004de6:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8004de8:	69bb      	ldr	r3, [r7, #24]
 8004dea:	1c5a      	adds	r2, r3, #1
 8004dec:	61ba      	str	r2, [r7, #24]
 8004dee:	693a      	ldr	r2, [r7, #16]
 8004df0:	4413      	add	r3, r2
 8004df2:	781b      	ldrb	r3, [r3, #0]
 8004df4:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8004df6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004df8:	2b1f      	cmp	r3, #31
 8004dfa:	d940      	bls.n	8004e7e <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8004dfc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004dfe:	2b2f      	cmp	r3, #47	; 0x2f
 8004e00:	d006      	beq.n	8004e10 <create_name+0x48>
 8004e02:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004e04:	2b5c      	cmp	r3, #92	; 0x5c
 8004e06:	d110      	bne.n	8004e2a <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8004e08:	e002      	b.n	8004e10 <create_name+0x48>
 8004e0a:	69bb      	ldr	r3, [r7, #24]
 8004e0c:	3301      	adds	r3, #1
 8004e0e:	61bb      	str	r3, [r7, #24]
 8004e10:	693a      	ldr	r2, [r7, #16]
 8004e12:	69bb      	ldr	r3, [r7, #24]
 8004e14:	4413      	add	r3, r2
 8004e16:	781b      	ldrb	r3, [r3, #0]
 8004e18:	2b2f      	cmp	r3, #47	; 0x2f
 8004e1a:	d0f6      	beq.n	8004e0a <create_name+0x42>
 8004e1c:	693a      	ldr	r2, [r7, #16]
 8004e1e:	69bb      	ldr	r3, [r7, #24]
 8004e20:	4413      	add	r3, r2
 8004e22:	781b      	ldrb	r3, [r3, #0]
 8004e24:	2b5c      	cmp	r3, #92	; 0x5c
 8004e26:	d0f0      	beq.n	8004e0a <create_name+0x42>
			break;
 8004e28:	e02a      	b.n	8004e80 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8004e2a:	697b      	ldr	r3, [r7, #20]
 8004e2c:	2bfe      	cmp	r3, #254	; 0xfe
 8004e2e:	d901      	bls.n	8004e34 <create_name+0x6c>
 8004e30:	2306      	movs	r3, #6
 8004e32:	e17d      	b.n	8005130 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 8004e34:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004e36:	b2db      	uxtb	r3, r3
 8004e38:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8004e3a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004e3c:	2101      	movs	r1, #1
 8004e3e:	4618      	mov	r0, r3
 8004e40:	f7fe fcfc 	bl	800383c <ff_convert>
 8004e44:	4603      	mov	r3, r0
 8004e46:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8004e48:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d101      	bne.n	8004e52 <create_name+0x8a>
 8004e4e:	2306      	movs	r3, #6
 8004e50:	e16e      	b.n	8005130 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8004e52:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004e54:	2b7f      	cmp	r3, #127	; 0x7f
 8004e56:	d809      	bhi.n	8004e6c <create_name+0xa4>
 8004e58:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004e5a:	4619      	mov	r1, r3
 8004e5c:	488d      	ldr	r0, [pc, #564]	; (8005094 <create_name+0x2cc>)
 8004e5e:	f7fe ff15 	bl	8003c8c <chk_chr>
 8004e62:	4603      	mov	r3, r0
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d001      	beq.n	8004e6c <create_name+0xa4>
 8004e68:	2306      	movs	r3, #6
 8004e6a:	e161      	b.n	8005130 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 8004e6c:	697b      	ldr	r3, [r7, #20]
 8004e6e:	1c5a      	adds	r2, r3, #1
 8004e70:	617a      	str	r2, [r7, #20]
 8004e72:	005b      	lsls	r3, r3, #1
 8004e74:	68fa      	ldr	r2, [r7, #12]
 8004e76:	4413      	add	r3, r2
 8004e78:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004e7a:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8004e7c:	e7b4      	b.n	8004de8 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8004e7e:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8004e80:	693a      	ldr	r2, [r7, #16]
 8004e82:	69bb      	ldr	r3, [r7, #24]
 8004e84:	441a      	add	r2, r3
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8004e8a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004e8c:	2b1f      	cmp	r3, #31
 8004e8e:	d801      	bhi.n	8004e94 <create_name+0xcc>
 8004e90:	2304      	movs	r3, #4
 8004e92:	e000      	b.n	8004e96 <create_name+0xce>
 8004e94:	2300      	movs	r3, #0
 8004e96:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8004e9a:	e011      	b.n	8004ec0 <create_name+0xf8>
		w = lfn[di - 1];
 8004e9c:	697b      	ldr	r3, [r7, #20]
 8004e9e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8004ea2:	3b01      	subs	r3, #1
 8004ea4:	005b      	lsls	r3, r3, #1
 8004ea6:	68fa      	ldr	r2, [r7, #12]
 8004ea8:	4413      	add	r3, r2
 8004eaa:	881b      	ldrh	r3, [r3, #0]
 8004eac:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 8004eae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004eb0:	2b20      	cmp	r3, #32
 8004eb2:	d002      	beq.n	8004eba <create_name+0xf2>
 8004eb4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004eb6:	2b2e      	cmp	r3, #46	; 0x2e
 8004eb8:	d106      	bne.n	8004ec8 <create_name+0x100>
		di--;
 8004eba:	697b      	ldr	r3, [r7, #20]
 8004ebc:	3b01      	subs	r3, #1
 8004ebe:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8004ec0:	697b      	ldr	r3, [r7, #20]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d1ea      	bne.n	8004e9c <create_name+0xd4>
 8004ec6:	e000      	b.n	8004eca <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8004ec8:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 8004eca:	697b      	ldr	r3, [r7, #20]
 8004ecc:	005b      	lsls	r3, r3, #1
 8004ece:	68fa      	ldr	r2, [r7, #12]
 8004ed0:	4413      	add	r3, r2
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8004ed6:	697b      	ldr	r3, [r7, #20]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d101      	bne.n	8004ee0 <create_name+0x118>
 8004edc:	2306      	movs	r3, #6
 8004ede:	e127      	b.n	8005130 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	3324      	adds	r3, #36	; 0x24
 8004ee4:	220b      	movs	r2, #11
 8004ee6:	2120      	movs	r1, #32
 8004ee8:	4618      	mov	r0, r3
 8004eea:	f7fe fe8d 	bl	8003c08 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8004eee:	2300      	movs	r3, #0
 8004ef0:	61bb      	str	r3, [r7, #24]
 8004ef2:	e002      	b.n	8004efa <create_name+0x132>
 8004ef4:	69bb      	ldr	r3, [r7, #24]
 8004ef6:	3301      	adds	r3, #1
 8004ef8:	61bb      	str	r3, [r7, #24]
 8004efa:	69bb      	ldr	r3, [r7, #24]
 8004efc:	005b      	lsls	r3, r3, #1
 8004efe:	68fa      	ldr	r2, [r7, #12]
 8004f00:	4413      	add	r3, r2
 8004f02:	881b      	ldrh	r3, [r3, #0]
 8004f04:	2b20      	cmp	r3, #32
 8004f06:	d0f5      	beq.n	8004ef4 <create_name+0x12c>
 8004f08:	69bb      	ldr	r3, [r7, #24]
 8004f0a:	005b      	lsls	r3, r3, #1
 8004f0c:	68fa      	ldr	r2, [r7, #12]
 8004f0e:	4413      	add	r3, r2
 8004f10:	881b      	ldrh	r3, [r3, #0]
 8004f12:	2b2e      	cmp	r3, #46	; 0x2e
 8004f14:	d0ee      	beq.n	8004ef4 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 8004f16:	69bb      	ldr	r3, [r7, #24]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d009      	beq.n	8004f30 <create_name+0x168>
 8004f1c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004f20:	f043 0303 	orr.w	r3, r3, #3
 8004f24:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8004f28:	e002      	b.n	8004f30 <create_name+0x168>
 8004f2a:	697b      	ldr	r3, [r7, #20]
 8004f2c:	3b01      	subs	r3, #1
 8004f2e:	617b      	str	r3, [r7, #20]
 8004f30:	697b      	ldr	r3, [r7, #20]
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d009      	beq.n	8004f4a <create_name+0x182>
 8004f36:	697b      	ldr	r3, [r7, #20]
 8004f38:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8004f3c:	3b01      	subs	r3, #1
 8004f3e:	005b      	lsls	r3, r3, #1
 8004f40:	68fa      	ldr	r2, [r7, #12]
 8004f42:	4413      	add	r3, r2
 8004f44:	881b      	ldrh	r3, [r3, #0]
 8004f46:	2b2e      	cmp	r3, #46	; 0x2e
 8004f48:	d1ef      	bne.n	8004f2a <create_name+0x162>

	i = b = 0; ni = 8;
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8004f50:	2300      	movs	r3, #0
 8004f52:	623b      	str	r3, [r7, #32]
 8004f54:	2308      	movs	r3, #8
 8004f56:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8004f58:	69bb      	ldr	r3, [r7, #24]
 8004f5a:	1c5a      	adds	r2, r3, #1
 8004f5c:	61ba      	str	r2, [r7, #24]
 8004f5e:	005b      	lsls	r3, r3, #1
 8004f60:	68fa      	ldr	r2, [r7, #12]
 8004f62:	4413      	add	r3, r2
 8004f64:	881b      	ldrh	r3, [r3, #0]
 8004f66:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8004f68:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	f000 8090 	beq.w	8005090 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8004f70:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004f72:	2b20      	cmp	r3, #32
 8004f74:	d006      	beq.n	8004f84 <create_name+0x1bc>
 8004f76:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004f78:	2b2e      	cmp	r3, #46	; 0x2e
 8004f7a:	d10a      	bne.n	8004f92 <create_name+0x1ca>
 8004f7c:	69ba      	ldr	r2, [r7, #24]
 8004f7e:	697b      	ldr	r3, [r7, #20]
 8004f80:	429a      	cmp	r2, r3
 8004f82:	d006      	beq.n	8004f92 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8004f84:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004f88:	f043 0303 	orr.w	r3, r3, #3
 8004f8c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004f90:	e07d      	b.n	800508e <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8004f92:	6a3a      	ldr	r2, [r7, #32]
 8004f94:	69fb      	ldr	r3, [r7, #28]
 8004f96:	429a      	cmp	r2, r3
 8004f98:	d203      	bcs.n	8004fa2 <create_name+0x1da>
 8004f9a:	69ba      	ldr	r2, [r7, #24]
 8004f9c:	697b      	ldr	r3, [r7, #20]
 8004f9e:	429a      	cmp	r2, r3
 8004fa0:	d123      	bne.n	8004fea <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 8004fa2:	69fb      	ldr	r3, [r7, #28]
 8004fa4:	2b0b      	cmp	r3, #11
 8004fa6:	d106      	bne.n	8004fb6 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8004fa8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004fac:	f043 0303 	orr.w	r3, r3, #3
 8004fb0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004fb4:	e075      	b.n	80050a2 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8004fb6:	69ba      	ldr	r2, [r7, #24]
 8004fb8:	697b      	ldr	r3, [r7, #20]
 8004fba:	429a      	cmp	r2, r3
 8004fbc:	d005      	beq.n	8004fca <create_name+0x202>
 8004fbe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004fc2:	f043 0303 	orr.w	r3, r3, #3
 8004fc6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 8004fca:	69ba      	ldr	r2, [r7, #24]
 8004fcc:	697b      	ldr	r3, [r7, #20]
 8004fce:	429a      	cmp	r2, r3
 8004fd0:	d866      	bhi.n	80050a0 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8004fd2:	697b      	ldr	r3, [r7, #20]
 8004fd4:	61bb      	str	r3, [r7, #24]
 8004fd6:	2308      	movs	r3, #8
 8004fd8:	623b      	str	r3, [r7, #32]
 8004fda:	230b      	movs	r3, #11
 8004fdc:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8004fde:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004fe2:	009b      	lsls	r3, r3, #2
 8004fe4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8004fe8:	e051      	b.n	800508e <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8004fea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004fec:	2b7f      	cmp	r3, #127	; 0x7f
 8004fee:	d914      	bls.n	800501a <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8004ff0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004ff2:	2100      	movs	r1, #0
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	f7fe fc21 	bl	800383c <ff_convert>
 8004ffa:	4603      	mov	r3, r0
 8004ffc:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8004ffe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005000:	2b00      	cmp	r3, #0
 8005002:	d004      	beq.n	800500e <create_name+0x246>
 8005004:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005006:	3b80      	subs	r3, #128	; 0x80
 8005008:	4a23      	ldr	r2, [pc, #140]	; (8005098 <create_name+0x2d0>)
 800500a:	5cd3      	ldrb	r3, [r2, r3]
 800500c:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800500e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005012:	f043 0302 	orr.w	r3, r3, #2
 8005016:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800501a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800501c:	2b00      	cmp	r3, #0
 800501e:	d007      	beq.n	8005030 <create_name+0x268>
 8005020:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005022:	4619      	mov	r1, r3
 8005024:	481d      	ldr	r0, [pc, #116]	; (800509c <create_name+0x2d4>)
 8005026:	f7fe fe31 	bl	8003c8c <chk_chr>
 800502a:	4603      	mov	r3, r0
 800502c:	2b00      	cmp	r3, #0
 800502e:	d008      	beq.n	8005042 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8005030:	235f      	movs	r3, #95	; 0x5f
 8005032:	84bb      	strh	r3, [r7, #36]	; 0x24
 8005034:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005038:	f043 0303 	orr.w	r3, r3, #3
 800503c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005040:	e01b      	b.n	800507a <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8005042:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005044:	2b40      	cmp	r3, #64	; 0x40
 8005046:	d909      	bls.n	800505c <create_name+0x294>
 8005048:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800504a:	2b5a      	cmp	r3, #90	; 0x5a
 800504c:	d806      	bhi.n	800505c <create_name+0x294>
					b |= 2;
 800504e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005052:	f043 0302 	orr.w	r3, r3, #2
 8005056:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800505a:	e00e      	b.n	800507a <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800505c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800505e:	2b60      	cmp	r3, #96	; 0x60
 8005060:	d90b      	bls.n	800507a <create_name+0x2b2>
 8005062:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005064:	2b7a      	cmp	r3, #122	; 0x7a
 8005066:	d808      	bhi.n	800507a <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8005068:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800506c:	f043 0301 	orr.w	r3, r3, #1
 8005070:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8005074:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005076:	3b20      	subs	r3, #32
 8005078:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800507a:	6a3b      	ldr	r3, [r7, #32]
 800507c:	1c5a      	adds	r2, r3, #1
 800507e:	623a      	str	r2, [r7, #32]
 8005080:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005082:	b2d1      	uxtb	r1, r2
 8005084:	687a      	ldr	r2, [r7, #4]
 8005086:	4413      	add	r3, r2
 8005088:	460a      	mov	r2, r1
 800508a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 800508e:	e763      	b.n	8004f58 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8005090:	bf00      	nop
 8005092:	e006      	b.n	80050a2 <create_name+0x2da>
 8005094:	08005e90 	.word	0x08005e90
 8005098:	080062a0 	.word	0x080062a0
 800509c:	08005e9c 	.word	0x08005e9c
			if (si > di) break;			/* No extension */
 80050a0:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80050a8:	2be5      	cmp	r3, #229	; 0xe5
 80050aa:	d103      	bne.n	80050b4 <create_name+0x2ec>
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2205      	movs	r2, #5
 80050b0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 80050b4:	69fb      	ldr	r3, [r7, #28]
 80050b6:	2b08      	cmp	r3, #8
 80050b8:	d104      	bne.n	80050c4 <create_name+0x2fc>
 80050ba:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80050be:	009b      	lsls	r3, r3, #2
 80050c0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 80050c4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80050c8:	f003 030c 	and.w	r3, r3, #12
 80050cc:	2b0c      	cmp	r3, #12
 80050ce:	d005      	beq.n	80050dc <create_name+0x314>
 80050d0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80050d4:	f003 0303 	and.w	r3, r3, #3
 80050d8:	2b03      	cmp	r3, #3
 80050da:	d105      	bne.n	80050e8 <create_name+0x320>
 80050dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80050e0:	f043 0302 	orr.w	r3, r3, #2
 80050e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 80050e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80050ec:	f003 0302 	and.w	r3, r3, #2
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d117      	bne.n	8005124 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 80050f4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80050f8:	f003 0303 	and.w	r3, r3, #3
 80050fc:	2b01      	cmp	r3, #1
 80050fe:	d105      	bne.n	800510c <create_name+0x344>
 8005100:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005104:	f043 0310 	orr.w	r3, r3, #16
 8005108:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800510c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005110:	f003 030c 	and.w	r3, r3, #12
 8005114:	2b04      	cmp	r3, #4
 8005116:	d105      	bne.n	8005124 <create_name+0x35c>
 8005118:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800511c:	f043 0308 	orr.w	r3, r3, #8
 8005120:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800512a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 800512e:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8005130:	4618      	mov	r0, r3
 8005132:	3728      	adds	r7, #40	; 0x28
 8005134:	46bd      	mov	sp, r7
 8005136:	bd80      	pop	{r7, pc}

08005138 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8005138:	b580      	push	{r7, lr}
 800513a:	b086      	sub	sp, #24
 800513c:	af00      	add	r7, sp, #0
 800513e:	6078      	str	r0, [r7, #4]
 8005140:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8005146:	693b      	ldr	r3, [r7, #16]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800514c:	e002      	b.n	8005154 <follow_path+0x1c>
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	3301      	adds	r3, #1
 8005152:	603b      	str	r3, [r7, #0]
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	781b      	ldrb	r3, [r3, #0]
 8005158:	2b2f      	cmp	r3, #47	; 0x2f
 800515a:	d0f8      	beq.n	800514e <follow_path+0x16>
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	781b      	ldrb	r3, [r3, #0]
 8005160:	2b5c      	cmp	r3, #92	; 0x5c
 8005162:	d0f4      	beq.n	800514e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8005164:	693b      	ldr	r3, [r7, #16]
 8005166:	2200      	movs	r2, #0
 8005168:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	781b      	ldrb	r3, [r3, #0]
 800516e:	2b1f      	cmp	r3, #31
 8005170:	d80a      	bhi.n	8005188 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	2280      	movs	r2, #128	; 0x80
 8005176:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800517a:	2100      	movs	r1, #0
 800517c:	6878      	ldr	r0, [r7, #4]
 800517e:	f7ff f96b 	bl	8004458 <dir_sdi>
 8005182:	4603      	mov	r3, r0
 8005184:	75fb      	strb	r3, [r7, #23]
 8005186:	e048      	b.n	800521a <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8005188:	463b      	mov	r3, r7
 800518a:	4619      	mov	r1, r3
 800518c:	6878      	ldr	r0, [r7, #4]
 800518e:	f7ff fe1b 	bl	8004dc8 <create_name>
 8005192:	4603      	mov	r3, r0
 8005194:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8005196:	7dfb      	ldrb	r3, [r7, #23]
 8005198:	2b00      	cmp	r3, #0
 800519a:	d139      	bne.n	8005210 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 800519c:	6878      	ldr	r0, [r7, #4]
 800519e:	f7ff fc75 	bl	8004a8c <dir_find>
 80051a2:	4603      	mov	r3, r0
 80051a4:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80051ac:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80051ae:	7dfb      	ldrb	r3, [r7, #23]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d00a      	beq.n	80051ca <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80051b4:	7dfb      	ldrb	r3, [r7, #23]
 80051b6:	2b04      	cmp	r3, #4
 80051b8:	d12c      	bne.n	8005214 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80051ba:	7afb      	ldrb	r3, [r7, #11]
 80051bc:	f003 0304 	and.w	r3, r3, #4
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d127      	bne.n	8005214 <follow_path+0xdc>
 80051c4:	2305      	movs	r3, #5
 80051c6:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 80051c8:	e024      	b.n	8005214 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80051ca:	7afb      	ldrb	r3, [r7, #11]
 80051cc:	f003 0304 	and.w	r3, r3, #4
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d121      	bne.n	8005218 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80051d4:	693b      	ldr	r3, [r7, #16]
 80051d6:	799b      	ldrb	r3, [r3, #6]
 80051d8:	f003 0310 	and.w	r3, r3, #16
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d102      	bne.n	80051e6 <follow_path+0xae>
				res = FR_NO_PATH; break;
 80051e0:	2305      	movs	r3, #5
 80051e2:	75fb      	strb	r3, [r7, #23]
 80051e4:	e019      	b.n	800521a <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	695b      	ldr	r3, [r3, #20]
 80051f0:	68fa      	ldr	r2, [r7, #12]
 80051f2:	8992      	ldrh	r2, [r2, #12]
 80051f4:	fbb3 f0f2 	udiv	r0, r3, r2
 80051f8:	fb00 f202 	mul.w	r2, r0, r2
 80051fc:	1a9b      	subs	r3, r3, r2
 80051fe:	440b      	add	r3, r1
 8005200:	4619      	mov	r1, r3
 8005202:	68f8      	ldr	r0, [r7, #12]
 8005204:	f7ff fa87 	bl	8004716 <ld_clust>
 8005208:	4602      	mov	r2, r0
 800520a:	693b      	ldr	r3, [r7, #16]
 800520c:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800520e:	e7bb      	b.n	8005188 <follow_path+0x50>
			if (res != FR_OK) break;
 8005210:	bf00      	nop
 8005212:	e002      	b.n	800521a <follow_path+0xe2>
				break;
 8005214:	bf00      	nop
 8005216:	e000      	b.n	800521a <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8005218:	bf00      	nop
			}
		}
	}

	return res;
 800521a:	7dfb      	ldrb	r3, [r7, #23]
}
 800521c:	4618      	mov	r0, r3
 800521e:	3718      	adds	r7, #24
 8005220:	46bd      	mov	sp, r7
 8005222:	bd80      	pop	{r7, pc}

08005224 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8005224:	b480      	push	{r7}
 8005226:	b087      	sub	sp, #28
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800522c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005230:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	2b00      	cmp	r3, #0
 8005238:	d031      	beq.n	800529e <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	617b      	str	r3, [r7, #20]
 8005240:	e002      	b.n	8005248 <get_ldnumber+0x24>
 8005242:	697b      	ldr	r3, [r7, #20]
 8005244:	3301      	adds	r3, #1
 8005246:	617b      	str	r3, [r7, #20]
 8005248:	697b      	ldr	r3, [r7, #20]
 800524a:	781b      	ldrb	r3, [r3, #0]
 800524c:	2b1f      	cmp	r3, #31
 800524e:	d903      	bls.n	8005258 <get_ldnumber+0x34>
 8005250:	697b      	ldr	r3, [r7, #20]
 8005252:	781b      	ldrb	r3, [r3, #0]
 8005254:	2b3a      	cmp	r3, #58	; 0x3a
 8005256:	d1f4      	bne.n	8005242 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8005258:	697b      	ldr	r3, [r7, #20]
 800525a:	781b      	ldrb	r3, [r3, #0]
 800525c:	2b3a      	cmp	r3, #58	; 0x3a
 800525e:	d11c      	bne.n	800529a <get_ldnumber+0x76>
			tp = *path;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	1c5a      	adds	r2, r3, #1
 800526a:	60fa      	str	r2, [r7, #12]
 800526c:	781b      	ldrb	r3, [r3, #0]
 800526e:	3b30      	subs	r3, #48	; 0x30
 8005270:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8005272:	68bb      	ldr	r3, [r7, #8]
 8005274:	2b09      	cmp	r3, #9
 8005276:	d80e      	bhi.n	8005296 <get_ldnumber+0x72>
 8005278:	68fa      	ldr	r2, [r7, #12]
 800527a:	697b      	ldr	r3, [r7, #20]
 800527c:	429a      	cmp	r2, r3
 800527e:	d10a      	bne.n	8005296 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8005280:	68bb      	ldr	r3, [r7, #8]
 8005282:	2b00      	cmp	r3, #0
 8005284:	d107      	bne.n	8005296 <get_ldnumber+0x72>
					vol = (int)i;
 8005286:	68bb      	ldr	r3, [r7, #8]
 8005288:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800528a:	697b      	ldr	r3, [r7, #20]
 800528c:	3301      	adds	r3, #1
 800528e:	617b      	str	r3, [r7, #20]
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	697a      	ldr	r2, [r7, #20]
 8005294:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8005296:	693b      	ldr	r3, [r7, #16]
 8005298:	e002      	b.n	80052a0 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800529a:	2300      	movs	r3, #0
 800529c:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800529e:	693b      	ldr	r3, [r7, #16]
}
 80052a0:	4618      	mov	r0, r3
 80052a2:	371c      	adds	r7, #28
 80052a4:	46bd      	mov	sp, r7
 80052a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052aa:	4770      	bx	lr

080052ac <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80052ac:	b580      	push	{r7, lr}
 80052ae:	b082      	sub	sp, #8
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
 80052b4:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	2200      	movs	r2, #0
 80052ba:	70da      	strb	r2, [r3, #3]
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80052c2:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80052c4:	6839      	ldr	r1, [r7, #0]
 80052c6:	6878      	ldr	r0, [r7, #4]
 80052c8:	f7fe fdf2 	bl	8003eb0 <move_window>
 80052cc:	4603      	mov	r3, r0
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d001      	beq.n	80052d6 <check_fs+0x2a>
 80052d2:	2304      	movs	r3, #4
 80052d4:	e038      	b.n	8005348 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	3338      	adds	r3, #56	; 0x38
 80052da:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80052de:	4618      	mov	r0, r3
 80052e0:	f7fe fc10 	bl	8003b04 <ld_word>
 80052e4:	4603      	mov	r3, r0
 80052e6:	461a      	mov	r2, r3
 80052e8:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80052ec:	429a      	cmp	r2, r3
 80052ee:	d001      	beq.n	80052f4 <check_fs+0x48>
 80052f0:	2303      	movs	r3, #3
 80052f2:	e029      	b.n	8005348 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80052fa:	2be9      	cmp	r3, #233	; 0xe9
 80052fc:	d009      	beq.n	8005312 <check_fs+0x66>
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005304:	2beb      	cmp	r3, #235	; 0xeb
 8005306:	d11e      	bne.n	8005346 <check_fs+0x9a>
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800530e:	2b90      	cmp	r3, #144	; 0x90
 8005310:	d119      	bne.n	8005346 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	3338      	adds	r3, #56	; 0x38
 8005316:	3336      	adds	r3, #54	; 0x36
 8005318:	4618      	mov	r0, r3
 800531a:	f7fe fc0b 	bl	8003b34 <ld_dword>
 800531e:	4603      	mov	r3, r0
 8005320:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005324:	4a0a      	ldr	r2, [pc, #40]	; (8005350 <check_fs+0xa4>)
 8005326:	4293      	cmp	r3, r2
 8005328:	d101      	bne.n	800532e <check_fs+0x82>
 800532a:	2300      	movs	r3, #0
 800532c:	e00c      	b.n	8005348 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	3338      	adds	r3, #56	; 0x38
 8005332:	3352      	adds	r3, #82	; 0x52
 8005334:	4618      	mov	r0, r3
 8005336:	f7fe fbfd 	bl	8003b34 <ld_dword>
 800533a:	4603      	mov	r3, r0
 800533c:	4a05      	ldr	r2, [pc, #20]	; (8005354 <check_fs+0xa8>)
 800533e:	4293      	cmp	r3, r2
 8005340:	d101      	bne.n	8005346 <check_fs+0x9a>
 8005342:	2300      	movs	r3, #0
 8005344:	e000      	b.n	8005348 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8005346:	2302      	movs	r3, #2
}
 8005348:	4618      	mov	r0, r3
 800534a:	3708      	adds	r7, #8
 800534c:	46bd      	mov	sp, r7
 800534e:	bd80      	pop	{r7, pc}
 8005350:	00544146 	.word	0x00544146
 8005354:	33544146 	.word	0x33544146

08005358 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8005358:	b580      	push	{r7, lr}
 800535a:	b096      	sub	sp, #88	; 0x58
 800535c:	af00      	add	r7, sp, #0
 800535e:	60f8      	str	r0, [r7, #12]
 8005360:	60b9      	str	r1, [r7, #8]
 8005362:	4613      	mov	r3, r2
 8005364:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8005366:	68bb      	ldr	r3, [r7, #8]
 8005368:	2200      	movs	r2, #0
 800536a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800536c:	68f8      	ldr	r0, [r7, #12]
 800536e:	f7ff ff59 	bl	8005224 <get_ldnumber>
 8005372:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8005374:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005376:	2b00      	cmp	r3, #0
 8005378:	da01      	bge.n	800537e <find_volume+0x26>
 800537a:	230b      	movs	r3, #11
 800537c:	e265      	b.n	800584a <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800537e:	4a9f      	ldr	r2, [pc, #636]	; (80055fc <find_volume+0x2a4>)
 8005380:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005382:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005386:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8005388:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800538a:	2b00      	cmp	r3, #0
 800538c:	d101      	bne.n	8005392 <find_volume+0x3a>
 800538e:	230c      	movs	r3, #12
 8005390:	e25b      	b.n	800584a <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8005392:	68bb      	ldr	r3, [r7, #8]
 8005394:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005396:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8005398:	79fb      	ldrb	r3, [r7, #7]
 800539a:	f023 0301 	bic.w	r3, r3, #1
 800539e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80053a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053a2:	781b      	ldrb	r3, [r3, #0]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d01a      	beq.n	80053de <find_volume+0x86>
		stat = disk_status(fs->drv);
 80053a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053aa:	785b      	ldrb	r3, [r3, #1]
 80053ac:	4618      	mov	r0, r3
 80053ae:	f7fe fb0b 	bl	80039c8 <disk_status>
 80053b2:	4603      	mov	r3, r0
 80053b4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80053b8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80053bc:	f003 0301 	and.w	r3, r3, #1
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d10c      	bne.n	80053de <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80053c4:	79fb      	ldrb	r3, [r7, #7]
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d007      	beq.n	80053da <find_volume+0x82>
 80053ca:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80053ce:	f003 0304 	and.w	r3, r3, #4
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d001      	beq.n	80053da <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 80053d6:	230a      	movs	r3, #10
 80053d8:	e237      	b.n	800584a <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 80053da:	2300      	movs	r3, #0
 80053dc:	e235      	b.n	800584a <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80053de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053e0:	2200      	movs	r2, #0
 80053e2:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80053e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053e6:	b2da      	uxtb	r2, r3
 80053e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053ea:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80053ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053ee:	785b      	ldrb	r3, [r3, #1]
 80053f0:	4618      	mov	r0, r3
 80053f2:	f7fe fb03 	bl	80039fc <disk_initialize>
 80053f6:	4603      	mov	r3, r0
 80053f8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80053fc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005400:	f003 0301 	and.w	r3, r3, #1
 8005404:	2b00      	cmp	r3, #0
 8005406:	d001      	beq.n	800540c <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8005408:	2303      	movs	r3, #3
 800540a:	e21e      	b.n	800584a <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800540c:	79fb      	ldrb	r3, [r7, #7]
 800540e:	2b00      	cmp	r3, #0
 8005410:	d007      	beq.n	8005422 <find_volume+0xca>
 8005412:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005416:	f003 0304 	and.w	r3, r3, #4
 800541a:	2b00      	cmp	r3, #0
 800541c:	d001      	beq.n	8005422 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800541e:	230a      	movs	r3, #10
 8005420:	e213      	b.n	800584a <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8005422:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005424:	7858      	ldrb	r0, [r3, #1]
 8005426:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005428:	330c      	adds	r3, #12
 800542a:	461a      	mov	r2, r3
 800542c:	2102      	movs	r1, #2
 800542e:	f7fe fb4b 	bl	8003ac8 <disk_ioctl>
 8005432:	4603      	mov	r3, r0
 8005434:	2b00      	cmp	r3, #0
 8005436:	d001      	beq.n	800543c <find_volume+0xe4>
 8005438:	2301      	movs	r3, #1
 800543a:	e206      	b.n	800584a <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800543c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800543e:	899b      	ldrh	r3, [r3, #12]
 8005440:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005444:	d80d      	bhi.n	8005462 <find_volume+0x10a>
 8005446:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005448:	899b      	ldrh	r3, [r3, #12]
 800544a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800544e:	d308      	bcc.n	8005462 <find_volume+0x10a>
 8005450:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005452:	899b      	ldrh	r3, [r3, #12]
 8005454:	461a      	mov	r2, r3
 8005456:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005458:	899b      	ldrh	r3, [r3, #12]
 800545a:	3b01      	subs	r3, #1
 800545c:	4013      	ands	r3, r2
 800545e:	2b00      	cmp	r3, #0
 8005460:	d001      	beq.n	8005466 <find_volume+0x10e>
 8005462:	2301      	movs	r3, #1
 8005464:	e1f1      	b.n	800584a <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8005466:	2300      	movs	r3, #0
 8005468:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800546a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800546c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800546e:	f7ff ff1d 	bl	80052ac <check_fs>
 8005472:	4603      	mov	r3, r0
 8005474:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8005478:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800547c:	2b02      	cmp	r3, #2
 800547e:	d149      	bne.n	8005514 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8005480:	2300      	movs	r3, #0
 8005482:	643b      	str	r3, [r7, #64]	; 0x40
 8005484:	e01e      	b.n	80054c4 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8005486:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005488:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800548c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800548e:	011b      	lsls	r3, r3, #4
 8005490:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8005494:	4413      	add	r3, r2
 8005496:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8005498:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800549a:	3304      	adds	r3, #4
 800549c:	781b      	ldrb	r3, [r3, #0]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d006      	beq.n	80054b0 <find_volume+0x158>
 80054a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054a4:	3308      	adds	r3, #8
 80054a6:	4618      	mov	r0, r3
 80054a8:	f7fe fb44 	bl	8003b34 <ld_dword>
 80054ac:	4602      	mov	r2, r0
 80054ae:	e000      	b.n	80054b2 <find_volume+0x15a>
 80054b0:	2200      	movs	r2, #0
 80054b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80054b4:	009b      	lsls	r3, r3, #2
 80054b6:	3358      	adds	r3, #88	; 0x58
 80054b8:	443b      	add	r3, r7
 80054ba:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80054be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80054c0:	3301      	adds	r3, #1
 80054c2:	643b      	str	r3, [r7, #64]	; 0x40
 80054c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80054c6:	2b03      	cmp	r3, #3
 80054c8:	d9dd      	bls.n	8005486 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80054ca:	2300      	movs	r3, #0
 80054cc:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 80054ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d002      	beq.n	80054da <find_volume+0x182>
 80054d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80054d6:	3b01      	subs	r3, #1
 80054d8:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 80054da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80054dc:	009b      	lsls	r3, r3, #2
 80054de:	3358      	adds	r3, #88	; 0x58
 80054e0:	443b      	add	r3, r7
 80054e2:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80054e6:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80054e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d005      	beq.n	80054fa <find_volume+0x1a2>
 80054ee:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80054f0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80054f2:	f7ff fedb 	bl	80052ac <check_fs>
 80054f6:	4603      	mov	r3, r0
 80054f8:	e000      	b.n	80054fc <find_volume+0x1a4>
 80054fa:	2303      	movs	r3, #3
 80054fc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8005500:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005504:	2b01      	cmp	r3, #1
 8005506:	d905      	bls.n	8005514 <find_volume+0x1bc>
 8005508:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800550a:	3301      	adds	r3, #1
 800550c:	643b      	str	r3, [r7, #64]	; 0x40
 800550e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005510:	2b03      	cmp	r3, #3
 8005512:	d9e2      	bls.n	80054da <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8005514:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005518:	2b04      	cmp	r3, #4
 800551a:	d101      	bne.n	8005520 <find_volume+0x1c8>
 800551c:	2301      	movs	r3, #1
 800551e:	e194      	b.n	800584a <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8005520:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005524:	2b01      	cmp	r3, #1
 8005526:	d901      	bls.n	800552c <find_volume+0x1d4>
 8005528:	230d      	movs	r3, #13
 800552a:	e18e      	b.n	800584a <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800552c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800552e:	3338      	adds	r3, #56	; 0x38
 8005530:	330b      	adds	r3, #11
 8005532:	4618      	mov	r0, r3
 8005534:	f7fe fae6 	bl	8003b04 <ld_word>
 8005538:	4603      	mov	r3, r0
 800553a:	461a      	mov	r2, r3
 800553c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800553e:	899b      	ldrh	r3, [r3, #12]
 8005540:	429a      	cmp	r2, r3
 8005542:	d001      	beq.n	8005548 <find_volume+0x1f0>
 8005544:	230d      	movs	r3, #13
 8005546:	e180      	b.n	800584a <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8005548:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800554a:	3338      	adds	r3, #56	; 0x38
 800554c:	3316      	adds	r3, #22
 800554e:	4618      	mov	r0, r3
 8005550:	f7fe fad8 	bl	8003b04 <ld_word>
 8005554:	4603      	mov	r3, r0
 8005556:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8005558:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800555a:	2b00      	cmp	r3, #0
 800555c:	d106      	bne.n	800556c <find_volume+0x214>
 800555e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005560:	3338      	adds	r3, #56	; 0x38
 8005562:	3324      	adds	r3, #36	; 0x24
 8005564:	4618      	mov	r0, r3
 8005566:	f7fe fae5 	bl	8003b34 <ld_dword>
 800556a:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800556c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800556e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005570:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8005572:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005574:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8005578:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800557a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800557c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800557e:	789b      	ldrb	r3, [r3, #2]
 8005580:	2b01      	cmp	r3, #1
 8005582:	d005      	beq.n	8005590 <find_volume+0x238>
 8005584:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005586:	789b      	ldrb	r3, [r3, #2]
 8005588:	2b02      	cmp	r3, #2
 800558a:	d001      	beq.n	8005590 <find_volume+0x238>
 800558c:	230d      	movs	r3, #13
 800558e:	e15c      	b.n	800584a <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8005590:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005592:	789b      	ldrb	r3, [r3, #2]
 8005594:	461a      	mov	r2, r3
 8005596:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005598:	fb02 f303 	mul.w	r3, r2, r3
 800559c:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800559e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055a0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80055a4:	b29a      	uxth	r2, r3
 80055a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055a8:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80055aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055ac:	895b      	ldrh	r3, [r3, #10]
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d008      	beq.n	80055c4 <find_volume+0x26c>
 80055b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055b4:	895b      	ldrh	r3, [r3, #10]
 80055b6:	461a      	mov	r2, r3
 80055b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055ba:	895b      	ldrh	r3, [r3, #10]
 80055bc:	3b01      	subs	r3, #1
 80055be:	4013      	ands	r3, r2
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d001      	beq.n	80055c8 <find_volume+0x270>
 80055c4:	230d      	movs	r3, #13
 80055c6:	e140      	b.n	800584a <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80055c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055ca:	3338      	adds	r3, #56	; 0x38
 80055cc:	3311      	adds	r3, #17
 80055ce:	4618      	mov	r0, r3
 80055d0:	f7fe fa98 	bl	8003b04 <ld_word>
 80055d4:	4603      	mov	r3, r0
 80055d6:	461a      	mov	r2, r3
 80055d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055da:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80055dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055de:	891b      	ldrh	r3, [r3, #8]
 80055e0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80055e2:	8992      	ldrh	r2, [r2, #12]
 80055e4:	0952      	lsrs	r2, r2, #5
 80055e6:	b292      	uxth	r2, r2
 80055e8:	fbb3 f1f2 	udiv	r1, r3, r2
 80055ec:	fb01 f202 	mul.w	r2, r1, r2
 80055f0:	1a9b      	subs	r3, r3, r2
 80055f2:	b29b      	uxth	r3, r3
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d003      	beq.n	8005600 <find_volume+0x2a8>
 80055f8:	230d      	movs	r3, #13
 80055fa:	e126      	b.n	800584a <find_volume+0x4f2>
 80055fc:	2000112c 	.word	0x2000112c

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8005600:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005602:	3338      	adds	r3, #56	; 0x38
 8005604:	3313      	adds	r3, #19
 8005606:	4618      	mov	r0, r3
 8005608:	f7fe fa7c 	bl	8003b04 <ld_word>
 800560c:	4603      	mov	r3, r0
 800560e:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8005610:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005612:	2b00      	cmp	r3, #0
 8005614:	d106      	bne.n	8005624 <find_volume+0x2cc>
 8005616:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005618:	3338      	adds	r3, #56	; 0x38
 800561a:	3320      	adds	r3, #32
 800561c:	4618      	mov	r0, r3
 800561e:	f7fe fa89 	bl	8003b34 <ld_dword>
 8005622:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8005624:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005626:	3338      	adds	r3, #56	; 0x38
 8005628:	330e      	adds	r3, #14
 800562a:	4618      	mov	r0, r3
 800562c:	f7fe fa6a 	bl	8003b04 <ld_word>
 8005630:	4603      	mov	r3, r0
 8005632:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8005634:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005636:	2b00      	cmp	r3, #0
 8005638:	d101      	bne.n	800563e <find_volume+0x2e6>
 800563a:	230d      	movs	r3, #13
 800563c:	e105      	b.n	800584a <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800563e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8005640:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005642:	4413      	add	r3, r2
 8005644:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005646:	8911      	ldrh	r1, [r2, #8]
 8005648:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800564a:	8992      	ldrh	r2, [r2, #12]
 800564c:	0952      	lsrs	r2, r2, #5
 800564e:	b292      	uxth	r2, r2
 8005650:	fbb1 f2f2 	udiv	r2, r1, r2
 8005654:	b292      	uxth	r2, r2
 8005656:	4413      	add	r3, r2
 8005658:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800565a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800565c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800565e:	429a      	cmp	r2, r3
 8005660:	d201      	bcs.n	8005666 <find_volume+0x30e>
 8005662:	230d      	movs	r3, #13
 8005664:	e0f1      	b.n	800584a <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8005666:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005668:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800566a:	1ad3      	subs	r3, r2, r3
 800566c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800566e:	8952      	ldrh	r2, [r2, #10]
 8005670:	fbb3 f3f2 	udiv	r3, r3, r2
 8005674:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8005676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005678:	2b00      	cmp	r3, #0
 800567a:	d101      	bne.n	8005680 <find_volume+0x328>
 800567c:	230d      	movs	r3, #13
 800567e:	e0e4      	b.n	800584a <find_volume+0x4f2>
		fmt = FS_FAT32;
 8005680:	2303      	movs	r3, #3
 8005682:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8005686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005688:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800568c:	4293      	cmp	r3, r2
 800568e:	d802      	bhi.n	8005696 <find_volume+0x33e>
 8005690:	2302      	movs	r3, #2
 8005692:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8005696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005698:	f640 72f5 	movw	r2, #4085	; 0xff5
 800569c:	4293      	cmp	r3, r2
 800569e:	d802      	bhi.n	80056a6 <find_volume+0x34e>
 80056a0:	2301      	movs	r3, #1
 80056a2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80056a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056a8:	1c9a      	adds	r2, r3, #2
 80056aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056ac:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 80056ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056b0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80056b2:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80056b4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80056b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80056b8:	441a      	add	r2, r3
 80056ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056bc:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 80056be:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80056c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056c2:	441a      	add	r2, r3
 80056c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056c6:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 80056c8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80056cc:	2b03      	cmp	r3, #3
 80056ce:	d11e      	bne.n	800570e <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80056d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056d2:	3338      	adds	r3, #56	; 0x38
 80056d4:	332a      	adds	r3, #42	; 0x2a
 80056d6:	4618      	mov	r0, r3
 80056d8:	f7fe fa14 	bl	8003b04 <ld_word>
 80056dc:	4603      	mov	r3, r0
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d001      	beq.n	80056e6 <find_volume+0x38e>
 80056e2:	230d      	movs	r3, #13
 80056e4:	e0b1      	b.n	800584a <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80056e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056e8:	891b      	ldrh	r3, [r3, #8]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d001      	beq.n	80056f2 <find_volume+0x39a>
 80056ee:	230d      	movs	r3, #13
 80056f0:	e0ab      	b.n	800584a <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80056f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056f4:	3338      	adds	r3, #56	; 0x38
 80056f6:	332c      	adds	r3, #44	; 0x2c
 80056f8:	4618      	mov	r0, r3
 80056fa:	f7fe fa1b 	bl	8003b34 <ld_dword>
 80056fe:	4602      	mov	r2, r0
 8005700:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005702:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8005704:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005706:	69db      	ldr	r3, [r3, #28]
 8005708:	009b      	lsls	r3, r3, #2
 800570a:	647b      	str	r3, [r7, #68]	; 0x44
 800570c:	e01f      	b.n	800574e <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800570e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005710:	891b      	ldrh	r3, [r3, #8]
 8005712:	2b00      	cmp	r3, #0
 8005714:	d101      	bne.n	800571a <find_volume+0x3c2>
 8005716:	230d      	movs	r3, #13
 8005718:	e097      	b.n	800584a <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800571a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800571c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800571e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005720:	441a      	add	r2, r3
 8005722:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005724:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8005726:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800572a:	2b02      	cmp	r3, #2
 800572c:	d103      	bne.n	8005736 <find_volume+0x3de>
 800572e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005730:	69db      	ldr	r3, [r3, #28]
 8005732:	005b      	lsls	r3, r3, #1
 8005734:	e00a      	b.n	800574c <find_volume+0x3f4>
 8005736:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005738:	69da      	ldr	r2, [r3, #28]
 800573a:	4613      	mov	r3, r2
 800573c:	005b      	lsls	r3, r3, #1
 800573e:	4413      	add	r3, r2
 8005740:	085a      	lsrs	r2, r3, #1
 8005742:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005744:	69db      	ldr	r3, [r3, #28]
 8005746:	f003 0301 	and.w	r3, r3, #1
 800574a:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800574c:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800574e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005750:	6a1a      	ldr	r2, [r3, #32]
 8005752:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005754:	899b      	ldrh	r3, [r3, #12]
 8005756:	4619      	mov	r1, r3
 8005758:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800575a:	440b      	add	r3, r1
 800575c:	3b01      	subs	r3, #1
 800575e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005760:	8989      	ldrh	r1, [r1, #12]
 8005762:	fbb3 f3f1 	udiv	r3, r3, r1
 8005766:	429a      	cmp	r2, r3
 8005768:	d201      	bcs.n	800576e <find_volume+0x416>
 800576a:	230d      	movs	r3, #13
 800576c:	e06d      	b.n	800584a <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800576e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005770:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005774:	619a      	str	r2, [r3, #24]
 8005776:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005778:	699a      	ldr	r2, [r3, #24]
 800577a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800577c:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 800577e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005780:	2280      	movs	r2, #128	; 0x80
 8005782:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8005784:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005788:	2b03      	cmp	r3, #3
 800578a:	d149      	bne.n	8005820 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800578c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800578e:	3338      	adds	r3, #56	; 0x38
 8005790:	3330      	adds	r3, #48	; 0x30
 8005792:	4618      	mov	r0, r3
 8005794:	f7fe f9b6 	bl	8003b04 <ld_word>
 8005798:	4603      	mov	r3, r0
 800579a:	2b01      	cmp	r3, #1
 800579c:	d140      	bne.n	8005820 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 800579e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80057a0:	3301      	adds	r3, #1
 80057a2:	4619      	mov	r1, r3
 80057a4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80057a6:	f7fe fb83 	bl	8003eb0 <move_window>
 80057aa:	4603      	mov	r3, r0
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d137      	bne.n	8005820 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 80057b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057b2:	2200      	movs	r2, #0
 80057b4:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80057b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057b8:	3338      	adds	r3, #56	; 0x38
 80057ba:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80057be:	4618      	mov	r0, r3
 80057c0:	f7fe f9a0 	bl	8003b04 <ld_word>
 80057c4:	4603      	mov	r3, r0
 80057c6:	461a      	mov	r2, r3
 80057c8:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80057cc:	429a      	cmp	r2, r3
 80057ce:	d127      	bne.n	8005820 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80057d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057d2:	3338      	adds	r3, #56	; 0x38
 80057d4:	4618      	mov	r0, r3
 80057d6:	f7fe f9ad 	bl	8003b34 <ld_dword>
 80057da:	4603      	mov	r3, r0
 80057dc:	4a1d      	ldr	r2, [pc, #116]	; (8005854 <find_volume+0x4fc>)
 80057de:	4293      	cmp	r3, r2
 80057e0:	d11e      	bne.n	8005820 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80057e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057e4:	3338      	adds	r3, #56	; 0x38
 80057e6:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80057ea:	4618      	mov	r0, r3
 80057ec:	f7fe f9a2 	bl	8003b34 <ld_dword>
 80057f0:	4603      	mov	r3, r0
 80057f2:	4a19      	ldr	r2, [pc, #100]	; (8005858 <find_volume+0x500>)
 80057f4:	4293      	cmp	r3, r2
 80057f6:	d113      	bne.n	8005820 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80057f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057fa:	3338      	adds	r3, #56	; 0x38
 80057fc:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8005800:	4618      	mov	r0, r3
 8005802:	f7fe f997 	bl	8003b34 <ld_dword>
 8005806:	4602      	mov	r2, r0
 8005808:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800580a:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800580c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800580e:	3338      	adds	r3, #56	; 0x38
 8005810:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8005814:	4618      	mov	r0, r3
 8005816:	f7fe f98d 	bl	8003b34 <ld_dword>
 800581a:	4602      	mov	r2, r0
 800581c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800581e:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8005820:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005822:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8005826:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8005828:	4b0c      	ldr	r3, [pc, #48]	; (800585c <find_volume+0x504>)
 800582a:	881b      	ldrh	r3, [r3, #0]
 800582c:	3301      	adds	r3, #1
 800582e:	b29a      	uxth	r2, r3
 8005830:	4b0a      	ldr	r3, [pc, #40]	; (800585c <find_volume+0x504>)
 8005832:	801a      	strh	r2, [r3, #0]
 8005834:	4b09      	ldr	r3, [pc, #36]	; (800585c <find_volume+0x504>)
 8005836:	881a      	ldrh	r2, [r3, #0]
 8005838:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800583a:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800583c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800583e:	4a08      	ldr	r2, [pc, #32]	; (8005860 <find_volume+0x508>)
 8005840:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8005842:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005844:	f7fe facc 	bl	8003de0 <clear_lock>
#endif
	return FR_OK;
 8005848:	2300      	movs	r3, #0
}
 800584a:	4618      	mov	r0, r3
 800584c:	3758      	adds	r7, #88	; 0x58
 800584e:	46bd      	mov	sp, r7
 8005850:	bd80      	pop	{r7, pc}
 8005852:	bf00      	nop
 8005854:	41615252 	.word	0x41615252
 8005858:	61417272 	.word	0x61417272
 800585c:	20001130 	.word	0x20001130
 8005860:	20001154 	.word	0x20001154

08005864 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8005864:	b580      	push	{r7, lr}
 8005866:	b084      	sub	sp, #16
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
 800586c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800586e:	2309      	movs	r3, #9
 8005870:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	2b00      	cmp	r3, #0
 8005876:	d01c      	beq.n	80058b2 <validate+0x4e>
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	2b00      	cmp	r3, #0
 800587e:	d018      	beq.n	80058b2 <validate+0x4e>
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	781b      	ldrb	r3, [r3, #0]
 8005886:	2b00      	cmp	r3, #0
 8005888:	d013      	beq.n	80058b2 <validate+0x4e>
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	889a      	ldrh	r2, [r3, #4]
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	88db      	ldrh	r3, [r3, #6]
 8005894:	429a      	cmp	r2, r3
 8005896:	d10c      	bne.n	80058b2 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	785b      	ldrb	r3, [r3, #1]
 800589e:	4618      	mov	r0, r3
 80058a0:	f7fe f892 	bl	80039c8 <disk_status>
 80058a4:	4603      	mov	r3, r0
 80058a6:	f003 0301 	and.w	r3, r3, #1
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d101      	bne.n	80058b2 <validate+0x4e>
			res = FR_OK;
 80058ae:	2300      	movs	r3, #0
 80058b0:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80058b2:	7bfb      	ldrb	r3, [r7, #15]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d102      	bne.n	80058be <validate+0x5a>
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	e000      	b.n	80058c0 <validate+0x5c>
 80058be:	2300      	movs	r3, #0
 80058c0:	683a      	ldr	r2, [r7, #0]
 80058c2:	6013      	str	r3, [r2, #0]
	return res;
 80058c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80058c6:	4618      	mov	r0, r3
 80058c8:	3710      	adds	r7, #16
 80058ca:	46bd      	mov	sp, r7
 80058cc:	bd80      	pop	{r7, pc}
	...

080058d0 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80058d0:	b580      	push	{r7, lr}
 80058d2:	b088      	sub	sp, #32
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	60f8      	str	r0, [r7, #12]
 80058d8:	60b9      	str	r1, [r7, #8]
 80058da:	4613      	mov	r3, r2
 80058dc:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80058de:	68bb      	ldr	r3, [r7, #8]
 80058e0:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80058e2:	f107 0310 	add.w	r3, r7, #16
 80058e6:	4618      	mov	r0, r3
 80058e8:	f7ff fc9c 	bl	8005224 <get_ldnumber>
 80058ec:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80058ee:	69fb      	ldr	r3, [r7, #28]
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	da01      	bge.n	80058f8 <f_mount+0x28>
 80058f4:	230b      	movs	r3, #11
 80058f6:	e02b      	b.n	8005950 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80058f8:	4a17      	ldr	r2, [pc, #92]	; (8005958 <f_mount+0x88>)
 80058fa:	69fb      	ldr	r3, [r7, #28]
 80058fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005900:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8005902:	69bb      	ldr	r3, [r7, #24]
 8005904:	2b00      	cmp	r3, #0
 8005906:	d005      	beq.n	8005914 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8005908:	69b8      	ldr	r0, [r7, #24]
 800590a:	f7fe fa69 	bl	8003de0 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800590e:	69bb      	ldr	r3, [r7, #24]
 8005910:	2200      	movs	r2, #0
 8005912:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	2b00      	cmp	r3, #0
 8005918:	d002      	beq.n	8005920 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	2200      	movs	r2, #0
 800591e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8005920:	68fa      	ldr	r2, [r7, #12]
 8005922:	490d      	ldr	r1, [pc, #52]	; (8005958 <f_mount+0x88>)
 8005924:	69fb      	ldr	r3, [r7, #28]
 8005926:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	2b00      	cmp	r3, #0
 800592e:	d002      	beq.n	8005936 <f_mount+0x66>
 8005930:	79fb      	ldrb	r3, [r7, #7]
 8005932:	2b01      	cmp	r3, #1
 8005934:	d001      	beq.n	800593a <f_mount+0x6a>
 8005936:	2300      	movs	r3, #0
 8005938:	e00a      	b.n	8005950 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800593a:	f107 010c 	add.w	r1, r7, #12
 800593e:	f107 0308 	add.w	r3, r7, #8
 8005942:	2200      	movs	r2, #0
 8005944:	4618      	mov	r0, r3
 8005946:	f7ff fd07 	bl	8005358 <find_volume>
 800594a:	4603      	mov	r3, r0
 800594c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800594e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005950:	4618      	mov	r0, r3
 8005952:	3720      	adds	r7, #32
 8005954:	46bd      	mov	sp, r7
 8005956:	bd80      	pop	{r7, pc}
 8005958:	2000112c 	.word	0x2000112c

0800595c <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 800595c:	b580      	push	{r7, lr}
 800595e:	b086      	sub	sp, #24
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
 8005964:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	2b00      	cmp	r3, #0
 800596a:	d101      	bne.n	8005970 <f_opendir+0x14>
 800596c:	2309      	movs	r3, #9
 800596e:	e064      	b.n	8005a3a <f_opendir+0xde>

	/* Get logical drive */
	obj = &dp->obj;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 8005974:	f107 010c 	add.w	r1, r7, #12
 8005978:	463b      	mov	r3, r7
 800597a:	2200      	movs	r2, #0
 800597c:	4618      	mov	r0, r3
 800597e:	f7ff fceb 	bl	8005358 <find_volume>
 8005982:	4603      	mov	r3, r0
 8005984:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8005986:	7dfb      	ldrb	r3, [r7, #23]
 8005988:	2b00      	cmp	r3, #0
 800598a:	d14f      	bne.n	8005a2c <f_opendir+0xd0>
		obj->fs = fs;
 800598c:	68fa      	ldr	r2, [r7, #12]
 800598e:	693b      	ldr	r3, [r7, #16]
 8005990:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 8005992:	683b      	ldr	r3, [r7, #0]
 8005994:	4619      	mov	r1, r3
 8005996:	6878      	ldr	r0, [r7, #4]
 8005998:	f7ff fbce 	bl	8005138 <follow_path>
 800599c:	4603      	mov	r3, r0
 800599e:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 80059a0:	7dfb      	ldrb	r3, [r7, #23]
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d13d      	bne.n	8005a22 <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80059ac:	b25b      	sxtb	r3, r3
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	db12      	blt.n	80059d8 <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 80059b2:	693b      	ldr	r3, [r7, #16]
 80059b4:	799b      	ldrb	r3, [r3, #6]
 80059b6:	f003 0310 	and.w	r3, r3, #16
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d00a      	beq.n	80059d4 <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 80059be:	68fa      	ldr	r2, [r7, #12]
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	6a1b      	ldr	r3, [r3, #32]
 80059c4:	4619      	mov	r1, r3
 80059c6:	4610      	mov	r0, r2
 80059c8:	f7fe fea5 	bl	8004716 <ld_clust>
 80059cc:	4602      	mov	r2, r0
 80059ce:	693b      	ldr	r3, [r7, #16]
 80059d0:	609a      	str	r2, [r3, #8]
 80059d2:	e001      	b.n	80059d8 <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 80059d4:	2305      	movs	r3, #5
 80059d6:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 80059d8:	7dfb      	ldrb	r3, [r7, #23]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d121      	bne.n	8005a22 <f_opendir+0xc6>
				obj->id = fs->id;
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	88da      	ldrh	r2, [r3, #6]
 80059e2:	693b      	ldr	r3, [r7, #16]
 80059e4:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 80059e6:	2100      	movs	r1, #0
 80059e8:	6878      	ldr	r0, [r7, #4]
 80059ea:	f7fe fd35 	bl	8004458 <dir_sdi>
 80059ee:	4603      	mov	r3, r0
 80059f0:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 80059f2:	7dfb      	ldrb	r3, [r7, #23]
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d114      	bne.n	8005a22 <f_opendir+0xc6>
					if (obj->sclust) {
 80059f8:	693b      	ldr	r3, [r7, #16]
 80059fa:	689b      	ldr	r3, [r3, #8]
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d00d      	beq.n	8005a1c <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 8005a00:	2100      	movs	r1, #0
 8005a02:	6878      	ldr	r0, [r7, #4]
 8005a04:	f7fe f95e 	bl	8003cc4 <inc_lock>
 8005a08:	4602      	mov	r2, r0
 8005a0a:	693b      	ldr	r3, [r7, #16]
 8005a0c:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 8005a0e:	693b      	ldr	r3, [r7, #16]
 8005a10:	691b      	ldr	r3, [r3, #16]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d105      	bne.n	8005a22 <f_opendir+0xc6>
 8005a16:	2312      	movs	r3, #18
 8005a18:	75fb      	strb	r3, [r7, #23]
 8005a1a:	e002      	b.n	8005a22 <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 8005a1c:	693b      	ldr	r3, [r7, #16]
 8005a1e:	2200      	movs	r2, #0
 8005a20:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8005a22:	7dfb      	ldrb	r3, [r7, #23]
 8005a24:	2b04      	cmp	r3, #4
 8005a26:	d101      	bne.n	8005a2c <f_opendir+0xd0>
 8005a28:	2305      	movs	r3, #5
 8005a2a:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 8005a2c:	7dfb      	ldrb	r3, [r7, #23]
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d002      	beq.n	8005a38 <f_opendir+0xdc>
 8005a32:	693b      	ldr	r3, [r7, #16]
 8005a34:	2200      	movs	r2, #0
 8005a36:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8005a38:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	3718      	adds	r7, #24
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	bd80      	pop	{r7, pc}

08005a42 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8005a42:	b580      	push	{r7, lr}
 8005a44:	b084      	sub	sp, #16
 8005a46:	af00      	add	r7, sp, #0
 8005a48:	6078      	str	r0, [r7, #4]
 8005a4a:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	f107 0208 	add.w	r2, r7, #8
 8005a52:	4611      	mov	r1, r2
 8005a54:	4618      	mov	r0, r3
 8005a56:	f7ff ff05 	bl	8005864 <validate>
 8005a5a:	4603      	mov	r3, r0
 8005a5c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8005a5e:	7bfb      	ldrb	r3, [r7, #15]
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d126      	bne.n	8005ab2 <f_readdir+0x70>
		if (!fno) {
 8005a64:	683b      	ldr	r3, [r7, #0]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d106      	bne.n	8005a78 <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 8005a6a:	2100      	movs	r1, #0
 8005a6c:	6878      	ldr	r0, [r7, #4]
 8005a6e:	f7fe fcf3 	bl	8004458 <dir_sdi>
 8005a72:	4603      	mov	r3, r0
 8005a74:	73fb      	strb	r3, [r7, #15]
 8005a76:	e01c      	b.n	8005ab2 <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 8005a78:	2100      	movs	r1, #0
 8005a7a:	6878      	ldr	r0, [r7, #4]
 8005a7c:	f7fe ff5f 	bl	800493e <dir_read>
 8005a80:	4603      	mov	r3, r0
 8005a82:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 8005a84:	7bfb      	ldrb	r3, [r7, #15]
 8005a86:	2b04      	cmp	r3, #4
 8005a88:	d101      	bne.n	8005a8e <f_readdir+0x4c>
 8005a8a:	2300      	movs	r3, #0
 8005a8c:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 8005a8e:	7bfb      	ldrb	r3, [r7, #15]
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d10e      	bne.n	8005ab2 <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 8005a94:	6839      	ldr	r1, [r7, #0]
 8005a96:	6878      	ldr	r0, [r7, #4]
 8005a98:	f7ff f8b8 	bl	8004c0c <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 8005a9c:	2100      	movs	r1, #0
 8005a9e:	6878      	ldr	r0, [r7, #4]
 8005aa0:	f7fe fd63 	bl	800456a <dir_next>
 8005aa4:	4603      	mov	r3, r0
 8005aa6:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 8005aa8:	7bfb      	ldrb	r3, [r7, #15]
 8005aaa:	2b04      	cmp	r3, #4
 8005aac:	d101      	bne.n	8005ab2 <f_readdir+0x70>
 8005aae:	2300      	movs	r3, #0
 8005ab0:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 8005ab2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	3710      	adds	r7, #16
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	bd80      	pop	{r7, pc}

08005abc <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8005abc:	b480      	push	{r7}
 8005abe:	b087      	sub	sp, #28
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	60f8      	str	r0, [r7, #12]
 8005ac4:	60b9      	str	r1, [r7, #8]
 8005ac6:	4613      	mov	r3, r2
 8005ac8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8005aca:	2301      	movs	r3, #1
 8005acc:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8005ace:	2300      	movs	r3, #0
 8005ad0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8005ad2:	4b1f      	ldr	r3, [pc, #124]	; (8005b50 <FATFS_LinkDriverEx+0x94>)
 8005ad4:	7a5b      	ldrb	r3, [r3, #9]
 8005ad6:	b2db      	uxtb	r3, r3
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d131      	bne.n	8005b40 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8005adc:	4b1c      	ldr	r3, [pc, #112]	; (8005b50 <FATFS_LinkDriverEx+0x94>)
 8005ade:	7a5b      	ldrb	r3, [r3, #9]
 8005ae0:	b2db      	uxtb	r3, r3
 8005ae2:	461a      	mov	r2, r3
 8005ae4:	4b1a      	ldr	r3, [pc, #104]	; (8005b50 <FATFS_LinkDriverEx+0x94>)
 8005ae6:	2100      	movs	r1, #0
 8005ae8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8005aea:	4b19      	ldr	r3, [pc, #100]	; (8005b50 <FATFS_LinkDriverEx+0x94>)
 8005aec:	7a5b      	ldrb	r3, [r3, #9]
 8005aee:	b2db      	uxtb	r3, r3
 8005af0:	4a17      	ldr	r2, [pc, #92]	; (8005b50 <FATFS_LinkDriverEx+0x94>)
 8005af2:	009b      	lsls	r3, r3, #2
 8005af4:	4413      	add	r3, r2
 8005af6:	68fa      	ldr	r2, [r7, #12]
 8005af8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8005afa:	4b15      	ldr	r3, [pc, #84]	; (8005b50 <FATFS_LinkDriverEx+0x94>)
 8005afc:	7a5b      	ldrb	r3, [r3, #9]
 8005afe:	b2db      	uxtb	r3, r3
 8005b00:	461a      	mov	r2, r3
 8005b02:	4b13      	ldr	r3, [pc, #76]	; (8005b50 <FATFS_LinkDriverEx+0x94>)
 8005b04:	4413      	add	r3, r2
 8005b06:	79fa      	ldrb	r2, [r7, #7]
 8005b08:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8005b0a:	4b11      	ldr	r3, [pc, #68]	; (8005b50 <FATFS_LinkDriverEx+0x94>)
 8005b0c:	7a5b      	ldrb	r3, [r3, #9]
 8005b0e:	b2db      	uxtb	r3, r3
 8005b10:	1c5a      	adds	r2, r3, #1
 8005b12:	b2d1      	uxtb	r1, r2
 8005b14:	4a0e      	ldr	r2, [pc, #56]	; (8005b50 <FATFS_LinkDriverEx+0x94>)
 8005b16:	7251      	strb	r1, [r2, #9]
 8005b18:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8005b1a:	7dbb      	ldrb	r3, [r7, #22]
 8005b1c:	3330      	adds	r3, #48	; 0x30
 8005b1e:	b2da      	uxtb	r2, r3
 8005b20:	68bb      	ldr	r3, [r7, #8]
 8005b22:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8005b24:	68bb      	ldr	r3, [r7, #8]
 8005b26:	3301      	adds	r3, #1
 8005b28:	223a      	movs	r2, #58	; 0x3a
 8005b2a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8005b2c:	68bb      	ldr	r3, [r7, #8]
 8005b2e:	3302      	adds	r3, #2
 8005b30:	222f      	movs	r2, #47	; 0x2f
 8005b32:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8005b34:	68bb      	ldr	r3, [r7, #8]
 8005b36:	3303      	adds	r3, #3
 8005b38:	2200      	movs	r2, #0
 8005b3a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8005b3c:	2300      	movs	r3, #0
 8005b3e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8005b40:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b42:	4618      	mov	r0, r3
 8005b44:	371c      	adds	r7, #28
 8005b46:	46bd      	mov	sp, r7
 8005b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4c:	4770      	bx	lr
 8005b4e:	bf00      	nop
 8005b50:	20001354 	.word	0x20001354

08005b54 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8005b54:	b580      	push	{r7, lr}
 8005b56:	b082      	sub	sp, #8
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	6078      	str	r0, [r7, #4]
 8005b5c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8005b5e:	2200      	movs	r2, #0
 8005b60:	6839      	ldr	r1, [r7, #0]
 8005b62:	6878      	ldr	r0, [r7, #4]
 8005b64:	f7ff ffaa 	bl	8005abc <FATFS_LinkDriverEx>
 8005b68:	4603      	mov	r3, r0
}
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	3708      	adds	r7, #8
 8005b6e:	46bd      	mov	sp, r7
 8005b70:	bd80      	pop	{r7, pc}
	...

08005b74 <__libc_init_array>:
 8005b74:	b570      	push	{r4, r5, r6, lr}
 8005b76:	4d0d      	ldr	r5, [pc, #52]	; (8005bac <__libc_init_array+0x38>)
 8005b78:	4c0d      	ldr	r4, [pc, #52]	; (8005bb0 <__libc_init_array+0x3c>)
 8005b7a:	1b64      	subs	r4, r4, r5
 8005b7c:	10a4      	asrs	r4, r4, #2
 8005b7e:	2600      	movs	r6, #0
 8005b80:	42a6      	cmp	r6, r4
 8005b82:	d109      	bne.n	8005b98 <__libc_init_array+0x24>
 8005b84:	4d0b      	ldr	r5, [pc, #44]	; (8005bb4 <__libc_init_array+0x40>)
 8005b86:	4c0c      	ldr	r4, [pc, #48]	; (8005bb8 <__libc_init_array+0x44>)
 8005b88:	f000 f87c 	bl	8005c84 <_init>
 8005b8c:	1b64      	subs	r4, r4, r5
 8005b8e:	10a4      	asrs	r4, r4, #2
 8005b90:	2600      	movs	r6, #0
 8005b92:	42a6      	cmp	r6, r4
 8005b94:	d105      	bne.n	8005ba2 <__libc_init_array+0x2e>
 8005b96:	bd70      	pop	{r4, r5, r6, pc}
 8005b98:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b9c:	4798      	blx	r3
 8005b9e:	3601      	adds	r6, #1
 8005ba0:	e7ee      	b.n	8005b80 <__libc_init_array+0xc>
 8005ba2:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ba6:	4798      	blx	r3
 8005ba8:	3601      	adds	r6, #1
 8005baa:	e7f2      	b.n	8005b92 <__libc_init_array+0x1e>
 8005bac:	0800635c 	.word	0x0800635c
 8005bb0:	0800635c 	.word	0x0800635c
 8005bb4:	0800635c 	.word	0x0800635c
 8005bb8:	08006360 	.word	0x08006360

08005bbc <__itoa>:
 8005bbc:	1e93      	subs	r3, r2, #2
 8005bbe:	2b22      	cmp	r3, #34	; 0x22
 8005bc0:	b510      	push	{r4, lr}
 8005bc2:	460c      	mov	r4, r1
 8005bc4:	d904      	bls.n	8005bd0 <__itoa+0x14>
 8005bc6:	2300      	movs	r3, #0
 8005bc8:	700b      	strb	r3, [r1, #0]
 8005bca:	461c      	mov	r4, r3
 8005bcc:	4620      	mov	r0, r4
 8005bce:	bd10      	pop	{r4, pc}
 8005bd0:	2a0a      	cmp	r2, #10
 8005bd2:	d109      	bne.n	8005be8 <__itoa+0x2c>
 8005bd4:	2800      	cmp	r0, #0
 8005bd6:	da07      	bge.n	8005be8 <__itoa+0x2c>
 8005bd8:	232d      	movs	r3, #45	; 0x2d
 8005bda:	700b      	strb	r3, [r1, #0]
 8005bdc:	4240      	negs	r0, r0
 8005bde:	2101      	movs	r1, #1
 8005be0:	4421      	add	r1, r4
 8005be2:	f000 f80d 	bl	8005c00 <__utoa>
 8005be6:	e7f1      	b.n	8005bcc <__itoa+0x10>
 8005be8:	2100      	movs	r1, #0
 8005bea:	e7f9      	b.n	8005be0 <__itoa+0x24>

08005bec <itoa>:
 8005bec:	f7ff bfe6 	b.w	8005bbc <__itoa>

08005bf0 <memset>:
 8005bf0:	4402      	add	r2, r0
 8005bf2:	4603      	mov	r3, r0
 8005bf4:	4293      	cmp	r3, r2
 8005bf6:	d100      	bne.n	8005bfa <memset+0xa>
 8005bf8:	4770      	bx	lr
 8005bfa:	f803 1b01 	strb.w	r1, [r3], #1
 8005bfe:	e7f9      	b.n	8005bf4 <memset+0x4>

08005c00 <__utoa>:
 8005c00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005c02:	4c1f      	ldr	r4, [pc, #124]	; (8005c80 <__utoa+0x80>)
 8005c04:	b08b      	sub	sp, #44	; 0x2c
 8005c06:	4605      	mov	r5, r0
 8005c08:	460b      	mov	r3, r1
 8005c0a:	466e      	mov	r6, sp
 8005c0c:	f104 0c20 	add.w	ip, r4, #32
 8005c10:	6820      	ldr	r0, [r4, #0]
 8005c12:	6861      	ldr	r1, [r4, #4]
 8005c14:	4637      	mov	r7, r6
 8005c16:	c703      	stmia	r7!, {r0, r1}
 8005c18:	3408      	adds	r4, #8
 8005c1a:	4564      	cmp	r4, ip
 8005c1c:	463e      	mov	r6, r7
 8005c1e:	d1f7      	bne.n	8005c10 <__utoa+0x10>
 8005c20:	7921      	ldrb	r1, [r4, #4]
 8005c22:	7139      	strb	r1, [r7, #4]
 8005c24:	1e91      	subs	r1, r2, #2
 8005c26:	6820      	ldr	r0, [r4, #0]
 8005c28:	6038      	str	r0, [r7, #0]
 8005c2a:	2922      	cmp	r1, #34	; 0x22
 8005c2c:	f04f 0100 	mov.w	r1, #0
 8005c30:	d904      	bls.n	8005c3c <__utoa+0x3c>
 8005c32:	7019      	strb	r1, [r3, #0]
 8005c34:	460b      	mov	r3, r1
 8005c36:	4618      	mov	r0, r3
 8005c38:	b00b      	add	sp, #44	; 0x2c
 8005c3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005c3c:	1e58      	subs	r0, r3, #1
 8005c3e:	4684      	mov	ip, r0
 8005c40:	fbb5 f7f2 	udiv	r7, r5, r2
 8005c44:	fb02 5617 	mls	r6, r2, r7, r5
 8005c48:	3628      	adds	r6, #40	; 0x28
 8005c4a:	446e      	add	r6, sp
 8005c4c:	460c      	mov	r4, r1
 8005c4e:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8005c52:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8005c56:	462e      	mov	r6, r5
 8005c58:	42b2      	cmp	r2, r6
 8005c5a:	f101 0101 	add.w	r1, r1, #1
 8005c5e:	463d      	mov	r5, r7
 8005c60:	d9ee      	bls.n	8005c40 <__utoa+0x40>
 8005c62:	2200      	movs	r2, #0
 8005c64:	545a      	strb	r2, [r3, r1]
 8005c66:	1919      	adds	r1, r3, r4
 8005c68:	1aa5      	subs	r5, r4, r2
 8005c6a:	42aa      	cmp	r2, r5
 8005c6c:	dae3      	bge.n	8005c36 <__utoa+0x36>
 8005c6e:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8005c72:	780e      	ldrb	r6, [r1, #0]
 8005c74:	7006      	strb	r6, [r0, #0]
 8005c76:	3201      	adds	r2, #1
 8005c78:	f801 5901 	strb.w	r5, [r1], #-1
 8005c7c:	e7f4      	b.n	8005c68 <__utoa+0x68>
 8005c7e:	bf00      	nop
 8005c80:	0800632d 	.word	0x0800632d

08005c84 <_init>:
 8005c84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c86:	bf00      	nop
 8005c88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c8a:	bc08      	pop	{r3}
 8005c8c:	469e      	mov	lr, r3
 8005c8e:	4770      	bx	lr

08005c90 <_fini>:
 8005c90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c92:	bf00      	nop
 8005c94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c96:	bc08      	pop	{r3}
 8005c98:	469e      	mov	lr, r3
 8005c9a:	4770      	bx	lr
