
TP_V3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004e18  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000043c  08004fc8  08004fc8  00014fc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005404  08005404  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  08005404  08005404  00015404  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800540c  0800540c  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800540c  0800540c  0001540c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005410  08005410  00015410  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08005414  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002007c  2**0
                  CONTENTS
 10 .bss          000000cc  2000007c  2000007c  0002007c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000148  20000148  0002007c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d33f  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000020cc  00000000  00000000  0002d3eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b20  00000000  00000000  0002f4b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000a40  00000000  00000000  0002ffd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025235  00000000  00000000  00030a18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ff4d  00000000  00000000  00055c4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d6273  00000000  00000000  00065b9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0013be0d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003584  00000000  00000000  0013be60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08004fb0 	.word	0x08004fb0

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000080 	.word	0x20000080
 80001ec:	08004fb0 	.word	0x08004fb0

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002b4:	f000 b974 	b.w	80005a0 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468e      	mov	lr, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d14d      	bne.n	800037a <__udivmoddi4+0xaa>
 80002de:	428a      	cmp	r2, r1
 80002e0:	4694      	mov	ip, r2
 80002e2:	d969      	bls.n	80003b8 <__udivmoddi4+0xe8>
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	b152      	cbz	r2, 8000300 <__udivmoddi4+0x30>
 80002ea:	fa01 f302 	lsl.w	r3, r1, r2
 80002ee:	f1c2 0120 	rsb	r1, r2, #32
 80002f2:	fa20 f101 	lsr.w	r1, r0, r1
 80002f6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002fa:	ea41 0e03 	orr.w	lr, r1, r3
 80002fe:	4094      	lsls	r4, r2
 8000300:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000304:	0c21      	lsrs	r1, r4, #16
 8000306:	fbbe f6f8 	udiv	r6, lr, r8
 800030a:	fa1f f78c 	uxth.w	r7, ip
 800030e:	fb08 e316 	mls	r3, r8, r6, lr
 8000312:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000316:	fb06 f107 	mul.w	r1, r6, r7
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000326:	f080 811f 	bcs.w	8000568 <__udivmoddi4+0x298>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 811c 	bls.w	8000568 <__udivmoddi4+0x298>
 8000330:	3e02      	subs	r6, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a5b      	subs	r3, r3, r1
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb3 f0f8 	udiv	r0, r3, r8
 800033c:	fb08 3310 	mls	r3, r8, r0, r3
 8000340:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000344:	fb00 f707 	mul.w	r7, r0, r7
 8000348:	42a7      	cmp	r7, r4
 800034a:	d90a      	bls.n	8000362 <__udivmoddi4+0x92>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000354:	f080 810a 	bcs.w	800056c <__udivmoddi4+0x29c>
 8000358:	42a7      	cmp	r7, r4
 800035a:	f240 8107 	bls.w	800056c <__udivmoddi4+0x29c>
 800035e:	4464      	add	r4, ip
 8000360:	3802      	subs	r0, #2
 8000362:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000366:	1be4      	subs	r4, r4, r7
 8000368:	2600      	movs	r6, #0
 800036a:	b11d      	cbz	r5, 8000374 <__udivmoddi4+0xa4>
 800036c:	40d4      	lsrs	r4, r2
 800036e:	2300      	movs	r3, #0
 8000370:	e9c5 4300 	strd	r4, r3, [r5]
 8000374:	4631      	mov	r1, r6
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d909      	bls.n	8000392 <__udivmoddi4+0xc2>
 800037e:	2d00      	cmp	r5, #0
 8000380:	f000 80ef 	beq.w	8000562 <__udivmoddi4+0x292>
 8000384:	2600      	movs	r6, #0
 8000386:	e9c5 0100 	strd	r0, r1, [r5]
 800038a:	4630      	mov	r0, r6
 800038c:	4631      	mov	r1, r6
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	fab3 f683 	clz	r6, r3
 8000396:	2e00      	cmp	r6, #0
 8000398:	d14a      	bne.n	8000430 <__udivmoddi4+0x160>
 800039a:	428b      	cmp	r3, r1
 800039c:	d302      	bcc.n	80003a4 <__udivmoddi4+0xd4>
 800039e:	4282      	cmp	r2, r0
 80003a0:	f200 80f9 	bhi.w	8000596 <__udivmoddi4+0x2c6>
 80003a4:	1a84      	subs	r4, r0, r2
 80003a6:	eb61 0303 	sbc.w	r3, r1, r3
 80003aa:	2001      	movs	r0, #1
 80003ac:	469e      	mov	lr, r3
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	d0e0      	beq.n	8000374 <__udivmoddi4+0xa4>
 80003b2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003b6:	e7dd      	b.n	8000374 <__udivmoddi4+0xa4>
 80003b8:	b902      	cbnz	r2, 80003bc <__udivmoddi4+0xec>
 80003ba:	deff      	udf	#255	; 0xff
 80003bc:	fab2 f282 	clz	r2, r2
 80003c0:	2a00      	cmp	r2, #0
 80003c2:	f040 8092 	bne.w	80004ea <__udivmoddi4+0x21a>
 80003c6:	eba1 010c 	sub.w	r1, r1, ip
 80003ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ce:	fa1f fe8c 	uxth.w	lr, ip
 80003d2:	2601      	movs	r6, #1
 80003d4:	0c20      	lsrs	r0, r4, #16
 80003d6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003da:	fb07 1113 	mls	r1, r7, r3, r1
 80003de:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e2:	fb0e f003 	mul.w	r0, lr, r3
 80003e6:	4288      	cmp	r0, r1
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x12c>
 80003ea:	eb1c 0101 	adds.w	r1, ip, r1
 80003ee:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x12a>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f200 80cb 	bhi.w	8000590 <__udivmoddi4+0x2c0>
 80003fa:	4643      	mov	r3, r8
 80003fc:	1a09      	subs	r1, r1, r0
 80003fe:	b2a4      	uxth	r4, r4
 8000400:	fbb1 f0f7 	udiv	r0, r1, r7
 8000404:	fb07 1110 	mls	r1, r7, r0, r1
 8000408:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800040c:	fb0e fe00 	mul.w	lr, lr, r0
 8000410:	45a6      	cmp	lr, r4
 8000412:	d908      	bls.n	8000426 <__udivmoddi4+0x156>
 8000414:	eb1c 0404 	adds.w	r4, ip, r4
 8000418:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800041c:	d202      	bcs.n	8000424 <__udivmoddi4+0x154>
 800041e:	45a6      	cmp	lr, r4
 8000420:	f200 80bb 	bhi.w	800059a <__udivmoddi4+0x2ca>
 8000424:	4608      	mov	r0, r1
 8000426:	eba4 040e 	sub.w	r4, r4, lr
 800042a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800042e:	e79c      	b.n	800036a <__udivmoddi4+0x9a>
 8000430:	f1c6 0720 	rsb	r7, r6, #32
 8000434:	40b3      	lsls	r3, r6
 8000436:	fa22 fc07 	lsr.w	ip, r2, r7
 800043a:	ea4c 0c03 	orr.w	ip, ip, r3
 800043e:	fa20 f407 	lsr.w	r4, r0, r7
 8000442:	fa01 f306 	lsl.w	r3, r1, r6
 8000446:	431c      	orrs	r4, r3
 8000448:	40f9      	lsrs	r1, r7
 800044a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800044e:	fa00 f306 	lsl.w	r3, r0, r6
 8000452:	fbb1 f8f9 	udiv	r8, r1, r9
 8000456:	0c20      	lsrs	r0, r4, #16
 8000458:	fa1f fe8c 	uxth.w	lr, ip
 800045c:	fb09 1118 	mls	r1, r9, r8, r1
 8000460:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000464:	fb08 f00e 	mul.w	r0, r8, lr
 8000468:	4288      	cmp	r0, r1
 800046a:	fa02 f206 	lsl.w	r2, r2, r6
 800046e:	d90b      	bls.n	8000488 <__udivmoddi4+0x1b8>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000478:	f080 8088 	bcs.w	800058c <__udivmoddi4+0x2bc>
 800047c:	4288      	cmp	r0, r1
 800047e:	f240 8085 	bls.w	800058c <__udivmoddi4+0x2bc>
 8000482:	f1a8 0802 	sub.w	r8, r8, #2
 8000486:	4461      	add	r1, ip
 8000488:	1a09      	subs	r1, r1, r0
 800048a:	b2a4      	uxth	r4, r4
 800048c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000490:	fb09 1110 	mls	r1, r9, r0, r1
 8000494:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000498:	fb00 fe0e 	mul.w	lr, r0, lr
 800049c:	458e      	cmp	lr, r1
 800049e:	d908      	bls.n	80004b2 <__udivmoddi4+0x1e2>
 80004a0:	eb1c 0101 	adds.w	r1, ip, r1
 80004a4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004a8:	d26c      	bcs.n	8000584 <__udivmoddi4+0x2b4>
 80004aa:	458e      	cmp	lr, r1
 80004ac:	d96a      	bls.n	8000584 <__udivmoddi4+0x2b4>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4461      	add	r1, ip
 80004b2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004b6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ba:	eba1 010e 	sub.w	r1, r1, lr
 80004be:	42a1      	cmp	r1, r4
 80004c0:	46c8      	mov	r8, r9
 80004c2:	46a6      	mov	lr, r4
 80004c4:	d356      	bcc.n	8000574 <__udivmoddi4+0x2a4>
 80004c6:	d053      	beq.n	8000570 <__udivmoddi4+0x2a0>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x212>
 80004ca:	ebb3 0208 	subs.w	r2, r3, r8
 80004ce:	eb61 010e 	sbc.w	r1, r1, lr
 80004d2:	fa01 f707 	lsl.w	r7, r1, r7
 80004d6:	fa22 f306 	lsr.w	r3, r2, r6
 80004da:	40f1      	lsrs	r1, r6
 80004dc:	431f      	orrs	r7, r3
 80004de:	e9c5 7100 	strd	r7, r1, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	40d8      	lsrs	r0, r3
 80004f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f4:	fa21 f303 	lsr.w	r3, r1, r3
 80004f8:	4091      	lsls	r1, r2
 80004fa:	4301      	orrs	r1, r0
 80004fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000500:	fa1f fe8c 	uxth.w	lr, ip
 8000504:	fbb3 f0f7 	udiv	r0, r3, r7
 8000508:	fb07 3610 	mls	r6, r7, r0, r3
 800050c:	0c0b      	lsrs	r3, r1, #16
 800050e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000512:	fb00 f60e 	mul.w	r6, r0, lr
 8000516:	429e      	cmp	r6, r3
 8000518:	fa04 f402 	lsl.w	r4, r4, r2
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x260>
 800051e:	eb1c 0303 	adds.w	r3, ip, r3
 8000522:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000526:	d22f      	bcs.n	8000588 <__udivmoddi4+0x2b8>
 8000528:	429e      	cmp	r6, r3
 800052a:	d92d      	bls.n	8000588 <__udivmoddi4+0x2b8>
 800052c:	3802      	subs	r0, #2
 800052e:	4463      	add	r3, ip
 8000530:	1b9b      	subs	r3, r3, r6
 8000532:	b289      	uxth	r1, r1
 8000534:	fbb3 f6f7 	udiv	r6, r3, r7
 8000538:	fb07 3316 	mls	r3, r7, r6, r3
 800053c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000540:	fb06 f30e 	mul.w	r3, r6, lr
 8000544:	428b      	cmp	r3, r1
 8000546:	d908      	bls.n	800055a <__udivmoddi4+0x28a>
 8000548:	eb1c 0101 	adds.w	r1, ip, r1
 800054c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000550:	d216      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000552:	428b      	cmp	r3, r1
 8000554:	d914      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000556:	3e02      	subs	r6, #2
 8000558:	4461      	add	r1, ip
 800055a:	1ac9      	subs	r1, r1, r3
 800055c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000560:	e738      	b.n	80003d4 <__udivmoddi4+0x104>
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e705      	b.n	8000374 <__udivmoddi4+0xa4>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e3      	b.n	8000334 <__udivmoddi4+0x64>
 800056c:	4618      	mov	r0, r3
 800056e:	e6f8      	b.n	8000362 <__udivmoddi4+0x92>
 8000570:	454b      	cmp	r3, r9
 8000572:	d2a9      	bcs.n	80004c8 <__udivmoddi4+0x1f8>
 8000574:	ebb9 0802 	subs.w	r8, r9, r2
 8000578:	eb64 0e0c 	sbc.w	lr, r4, ip
 800057c:	3801      	subs	r0, #1
 800057e:	e7a3      	b.n	80004c8 <__udivmoddi4+0x1f8>
 8000580:	4646      	mov	r6, r8
 8000582:	e7ea      	b.n	800055a <__udivmoddi4+0x28a>
 8000584:	4620      	mov	r0, r4
 8000586:	e794      	b.n	80004b2 <__udivmoddi4+0x1e2>
 8000588:	4640      	mov	r0, r8
 800058a:	e7d1      	b.n	8000530 <__udivmoddi4+0x260>
 800058c:	46d0      	mov	r8, sl
 800058e:	e77b      	b.n	8000488 <__udivmoddi4+0x1b8>
 8000590:	3b02      	subs	r3, #2
 8000592:	4461      	add	r1, ip
 8000594:	e732      	b.n	80003fc <__udivmoddi4+0x12c>
 8000596:	4630      	mov	r0, r6
 8000598:	e709      	b.n	80003ae <__udivmoddi4+0xde>
 800059a:	4464      	add	r4, ip
 800059c:	3802      	subs	r0, #2
 800059e:	e742      	b.n	8000426 <__udivmoddi4+0x156>

080005a0 <__aeabi_idiv0>:
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop

080005a4 <main>:

/* Private user code ---------------------------------------------------------*/


int main(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b08a      	sub	sp, #40	; 0x28
 80005a8:	af00      	add	r7, sp, #0
  /* Inicializacion de la HAL*/

  HAL_Init();
 80005aa:	f001 f917 	bl	80017dc <HAL_Init>
  /* Configure the system clock */
  SystemClock_Config();
 80005ae:	f000 f8c9 	bl	8000744 <SystemClock_Config>
  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  MX_GPIO_Init();
 80005b2:	f000 f931 	bl	8000818 <MX_GPIO_Init>


  /* Initialize all configured peripherals */
  HAL_Delay(4000); // tiempo usado para que la pantalla encienda
 80005b6:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 80005ba:	f001 f981 	bl	80018c0 <HAL_Delay>
  	  	  	  	   // la pantalla requiere mas seteo-fino
  uartInit();
 80005be:	f000 fd57 	bl	8001070 <uartInit>
  DS1307_Init();
 80005c2:	f000 fe8f 	bl	80012e4 <DS1307_Init>
  LCD04x16_init();
 80005c6:	f001 f807 	bl	80015d8 <LCD04x16_init>
  // genere un cambio en el dis mes y año.
  // objetivo proximo, recibir este dato por uart.


// crea variabele vector con el dato "235840"
char Hora1[]="235910";
 80005ca:	4a28      	ldr	r2, [pc, #160]	; (800066c <main+0xc8>)
 80005cc:	f107 0318 	add.w	r3, r7, #24
 80005d0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80005d4:	6018      	str	r0, [r3, #0]
 80005d6:	3304      	adds	r3, #4
 80005d8:	8019      	strh	r1, [r3, #0]
 80005da:	3302      	adds	r3, #2
 80005dc:	0c0a      	lsrs	r2, r1, #16
 80005de:	701a      	strb	r2, [r3, #0]
char Fecha1[]="311223";
 80005e0:	4a23      	ldr	r2, [pc, #140]	; (8000670 <main+0xcc>)
 80005e2:	f107 0310 	add.w	r3, r7, #16
 80005e6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80005ea:	6018      	str	r0, [r3, #0]
 80005ec:	3304      	adds	r3, #4
 80005ee:	8019      	strh	r1, [r3, #0]
 80005f0:	3302      	adds	r3, #2
 80005f2:	0c0a      	lsrs	r2, r1, #16
 80005f4:	701a      	strb	r2, [r3, #0]

// crea un puntero que siempre mira solo el primer valor 0 del vector
char *ptrDate=Fecha1;
 80005f6:	f107 0310 	add.w	r3, r7, #16
 80005fa:	627b      	str	r3, [r7, #36]	; 0x24
char *ptrTime=Hora1;
 80005fc:	f107 0318 	add.w	r3, r7, #24
 8000600:	623b      	str	r3, [r7, #32]
char var_date[6];
char var_time[6];

if ( API_OK != DS1307_SetDate(ptrDate))
 8000602:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000604:	f000 fecc 	bl	80013a0 <DS1307_SetDate>
 8000608:	4603      	mov	r3, r0
 800060a:	2b00      	cmp	r3, #0
 800060c:	d001      	beq.n	8000612 <main+0x6e>
	Error_Handler();
 800060e:	f000 fa13 	bl	8000a38 <Error_Handler>

if ( API_OK != DS1307_SetTime(ptrTime))
 8000612:	6a38      	ldr	r0, [r7, #32]
 8000614:	f000 fe6c 	bl	80012f0 <DS1307_SetTime>
 8000618:	4603      	mov	r3, r0
 800061a:	2b00      	cmp	r3, #0
 800061c:	d001      	beq.n	8000622 <main+0x7e>
		Error_Handler();
 800061e:	f000 fa0b 	bl	8000a38 <Error_Handler>
  while (1)
  {
      // falta agregar la solucion para la MEF
	  // que temporizará la entrada a cada periferico

	  DS1307_GetDate(var_date);  //obtiene la fecha (6Bytes)
 8000622:	f107 0308 	add.w	r3, r7, #8
 8000626:	4618      	mov	r0, r3
 8000628:	f000 ff12 	bl	8001450 <DS1307_GetDate>
	  DS1307_GetTime(var_time);  //obtiene la Hora  (6Bytes)
 800062c:	463b      	mov	r3, r7
 800062e:	4618      	mov	r0, r3
 8000630:	f000 ff69 	bl	8001506 <DS1307_GetTime>

	  send_LCD_Date(var_date);   //Escribe LCD fecha
 8000634:	f107 0308 	add.w	r3, r7, #8
 8000638:	4618      	mov	r0, r3
 800063a:	f000 f81b 	bl	8000674 <send_LCD_Date>
	  	  	  	  	  	  	  	 //agregando separadores "/"
	  send_LCD_Time(var_time);   //Escribe LCD hora
 800063e:	463b      	mov	r3, r7
 8000640:	4618      	mov	r0, r3
 8000642:	f000 f84b 	bl	80006dc <send_LCD_Time>
	  	  	  	  	  	  	  	 //agregando separadores ":"

      uartSendStringSize(var_date, len_DateTime);
 8000646:	f107 0308 	add.w	r3, r7, #8
 800064a:	2106      	movs	r1, #6
 800064c:	4618      	mov	r0, r3
 800064e:	f000 fe1b 	bl	8001288 <uartSendStringSize>
      //envia al PC la fecha en (6Bytes) data reducida
      uartSendStringSize(var_time, len_DateTime);
 8000652:	463b      	mov	r3, r7
 8000654:	2106      	movs	r1, #6
 8000656:	4618      	mov	r0, r3
 8000658:	f000 fe16 	bl	8001288 <uartSendStringSize>
      //envia al PC la fecha en (6Bytes) data reducida
      //el objetivo es escribir en una SD con ese formato
      //y extender la cantidad de valores de sensores que podria
      //almacenar (con este formato reducido de FECHAyHORA.
      //en una memoria de 4G, me daria para 5 meses. necesito llegar al año.
      uartTX_CMD_Home();   //solo para presentacion visual en PC.
 800065c:	f000 fddc 	bl	8001218 <uartTX_CMD_Home>

      HAL_Delay(500);   // eliminarlo para que no sea bloqueante el ciclo.
 8000660:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000664:	f001 f92c 	bl	80018c0 <HAL_Delay>
	  DS1307_GetDate(var_date);  //obtiene la fecha (6Bytes)
 8000668:	e7db      	b.n	8000622 <main+0x7e>
 800066a:	bf00      	nop
 800066c:	08004fc8 	.word	0x08004fc8
 8000670:	08004fd0 	.word	0x08004fd0

08000674 <send_LCD_Date>:
  }
}
//coloca en pantalla la FECHA agregando "dd/mm/yy"

void send_LCD_Date (char date[len_DateTime])
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b082      	sub	sp, #8
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
	  LCD04x16_TxChar(date[0]);
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	781b      	ldrb	r3, [r3, #0]
 8000680:	4618      	mov	r0, r3
 8000682:	f001 f816 	bl	80016b2 <LCD04x16_TxChar>
	  LCD04x16_TxChar(date[1]);
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	3301      	adds	r3, #1
 800068a:	781b      	ldrb	r3, [r3, #0]
 800068c:	4618      	mov	r0, r3
 800068e:	f001 f810 	bl	80016b2 <LCD04x16_TxChar>
	  LCD04x16_TxChar('/');    //0x2f carater /
 8000692:	202f      	movs	r0, #47	; 0x2f
 8000694:	f001 f80d 	bl	80016b2 <LCD04x16_TxChar>
	  LCD04x16_TxChar(date[2]);
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	3302      	adds	r3, #2
 800069c:	781b      	ldrb	r3, [r3, #0]
 800069e:	4618      	mov	r0, r3
 80006a0:	f001 f807 	bl	80016b2 <LCD04x16_TxChar>
	  LCD04x16_TxChar(date[3]);
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	3303      	adds	r3, #3
 80006a8:	781b      	ldrb	r3, [r3, #0]
 80006aa:	4618      	mov	r0, r3
 80006ac:	f001 f801 	bl	80016b2 <LCD04x16_TxChar>
	  LCD04x16_TxChar('/');    //0x2f carater /
 80006b0:	202f      	movs	r0, #47	; 0x2f
 80006b2:	f000 fffe 	bl	80016b2 <LCD04x16_TxChar>
	  LCD04x16_TxChar(date[4]);
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	3304      	adds	r3, #4
 80006ba:	781b      	ldrb	r3, [r3, #0]
 80006bc:	4618      	mov	r0, r3
 80006be:	f000 fff8 	bl	80016b2 <LCD04x16_TxChar>
	  LCD04x16_TxChar(date[5]);
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	3305      	adds	r3, #5
 80006c6:	781b      	ldrb	r3, [r3, #0]
 80006c8:	4618      	mov	r0, r3
 80006ca:	f000 fff2 	bl	80016b2 <LCD04x16_TxChar>
	  LCD04x16_TxChar('_');    //0x5f carater _
 80006ce:	205f      	movs	r0, #95	; 0x5f
 80006d0:	f000 ffef 	bl	80016b2 <LCD04x16_TxChar>
}
 80006d4:	bf00      	nop
 80006d6:	3708      	adds	r7, #8
 80006d8:	46bd      	mov	sp, r7
 80006da:	bd80      	pop	{r7, pc}

080006dc <send_LCD_Time>:


//coloca en pantalla la HORA agregando 'hh:mm:ss'
void send_LCD_Time (char time[len_DateTime])
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b082      	sub	sp, #8
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]
	  LCD04x16_TxChar(time[0]);
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	781b      	ldrb	r3, [r3, #0]
 80006e8:	4618      	mov	r0, r3
 80006ea:	f000 ffe2 	bl	80016b2 <LCD04x16_TxChar>
	  LCD04x16_TxChar(time[1]);
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	3301      	adds	r3, #1
 80006f2:	781b      	ldrb	r3, [r3, #0]
 80006f4:	4618      	mov	r0, r3
 80006f6:	f000 ffdc 	bl	80016b2 <LCD04x16_TxChar>
	  LCD04x16_TxChar(':');    //0x3A carater :
 80006fa:	203a      	movs	r0, #58	; 0x3a
 80006fc:	f000 ffd9 	bl	80016b2 <LCD04x16_TxChar>
	  LCD04x16_TxChar(time[2]);
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	3302      	adds	r3, #2
 8000704:	781b      	ldrb	r3, [r3, #0]
 8000706:	4618      	mov	r0, r3
 8000708:	f000 ffd3 	bl	80016b2 <LCD04x16_TxChar>
	  LCD04x16_TxChar(time[3]);
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	3303      	adds	r3, #3
 8000710:	781b      	ldrb	r3, [r3, #0]
 8000712:	4618      	mov	r0, r3
 8000714:	f000 ffcd 	bl	80016b2 <LCD04x16_TxChar>
	  LCD04x16_TxChar(':');    //0x3A carater :
 8000718:	203a      	movs	r0, #58	; 0x3a
 800071a:	f000 ffca 	bl	80016b2 <LCD04x16_TxChar>
	  LCD04x16_TxChar(time[4]);
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	3304      	adds	r3, #4
 8000722:	781b      	ldrb	r3, [r3, #0]
 8000724:	4618      	mov	r0, r3
 8000726:	f000 ffc4 	bl	80016b2 <LCD04x16_TxChar>
	  LCD04x16_TxChar(time[5]);
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	3305      	adds	r3, #5
 800072e:	781b      	ldrb	r3, [r3, #0]
 8000730:	4618      	mov	r0, r3
 8000732:	f000 ffbe 	bl	80016b2 <LCD04x16_TxChar>
	  LCD04x16_TxCmd(0x80);    // direccion de pantalla esquina izquierda
 8000736:	2080      	movs	r0, #128	; 0x80
 8000738:	f000 ff90 	bl	800165c <LCD04x16_TxCmd>
}
 800073c:	bf00      	nop
 800073e:	3708      	adds	r7, #8
 8000740:	46bd      	mov	sp, r7
 8000742:	bd80      	pop	{r7, pc}

08000744 <SystemClock_Config>:


void SystemClock_Config(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b094      	sub	sp, #80	; 0x50
 8000748:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800074a:	f107 0320 	add.w	r3, r7, #32
 800074e:	2230      	movs	r2, #48	; 0x30
 8000750:	2100      	movs	r1, #0
 8000752:	4618      	mov	r0, r3
 8000754:	f003 fc62 	bl	800401c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000758:	f107 030c 	add.w	r3, r7, #12
 800075c:	2200      	movs	r2, #0
 800075e:	601a      	str	r2, [r3, #0]
 8000760:	605a      	str	r2, [r3, #4]
 8000762:	609a      	str	r2, [r3, #8]
 8000764:	60da      	str	r2, [r3, #12]
 8000766:	611a      	str	r2, [r3, #16]

  __HAL_RCC_PWR_CLK_ENABLE();
 8000768:	2300      	movs	r3, #0
 800076a:	60bb      	str	r3, [r7, #8]
 800076c:	4b28      	ldr	r3, [pc, #160]	; (8000810 <SystemClock_Config+0xcc>)
 800076e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000770:	4a27      	ldr	r2, [pc, #156]	; (8000810 <SystemClock_Config+0xcc>)
 8000772:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000776:	6413      	str	r3, [r2, #64]	; 0x40
 8000778:	4b25      	ldr	r3, [pc, #148]	; (8000810 <SystemClock_Config+0xcc>)
 800077a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800077c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000780:	60bb      	str	r3, [r7, #8]
 8000782:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000784:	2300      	movs	r3, #0
 8000786:	607b      	str	r3, [r7, #4]
 8000788:	4b22      	ldr	r3, [pc, #136]	; (8000814 <SystemClock_Config+0xd0>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	4a21      	ldr	r2, [pc, #132]	; (8000814 <SystemClock_Config+0xd0>)
 800078e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000792:	6013      	str	r3, [r2, #0]
 8000794:	4b1f      	ldr	r3, [pc, #124]	; (8000814 <SystemClock_Config+0xd0>)
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800079c:	607b      	str	r3, [r7, #4]
 800079e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007a0:	2301      	movs	r3, #1
 80007a2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80007a4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80007a8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007aa:	2302      	movs	r3, #2
 80007ac:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007ae:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80007b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80007b4:	2304      	movs	r3, #4
 80007b6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80007b8:	23a8      	movs	r3, #168	; 0xa8
 80007ba:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007bc:	2302      	movs	r3, #2
 80007be:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80007c0:	2307      	movs	r3, #7
 80007c2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007c4:	f107 0320 	add.w	r3, r7, #32
 80007c8:	4618      	mov	r0, r3
 80007ca:	f002 fb73 	bl	8002eb4 <HAL_RCC_OscConfig>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d001      	beq.n	80007d8 <SystemClock_Config+0x94>
    Error_Handler();
 80007d4:	f000 f930 	bl	8000a38 <Error_Handler>

  /** Initializes the CPU, AHB and APB buses clocks  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007d8:	230f      	movs	r3, #15
 80007da:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007dc:	2302      	movs	r3, #2
 80007de:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007e0:	2300      	movs	r3, #0
 80007e2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007e4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80007e8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007ee:	61fb      	str	r3, [r7, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80007f0:	f107 030c 	add.w	r3, r7, #12
 80007f4:	2105      	movs	r1, #5
 80007f6:	4618      	mov	r0, r3
 80007f8:	f002 fdd4 	bl	80033a4 <HAL_RCC_ClockConfig>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d001      	beq.n	8000806 <SystemClock_Config+0xc2>
    Error_Handler();
 8000802:	f000 f919 	bl	8000a38 <Error_Handler>
}
 8000806:	bf00      	nop
 8000808:	3750      	adds	r7, #80	; 0x50
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	40023800 	.word	0x40023800
 8000814:	40007000 	.word	0x40007000

08000818 <MX_GPIO_Init>:


//No se utiliza el configurador de GPIO,
//cada driver configura sus puertos.
static void MX_GPIO_Init(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b08c      	sub	sp, #48	; 0x30
 800081c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800081e:	f107 031c 	add.w	r3, r7, #28
 8000822:	2200      	movs	r2, #0
 8000824:	601a      	str	r2, [r3, #0]
 8000826:	605a      	str	r2, [r3, #4]
 8000828:	609a      	str	r2, [r3, #8]
 800082a:	60da      	str	r2, [r3, #12]
 800082c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800082e:	2300      	movs	r3, #0
 8000830:	61bb      	str	r3, [r7, #24]
 8000832:	4b7c      	ldr	r3, [pc, #496]	; (8000a24 <MX_GPIO_Init+0x20c>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000836:	4a7b      	ldr	r2, [pc, #492]	; (8000a24 <MX_GPIO_Init+0x20c>)
 8000838:	f043 0304 	orr.w	r3, r3, #4
 800083c:	6313      	str	r3, [r2, #48]	; 0x30
 800083e:	4b79      	ldr	r3, [pc, #484]	; (8000a24 <MX_GPIO_Init+0x20c>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000842:	f003 0304 	and.w	r3, r3, #4
 8000846:	61bb      	str	r3, [r7, #24]
 8000848:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800084a:	2300      	movs	r3, #0
 800084c:	617b      	str	r3, [r7, #20]
 800084e:	4b75      	ldr	r3, [pc, #468]	; (8000a24 <MX_GPIO_Init+0x20c>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000852:	4a74      	ldr	r2, [pc, #464]	; (8000a24 <MX_GPIO_Init+0x20c>)
 8000854:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000858:	6313      	str	r3, [r2, #48]	; 0x30
 800085a:	4b72      	ldr	r3, [pc, #456]	; (8000a24 <MX_GPIO_Init+0x20c>)
 800085c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000862:	617b      	str	r3, [r7, #20]
 8000864:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000866:	2300      	movs	r3, #0
 8000868:	613b      	str	r3, [r7, #16]
 800086a:	4b6e      	ldr	r3, [pc, #440]	; (8000a24 <MX_GPIO_Init+0x20c>)
 800086c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086e:	4a6d      	ldr	r2, [pc, #436]	; (8000a24 <MX_GPIO_Init+0x20c>)
 8000870:	f043 0301 	orr.w	r3, r3, #1
 8000874:	6313      	str	r3, [r2, #48]	; 0x30
 8000876:	4b6b      	ldr	r3, [pc, #428]	; (8000a24 <MX_GPIO_Init+0x20c>)
 8000878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087a:	f003 0301 	and.w	r3, r3, #1
 800087e:	613b      	str	r3, [r7, #16]
 8000880:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000882:	2300      	movs	r3, #0
 8000884:	60fb      	str	r3, [r7, #12]
 8000886:	4b67      	ldr	r3, [pc, #412]	; (8000a24 <MX_GPIO_Init+0x20c>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088a:	4a66      	ldr	r2, [pc, #408]	; (8000a24 <MX_GPIO_Init+0x20c>)
 800088c:	f043 0302 	orr.w	r3, r3, #2
 8000890:	6313      	str	r3, [r2, #48]	; 0x30
 8000892:	4b64      	ldr	r3, [pc, #400]	; (8000a24 <MX_GPIO_Init+0x20c>)
 8000894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000896:	f003 0302 	and.w	r3, r3, #2
 800089a:	60fb      	str	r3, [r7, #12]
 800089c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800089e:	2300      	movs	r3, #0
 80008a0:	60bb      	str	r3, [r7, #8]
 80008a2:	4b60      	ldr	r3, [pc, #384]	; (8000a24 <MX_GPIO_Init+0x20c>)
 80008a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a6:	4a5f      	ldr	r2, [pc, #380]	; (8000a24 <MX_GPIO_Init+0x20c>)
 80008a8:	f043 0308 	orr.w	r3, r3, #8
 80008ac:	6313      	str	r3, [r2, #48]	; 0x30
 80008ae:	4b5d      	ldr	r3, [pc, #372]	; (8000a24 <MX_GPIO_Init+0x20c>)
 80008b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b2:	f003 0308 	and.w	r3, r3, #8
 80008b6:	60bb      	str	r3, [r7, #8]
 80008b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80008ba:	2300      	movs	r3, #0
 80008bc:	607b      	str	r3, [r7, #4]
 80008be:	4b59      	ldr	r3, [pc, #356]	; (8000a24 <MX_GPIO_Init+0x20c>)
 80008c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c2:	4a58      	ldr	r2, [pc, #352]	; (8000a24 <MX_GPIO_Init+0x20c>)
 80008c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008c8:	6313      	str	r3, [r2, #48]	; 0x30
 80008ca:	4b56      	ldr	r3, [pc, #344]	; (8000a24 <MX_GPIO_Init+0x20c>)
 80008cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80008d2:	607b      	str	r3, [r7, #4]
 80008d4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80008d6:	2200      	movs	r2, #0
 80008d8:	f244 0181 	movw	r1, #16513	; 0x4081
 80008dc:	4852      	ldr	r0, [pc, #328]	; (8000a28 <MX_GPIO_Init+0x210>)
 80008de:	f001 faa5 	bl	8001e2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80008e2:	2200      	movs	r2, #0
 80008e4:	2140      	movs	r1, #64	; 0x40
 80008e6:	4851      	ldr	r0, [pc, #324]	; (8000a2c <MX_GPIO_Init+0x214>)
 80008e8:	f001 faa0 	bl	8001e2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80008ec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008f2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80008f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f8:	2300      	movs	r3, #0
 80008fa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80008fc:	f107 031c 	add.w	r3, r7, #28
 8000900:	4619      	mov	r1, r3
 8000902:	484b      	ldr	r0, [pc, #300]	; (8000a30 <MX_GPIO_Init+0x218>)
 8000904:	f001 f8e6 	bl	8001ad4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000908:	2332      	movs	r3, #50	; 0x32
 800090a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800090c:	2302      	movs	r3, #2
 800090e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000910:	2300      	movs	r3, #0
 8000912:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000914:	2303      	movs	r3, #3
 8000916:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000918:	230b      	movs	r3, #11
 800091a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800091c:	f107 031c 	add.w	r3, r7, #28
 8000920:	4619      	mov	r1, r3
 8000922:	4843      	ldr	r0, [pc, #268]	; (8000a30 <MX_GPIO_Init+0x218>)
 8000924:	f001 f8d6 	bl	8001ad4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000928:	2386      	movs	r3, #134	; 0x86
 800092a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800092c:	2302      	movs	r3, #2
 800092e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000930:	2300      	movs	r3, #0
 8000932:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000934:	2303      	movs	r3, #3
 8000936:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000938:	230b      	movs	r3, #11
 800093a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800093c:	f107 031c 	add.w	r3, r7, #28
 8000940:	4619      	mov	r1, r3
 8000942:	483c      	ldr	r0, [pc, #240]	; (8000a34 <MX_GPIO_Init+0x21c>)
 8000944:	f001 f8c6 	bl	8001ad4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000948:	f244 0381 	movw	r3, #16513	; 0x4081
 800094c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800094e:	2301      	movs	r3, #1
 8000950:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000952:	2300      	movs	r3, #0
 8000954:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000956:	2300      	movs	r3, #0
 8000958:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800095a:	f107 031c 	add.w	r3, r7, #28
 800095e:	4619      	mov	r1, r3
 8000960:	4831      	ldr	r0, [pc, #196]	; (8000a28 <MX_GPIO_Init+0x210>)
 8000962:	f001 f8b7 	bl	8001ad4 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000966:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800096a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800096c:	2302      	movs	r3, #2
 800096e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000970:	2300      	movs	r3, #0
 8000972:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000974:	2303      	movs	r3, #3
 8000976:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000978:	230b      	movs	r3, #11
 800097a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800097c:	f107 031c 	add.w	r3, r7, #28
 8000980:	4619      	mov	r1, r3
 8000982:	4829      	ldr	r0, [pc, #164]	; (8000a28 <MX_GPIO_Init+0x210>)
 8000984:	f001 f8a6 	bl	8001ad4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000988:	2340      	movs	r3, #64	; 0x40
 800098a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800098c:	2301      	movs	r3, #1
 800098e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000990:	2300      	movs	r3, #0
 8000992:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000994:	2300      	movs	r3, #0
 8000996:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000998:	f107 031c 	add.w	r3, r7, #28
 800099c:	4619      	mov	r1, r3
 800099e:	4823      	ldr	r0, [pc, #140]	; (8000a2c <MX_GPIO_Init+0x214>)
 80009a0:	f001 f898 	bl	8001ad4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80009a4:	2380      	movs	r3, #128	; 0x80
 80009a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009a8:	2300      	movs	r3, #0
 80009aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ac:	2300      	movs	r3, #0
 80009ae:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80009b0:	f107 031c 	add.w	r3, r7, #28
 80009b4:	4619      	mov	r1, r3
 80009b6:	481d      	ldr	r0, [pc, #116]	; (8000a2c <MX_GPIO_Init+0x214>)
 80009b8:	f001 f88c 	bl	8001ad4 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80009bc:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80009c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009c2:	2302      	movs	r3, #2
 80009c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c6:	2300      	movs	r3, #0
 80009c8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009ca:	2303      	movs	r3, #3
 80009cc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80009ce:	230a      	movs	r3, #10
 80009d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009d2:	f107 031c 	add.w	r3, r7, #28
 80009d6:	4619      	mov	r1, r3
 80009d8:	4816      	ldr	r0, [pc, #88]	; (8000a34 <MX_GPIO_Init+0x21c>)
 80009da:	f001 f87b 	bl	8001ad4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80009de:	f44f 7300 	mov.w	r3, #512	; 0x200
 80009e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009e4:	2300      	movs	r3, #0
 80009e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e8:	2300      	movs	r3, #0
 80009ea:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80009ec:	f107 031c 	add.w	r3, r7, #28
 80009f0:	4619      	mov	r1, r3
 80009f2:	4810      	ldr	r0, [pc, #64]	; (8000a34 <MX_GPIO_Init+0x21c>)
 80009f4:	f001 f86e 	bl	8001ad4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80009f8:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80009fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009fe:	2302      	movs	r3, #2
 8000a00:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a02:	2300      	movs	r3, #0
 8000a04:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a06:	2303      	movs	r3, #3
 8000a08:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a0a:	230b      	movs	r3, #11
 8000a0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000a0e:	f107 031c 	add.w	r3, r7, #28
 8000a12:	4619      	mov	r1, r3
 8000a14:	4805      	ldr	r0, [pc, #20]	; (8000a2c <MX_GPIO_Init+0x214>)
 8000a16:	f001 f85d 	bl	8001ad4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a1a:	bf00      	nop
 8000a1c:	3730      	adds	r7, #48	; 0x30
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	40023800 	.word	0x40023800
 8000a28:	40020400 	.word	0x40020400
 8000a2c:	40021800 	.word	0x40021800
 8000a30:	40020800 	.word	0x40020800
 8000a34:	40020000 	.word	0x40020000

08000a38 <Error_Handler>:


// Bloquea el programa en caso de Error
void Error_Handler(void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a3c:	b672      	cpsid	i
}
 8000a3e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a40:	e7fe      	b.n	8000a40 <Error_Handler+0x8>
	...

08000a44 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	b083      	sub	sp, #12
 8000a48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	607b      	str	r3, [r7, #4]
 8000a4e:	4b10      	ldr	r3, [pc, #64]	; (8000a90 <HAL_MspInit+0x4c>)
 8000a50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a52:	4a0f      	ldr	r2, [pc, #60]	; (8000a90 <HAL_MspInit+0x4c>)
 8000a54:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a58:	6453      	str	r3, [r2, #68]	; 0x44
 8000a5a:	4b0d      	ldr	r3, [pc, #52]	; (8000a90 <HAL_MspInit+0x4c>)
 8000a5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a62:	607b      	str	r3, [r7, #4]
 8000a64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a66:	2300      	movs	r3, #0
 8000a68:	603b      	str	r3, [r7, #0]
 8000a6a:	4b09      	ldr	r3, [pc, #36]	; (8000a90 <HAL_MspInit+0x4c>)
 8000a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a6e:	4a08      	ldr	r2, [pc, #32]	; (8000a90 <HAL_MspInit+0x4c>)
 8000a70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a74:	6413      	str	r3, [r2, #64]	; 0x40
 8000a76:	4b06      	ldr	r3, [pc, #24]	; (8000a90 <HAL_MspInit+0x4c>)
 8000a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a7e:	603b      	str	r3, [r7, #0]
 8000a80:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a82:	bf00      	nop
 8000a84:	370c      	adds	r7, #12
 8000a86:	46bd      	mov	sp, r7
 8000a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8c:	4770      	bx	lr
 8000a8e:	bf00      	nop
 8000a90:	40023800 	.word	0x40023800

08000a94 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b08a      	sub	sp, #40	; 0x28
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a9c:	f107 0314 	add.w	r3, r7, #20
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	601a      	str	r2, [r3, #0]
 8000aa4:	605a      	str	r2, [r3, #4]
 8000aa6:	609a      	str	r2, [r3, #8]
 8000aa8:	60da      	str	r2, [r3, #12]
 8000aaa:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	4a19      	ldr	r2, [pc, #100]	; (8000b18 <HAL_I2C_MspInit+0x84>)
 8000ab2:	4293      	cmp	r3, r2
 8000ab4:	d12c      	bne.n	8000b10 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	613b      	str	r3, [r7, #16]
 8000aba:	4b18      	ldr	r3, [pc, #96]	; (8000b1c <HAL_I2C_MspInit+0x88>)
 8000abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000abe:	4a17      	ldr	r2, [pc, #92]	; (8000b1c <HAL_I2C_MspInit+0x88>)
 8000ac0:	f043 0302 	orr.w	r3, r3, #2
 8000ac4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ac6:	4b15      	ldr	r3, [pc, #84]	; (8000b1c <HAL_I2C_MspInit+0x88>)
 8000ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aca:	f003 0302 	and.w	r3, r3, #2
 8000ace:	613b      	str	r3, [r7, #16]
 8000ad0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000ad2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000ad6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ad8:	2312      	movs	r3, #18
 8000ada:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000adc:	2300      	movs	r3, #0
 8000ade:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ae0:	2303      	movs	r3, #3
 8000ae2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000ae4:	2304      	movs	r3, #4
 8000ae6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ae8:	f107 0314 	add.w	r3, r7, #20
 8000aec:	4619      	mov	r1, r3
 8000aee:	480c      	ldr	r0, [pc, #48]	; (8000b20 <HAL_I2C_MspInit+0x8c>)
 8000af0:	f000 fff0 	bl	8001ad4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000af4:	2300      	movs	r3, #0
 8000af6:	60fb      	str	r3, [r7, #12]
 8000af8:	4b08      	ldr	r3, [pc, #32]	; (8000b1c <HAL_I2C_MspInit+0x88>)
 8000afa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000afc:	4a07      	ldr	r2, [pc, #28]	; (8000b1c <HAL_I2C_MspInit+0x88>)
 8000afe:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b02:	6413      	str	r3, [r2, #64]	; 0x40
 8000b04:	4b05      	ldr	r3, [pc, #20]	; (8000b1c <HAL_I2C_MspInit+0x88>)
 8000b06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b08:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b0c:	60fb      	str	r3, [r7, #12]
 8000b0e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000b10:	bf00      	nop
 8000b12:	3728      	adds	r7, #40	; 0x28
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}
 8000b18:	40005400 	.word	0x40005400
 8000b1c:	40023800 	.word	0x40023800
 8000b20:	40020400 	.word	0x40020400

08000b24 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b08a      	sub	sp, #40	; 0x28
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b2c:	f107 0314 	add.w	r3, r7, #20
 8000b30:	2200      	movs	r2, #0
 8000b32:	601a      	str	r2, [r3, #0]
 8000b34:	605a      	str	r2, [r3, #4]
 8000b36:	609a      	str	r2, [r3, #8]
 8000b38:	60da      	str	r2, [r3, #12]
 8000b3a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	4a18      	ldr	r2, [pc, #96]	; (8000ba4 <HAL_UART_MspInit+0x80>)
 8000b42:	4293      	cmp	r3, r2
 8000b44:	d129      	bne.n	8000b9a <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000b46:	2300      	movs	r3, #0
 8000b48:	613b      	str	r3, [r7, #16]
 8000b4a:	4b17      	ldr	r3, [pc, #92]	; (8000ba8 <HAL_UART_MspInit+0x84>)
 8000b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b4e:	4a16      	ldr	r2, [pc, #88]	; (8000ba8 <HAL_UART_MspInit+0x84>)
 8000b50:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b54:	6413      	str	r3, [r2, #64]	; 0x40
 8000b56:	4b14      	ldr	r3, [pc, #80]	; (8000ba8 <HAL_UART_MspInit+0x84>)
 8000b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b5a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000b5e:	613b      	str	r3, [r7, #16]
 8000b60:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b62:	2300      	movs	r3, #0
 8000b64:	60fb      	str	r3, [r7, #12]
 8000b66:	4b10      	ldr	r3, [pc, #64]	; (8000ba8 <HAL_UART_MspInit+0x84>)
 8000b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6a:	4a0f      	ldr	r2, [pc, #60]	; (8000ba8 <HAL_UART_MspInit+0x84>)
 8000b6c:	f043 0308 	orr.w	r3, r3, #8
 8000b70:	6313      	str	r3, [r2, #48]	; 0x30
 8000b72:	4b0d      	ldr	r3, [pc, #52]	; (8000ba8 <HAL_UART_MspInit+0x84>)
 8000b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b76:	f003 0308 	and.w	r3, r3, #8
 8000b7a:	60fb      	str	r3, [r7, #12]
 8000b7c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
//    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b7e:	2302      	movs	r3, #2
 8000b80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b82:	2300      	movs	r3, #0
 8000b84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b86:	2303      	movs	r3, #3
 8000b88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000b8a:	2307      	movs	r3, #7
 8000b8c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b8e:	f107 0314 	add.w	r3, r7, #20
 8000b92:	4619      	mov	r1, r3
 8000b94:	4805      	ldr	r0, [pc, #20]	; (8000bac <HAL_UART_MspInit+0x88>)
 8000b96:	f000 ff9d 	bl	8001ad4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000b9a:	bf00      	nop
 8000b9c:	3728      	adds	r7, #40	; 0x28
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	40004800 	.word	0x40004800
 8000ba8:	40023800 	.word	0x40023800
 8000bac:	40020c00 	.word	0x40020c00

08000bb0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bb4:	e7fe      	b.n	8000bb4 <NMI_Handler+0x4>

08000bb6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bb6:	b480      	push	{r7}
 8000bb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bba:	e7fe      	b.n	8000bba <HardFault_Handler+0x4>

08000bbc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bc0:	e7fe      	b.n	8000bc0 <MemManage_Handler+0x4>

08000bc2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bc2:	b480      	push	{r7}
 8000bc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bc6:	e7fe      	b.n	8000bc6 <BusFault_Handler+0x4>

08000bc8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bcc:	e7fe      	b.n	8000bcc <UsageFault_Handler+0x4>

08000bce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bce:	b480      	push	{r7}
 8000bd0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bd2:	bf00      	nop
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bda:	4770      	bx	lr

08000bdc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000be0:	bf00      	nop
 8000be2:	46bd      	mov	sp, r7
 8000be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be8:	4770      	bx	lr

08000bea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bea:	b480      	push	{r7}
 8000bec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bee:	bf00      	nop
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf6:	4770      	bx	lr

08000bf8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bfc:	f000 fe40 	bl	8001880 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c00:	bf00      	nop
 8000c02:	bd80      	pop	{r7, pc}

08000c04 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
  return 1;
 8000c08:	2301      	movs	r3, #1
}
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c12:	4770      	bx	lr

08000c14 <_kill>:

int _kill(int pid, int sig)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b082      	sub	sp, #8
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
 8000c1c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000c1e:	f003 f9c1 	bl	8003fa4 <__errno>
 8000c22:	4603      	mov	r3, r0
 8000c24:	2216      	movs	r2, #22
 8000c26:	601a      	str	r2, [r3, #0]
  return -1;
 8000c28:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	3708      	adds	r7, #8
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bd80      	pop	{r7, pc}

08000c34 <_exit>:

void _exit (int status)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b082      	sub	sp, #8
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000c3c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000c40:	6878      	ldr	r0, [r7, #4]
 8000c42:	f7ff ffe7 	bl	8000c14 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000c46:	e7fe      	b.n	8000c46 <_exit+0x12>

08000c48 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b086      	sub	sp, #24
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	60f8      	str	r0, [r7, #12]
 8000c50:	60b9      	str	r1, [r7, #8]
 8000c52:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c54:	2300      	movs	r3, #0
 8000c56:	617b      	str	r3, [r7, #20]
 8000c58:	e00a      	b.n	8000c70 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000c5a:	f3af 8000 	nop.w
 8000c5e:	4601      	mov	r1, r0
 8000c60:	68bb      	ldr	r3, [r7, #8]
 8000c62:	1c5a      	adds	r2, r3, #1
 8000c64:	60ba      	str	r2, [r7, #8]
 8000c66:	b2ca      	uxtb	r2, r1
 8000c68:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c6a:	697b      	ldr	r3, [r7, #20]
 8000c6c:	3301      	adds	r3, #1
 8000c6e:	617b      	str	r3, [r7, #20]
 8000c70:	697a      	ldr	r2, [r7, #20]
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	429a      	cmp	r2, r3
 8000c76:	dbf0      	blt.n	8000c5a <_read+0x12>
  }

  return len;
 8000c78:	687b      	ldr	r3, [r7, #4]
}
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	3718      	adds	r7, #24
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}

08000c82 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000c82:	b580      	push	{r7, lr}
 8000c84:	b086      	sub	sp, #24
 8000c86:	af00      	add	r7, sp, #0
 8000c88:	60f8      	str	r0, [r7, #12]
 8000c8a:	60b9      	str	r1, [r7, #8]
 8000c8c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c8e:	2300      	movs	r3, #0
 8000c90:	617b      	str	r3, [r7, #20]
 8000c92:	e009      	b.n	8000ca8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000c94:	68bb      	ldr	r3, [r7, #8]
 8000c96:	1c5a      	adds	r2, r3, #1
 8000c98:	60ba      	str	r2, [r7, #8]
 8000c9a:	781b      	ldrb	r3, [r3, #0]
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ca2:	697b      	ldr	r3, [r7, #20]
 8000ca4:	3301      	adds	r3, #1
 8000ca6:	617b      	str	r3, [r7, #20]
 8000ca8:	697a      	ldr	r2, [r7, #20]
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	429a      	cmp	r2, r3
 8000cae:	dbf1      	blt.n	8000c94 <_write+0x12>
  }
  return len;
 8000cb0:	687b      	ldr	r3, [r7, #4]
}
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	3718      	adds	r7, #24
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}

08000cba <_close>:

int _close(int file)
{
 8000cba:	b480      	push	{r7}
 8000cbc:	b083      	sub	sp, #12
 8000cbe:	af00      	add	r7, sp, #0
 8000cc0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000cc2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	370c      	adds	r7, #12
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd0:	4770      	bx	lr

08000cd2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000cd2:	b480      	push	{r7}
 8000cd4:	b083      	sub	sp, #12
 8000cd6:	af00      	add	r7, sp, #0
 8000cd8:	6078      	str	r0, [r7, #4]
 8000cda:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000cdc:	683b      	ldr	r3, [r7, #0]
 8000cde:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ce2:	605a      	str	r2, [r3, #4]
  return 0;
 8000ce4:	2300      	movs	r3, #0
}
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	370c      	adds	r7, #12
 8000cea:	46bd      	mov	sp, r7
 8000cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf0:	4770      	bx	lr

08000cf2 <_isatty>:

int _isatty(int file)
{
 8000cf2:	b480      	push	{r7}
 8000cf4:	b083      	sub	sp, #12
 8000cf6:	af00      	add	r7, sp, #0
 8000cf8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000cfa:	2301      	movs	r3, #1
}
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	370c      	adds	r7, #12
 8000d00:	46bd      	mov	sp, r7
 8000d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d06:	4770      	bx	lr

08000d08 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	b085      	sub	sp, #20
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	60f8      	str	r0, [r7, #12]
 8000d10:	60b9      	str	r1, [r7, #8]
 8000d12:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000d14:	2300      	movs	r3, #0
}
 8000d16:	4618      	mov	r0, r3
 8000d18:	3714      	adds	r7, #20
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d20:	4770      	bx	lr
	...

08000d24 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b086      	sub	sp, #24
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d2c:	4a14      	ldr	r2, [pc, #80]	; (8000d80 <_sbrk+0x5c>)
 8000d2e:	4b15      	ldr	r3, [pc, #84]	; (8000d84 <_sbrk+0x60>)
 8000d30:	1ad3      	subs	r3, r2, r3
 8000d32:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d34:	697b      	ldr	r3, [r7, #20]
 8000d36:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d38:	4b13      	ldr	r3, [pc, #76]	; (8000d88 <_sbrk+0x64>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d102      	bne.n	8000d46 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d40:	4b11      	ldr	r3, [pc, #68]	; (8000d88 <_sbrk+0x64>)
 8000d42:	4a12      	ldr	r2, [pc, #72]	; (8000d8c <_sbrk+0x68>)
 8000d44:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d46:	4b10      	ldr	r3, [pc, #64]	; (8000d88 <_sbrk+0x64>)
 8000d48:	681a      	ldr	r2, [r3, #0]
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	4413      	add	r3, r2
 8000d4e:	693a      	ldr	r2, [r7, #16]
 8000d50:	429a      	cmp	r2, r3
 8000d52:	d207      	bcs.n	8000d64 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d54:	f003 f926 	bl	8003fa4 <__errno>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	220c      	movs	r2, #12
 8000d5c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d5e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000d62:	e009      	b.n	8000d78 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d64:	4b08      	ldr	r3, [pc, #32]	; (8000d88 <_sbrk+0x64>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d6a:	4b07      	ldr	r3, [pc, #28]	; (8000d88 <_sbrk+0x64>)
 8000d6c:	681a      	ldr	r2, [r3, #0]
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	4413      	add	r3, r2
 8000d72:	4a05      	ldr	r2, [pc, #20]	; (8000d88 <_sbrk+0x64>)
 8000d74:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d76:	68fb      	ldr	r3, [r7, #12]
}
 8000d78:	4618      	mov	r0, r3
 8000d7a:	3718      	adds	r7, #24
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd80      	pop	{r7, pc}
 8000d80:	20030000 	.word	0x20030000
 8000d84:	00000400 	.word	0x00000400
 8000d88:	20000098 	.word	0x20000098
 8000d8c:	20000148 	.word	0x20000148

08000d90 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d94:	4b06      	ldr	r3, [pc, #24]	; (8000db0 <SystemInit+0x20>)
 8000d96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d9a:	4a05      	ldr	r2, [pc, #20]	; (8000db0 <SystemInit+0x20>)
 8000d9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000da0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000da4:	bf00      	nop
 8000da6:	46bd      	mov	sp, r7
 8000da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dac:	4770      	bx	lr
 8000dae:	bf00      	nop
 8000db0:	e000ed00 	.word	0xe000ed00

08000db4 <Reset_Handler>:
*/

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:   ldr   sp, =_estack       /* set stack pointer */
 8000db4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000dec <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000db8:	480d      	ldr	r0, [pc, #52]	; (8000df0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000dba:	490e      	ldr	r1, [pc, #56]	; (8000df4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000dbc:	4a0e      	ldr	r2, [pc, #56]	; (8000df8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000dbe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dc0:	e002      	b.n	8000dc8 <LoopCopyDataInit>

08000dc2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dc2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dc4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dc6:	3304      	adds	r3, #4

08000dc8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dc8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dcc:	d3f9      	bcc.n	8000dc2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dce:	4a0b      	ldr	r2, [pc, #44]	; (8000dfc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000dd0:	4c0b      	ldr	r4, [pc, #44]	; (8000e00 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000dd2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dd4:	e001      	b.n	8000dda <LoopFillZerobss>

08000dd6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dd6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dd8:	3204      	adds	r2, #4

08000dda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ddc:	d3fb      	bcc.n	8000dd6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000dde:	f7ff ffd7 	bl	8000d90 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000de2:	f003 f8f7 	bl	8003fd4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000de6:	f7ff fbdd 	bl	80005a4 <main>
  bx  lr    
 8000dea:	4770      	bx	lr
Reset_Handler:   ldr   sp, =_estack       /* set stack pointer */
 8000dec:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000df0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000df4:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8000df8:	08005414 	.word	0x08005414
  ldr r2, =_sbss
 8000dfc:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8000e00:	20000148 	.word	0x20000148

08000e04 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e04:	e7fe      	b.n	8000e04 <ADC_IRQHandler>
	...

08000e08 <i2c_Init>:
//



void i2c_Init(void)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b086      	sub	sp, #24
 8000e0c:	af00      	add	r7, sp, #0

	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e0e:	1d3b      	adds	r3, r7, #4
 8000e10:	2200      	movs	r2, #0
 8000e12:	601a      	str	r2, [r3, #0]
 8000e14:	605a      	str	r2, [r3, #4]
 8000e16:	609a      	str	r2, [r3, #8]
 8000e18:	60da      	str	r2, [r3, #12]
 8000e1a:	611a      	str	r2, [r3, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	603b      	str	r3, [r7, #0]
 8000e20:	4b2b      	ldr	r3, [pc, #172]	; (8000ed0 <i2c_Init+0xc8>)
 8000e22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e24:	4a2a      	ldr	r2, [pc, #168]	; (8000ed0 <i2c_Init+0xc8>)
 8000e26:	f043 0302 	orr.w	r3, r3, #2
 8000e2a:	6313      	str	r3, [r2, #48]	; 0x30
 8000e2c:	4b28      	ldr	r3, [pc, #160]	; (8000ed0 <i2c_Init+0xc8>)
 8000e2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e30:	f003 0302 	and.w	r3, r3, #2
 8000e34:	603b      	str	r3, [r7, #0]
 8000e36:	683b      	ldr	r3, [r7, #0]
	GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000e38:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000e3c:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e3e:	2312      	movs	r3, #18
 8000e40:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_PULLUP;//  GPIO_NOPULL;
 8000e42:	2301      	movs	r3, #1
 8000e44:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e46:	2303      	movs	r3, #3
 8000e48:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000e4a:	2304      	movs	r3, #4
 8000e4c:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e4e:	1d3b      	adds	r3, r7, #4
 8000e50:	4619      	mov	r1, r3
 8000e52:	4820      	ldr	r0, [pc, #128]	; (8000ed4 <i2c_Init+0xcc>)
 8000e54:	f000 fe3e 	bl	8001ad4 <HAL_GPIO_Init>
  hi2c1.Instance = I2C1;
 8000e58:	4b1f      	ldr	r3, [pc, #124]	; (8000ed8 <i2c_Init+0xd0>)
 8000e5a:	4a20      	ldr	r2, [pc, #128]	; (8000edc <i2c_Init+0xd4>)
 8000e5c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 1000;
 8000e5e:	4b1e      	ldr	r3, [pc, #120]	; (8000ed8 <i2c_Init+0xd0>)
 8000e60:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000e64:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000e66:	4b1c      	ldr	r3, [pc, #112]	; (8000ed8 <i2c_Init+0xd0>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000e6c:	4b1a      	ldr	r3, [pc, #104]	; (8000ed8 <i2c_Init+0xd0>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e72:	4b19      	ldr	r3, [pc, #100]	; (8000ed8 <i2c_Init+0xd0>)
 8000e74:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000e78:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e7a:	4b17      	ldr	r3, [pc, #92]	; (8000ed8 <i2c_Init+0xd0>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000e80:	4b15      	ldr	r3, [pc, #84]	; (8000ed8 <i2c_Init+0xd0>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e86:	4b14      	ldr	r3, [pc, #80]	; (8000ed8 <i2c_Init+0xd0>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e8c:	4b12      	ldr	r3, [pc, #72]	; (8000ed8 <i2c_Init+0xd0>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000e92:	4811      	ldr	r0, [pc, #68]	; (8000ed8 <i2c_Init+0xd0>)
 8000e94:	f000 fffe 	bl	8001e94 <HAL_I2C_Init>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d001      	beq.n	8000ea2 <i2c_Init+0x9a>
	  i2c_Handler_Error();
 8000e9e:	f000 f81f 	bl	8000ee0 <i2c_Handler_Error>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000ea2:	2100      	movs	r1, #0
 8000ea4:	480c      	ldr	r0, [pc, #48]	; (8000ed8 <i2c_Init+0xd0>)
 8000ea6:	f001 ff8a 	bl	8002dbe <HAL_I2CEx_ConfigAnalogFilter>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d001      	beq.n	8000eb4 <i2c_Init+0xac>
	  i2c_Handler_Error();
 8000eb0:	f000 f816 	bl	8000ee0 <i2c_Handler_Error>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000eb4:	2100      	movs	r1, #0
 8000eb6:	4808      	ldr	r0, [pc, #32]	; (8000ed8 <i2c_Init+0xd0>)
 8000eb8:	f001 ffbd 	bl	8002e36 <HAL_I2CEx_ConfigDigitalFilter>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d001      	beq.n	8000ec6 <i2c_Init+0xbe>
	  i2c_Handler_Error();
 8000ec2:	f000 f80d 	bl	8000ee0 <i2c_Handler_Error>

}
 8000ec6:	bf00      	nop
 8000ec8:	3718      	adds	r7, #24
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	40023800 	.word	0x40023800
 8000ed4:	40020400 	.word	0x40020400
 8000ed8:	2000009c 	.word	0x2000009c
 8000edc:	40005400 	.word	0x40005400

08000ee0 <i2c_Handler_Error>:


void i2c_Handler_Error(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	af00      	add	r7, sp, #0
	BSP_LED_Init(LED1);
 8000ee4:	2000      	movs	r0, #0
 8000ee6:	f000 fc0f 	bl	8001708 <BSP_LED_Init>
	while(1)
	{
		BSP_LED_Toggle(LED1);
 8000eea:	2000      	movs	r0, #0
 8000eec:	f000 fc5c 	bl	80017a8 <BSP_LED_Toggle>
		HAL_Delay(1000);
 8000ef0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ef4:	f000 fce4 	bl	80018c0 <HAL_Delay>
		BSP_LED_Toggle(LED1);
 8000ef8:	e7f7      	b.n	8000eea <i2c_Handler_Error+0xa>
	...

08000efc <i2c_Write_RegDataByte>:

}


bool i2c_Write_RegDataByte(uint8_t Addr_Device, uint8_t Reg_Device, char DataLoad)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b086      	sub	sp, #24
 8000f00:	af02      	add	r7, sp, #8
 8000f02:	4603      	mov	r3, r0
 8000f04:	71fb      	strb	r3, [r7, #7]
 8000f06:	460b      	mov	r3, r1
 8000f08:	71bb      	strb	r3, [r7, #6]
 8000f0a:	4613      	mov	r3, r2
 8000f0c:	717b      	strb	r3, [r7, #5]
    bool resp= API_OK;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	73fb      	strb	r3, [r7, #15]
	char dat[2];
	dat[0]=Reg_Device;
 8000f12:	79bb      	ldrb	r3, [r7, #6]
 8000f14:	733b      	strb	r3, [r7, #12]
	dat[1]=DataLoad;
 8000f16:	797b      	ldrb	r3, [r7, #5]
 8000f18:	737b      	strb	r3, [r7, #13]

	if (HAL_OK != HAL_I2C_Master_Transmit(&hi2c1, Addr_Device,(uint8_t *) dat , len_TxTwoByte, TimeOut_I2C))
 8000f1a:	79fb      	ldrb	r3, [r7, #7]
 8000f1c:	b299      	uxth	r1, r3
 8000f1e:	f107 020c 	add.w	r2, r7, #12
 8000f22:	2364      	movs	r3, #100	; 0x64
 8000f24:	9300      	str	r3, [sp, #0]
 8000f26:	2302      	movs	r3, #2
 8000f28:	4806      	ldr	r0, [pc, #24]	; (8000f44 <i2c_Write_RegDataByte+0x48>)
 8000f2a:	f001 f8f7 	bl	800211c <HAL_I2C_Master_Transmit>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d001      	beq.n	8000f38 <i2c_Write_RegDataByte+0x3c>
		resp = API_ERROR;
 8000f34:	2301      	movs	r3, #1
 8000f36:	73fb      	strb	r3, [r7, #15]

	return resp;
 8000f38:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	3710      	adds	r7, #16
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	2000009c 	.word	0x2000009c

08000f48 <i2c_RegRead>:


bool i2c_RegRead(uint8_t Addr_Device, uint8_t Reg_Device, char * ptr_txbuf, uint8_t long_trama)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b086      	sub	sp, #24
 8000f4c:	af02      	add	r7, sp, #8
 8000f4e:	603a      	str	r2, [r7, #0]
 8000f50:	461a      	mov	r2, r3
 8000f52:	4603      	mov	r3, r0
 8000f54:	71fb      	strb	r3, [r7, #7]
 8000f56:	460b      	mov	r3, r1
 8000f58:	71bb      	strb	r3, [r7, #6]
 8000f5a:	4613      	mov	r3, r2
 8000f5c:	717b      	strb	r3, [r7, #5]
	bool resp = API_OK;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	73fb      	strb	r3, [r7, #15]
	char data[3];
	data[0]=Reg_Device;
 8000f62:	79bb      	ldrb	r3, [r7, #6]
 8000f64:	733b      	strb	r3, [r7, #12]
	if (HAL_OK != HAL_I2C_Master_Transmit(&hi2c1, Addr_Device,(uint8_t *) data , 1, TimeOut_I2C))
 8000f66:	79fb      	ldrb	r3, [r7, #7]
 8000f68:	b299      	uxth	r1, r3
 8000f6a:	f107 020c 	add.w	r2, r7, #12
 8000f6e:	2364      	movs	r3, #100	; 0x64
 8000f70:	9300      	str	r3, [sp, #0]
 8000f72:	2301      	movs	r3, #1
 8000f74:	480d      	ldr	r0, [pc, #52]	; (8000fac <i2c_RegRead+0x64>)
 8000f76:	f001 f8d1 	bl	800211c <HAL_I2C_Master_Transmit>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d001      	beq.n	8000f84 <i2c_RegRead+0x3c>
		resp = API_ERROR;
 8000f80:	2301      	movs	r3, #1
 8000f82:	73fb      	strb	r3, [r7, #15]

	if (HAL_OK != HAL_I2C_Master_Receive (&hi2c1, Addr_Device, (uint8_t *) ptr_txbuf , long_trama , TimeOut_I2C))
 8000f84:	79fb      	ldrb	r3, [r7, #7]
 8000f86:	b299      	uxth	r1, r3
 8000f88:	797b      	ldrb	r3, [r7, #5]
 8000f8a:	b29b      	uxth	r3, r3
 8000f8c:	2264      	movs	r2, #100	; 0x64
 8000f8e:	9200      	str	r2, [sp, #0]
 8000f90:	683a      	ldr	r2, [r7, #0]
 8000f92:	4806      	ldr	r0, [pc, #24]	; (8000fac <i2c_RegRead+0x64>)
 8000f94:	f001 f9c0 	bl	8002318 <HAL_I2C_Master_Receive>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d001      	beq.n	8000fa2 <i2c_RegRead+0x5a>
		resp = API_ERROR;
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	73fb      	strb	r3, [r7, #15]

	return resp;
 8000fa2:	7bfb      	ldrb	r3, [r7, #15]

}
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	3710      	adds	r7, #16
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd80      	pop	{r7, pc}
 8000fac:	2000009c 	.word	0x2000009c

08000fb0 <i2c_WriteTrama>:


bool i2c_WriteTrama(uint8_t Addr_Device, char * ptr_txbuf, uint8_t long_trama)
{
 8000fb0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000fb4:	b089      	sub	sp, #36	; 0x24
 8000fb6:	af02      	add	r7, sp, #8
 8000fb8:	4603      	mov	r3, r0
 8000fba:	6039      	str	r1, [r7, #0]
 8000fbc:	71fb      	strb	r3, [r7, #7]
 8000fbe:	4613      	mov	r3, r2
 8000fc0:	71bb      	strb	r3, [r7, #6]
 8000fc2:	466b      	mov	r3, sp
 8000fc4:	461e      	mov	r6, r3
    bool resp = API_OK;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	74fb      	strb	r3, [r7, #19]

	char dat[long_trama];
 8000fca:	79b9      	ldrb	r1, [r7, #6]
 8000fcc:	460b      	mov	r3, r1
 8000fce:	3b01      	subs	r3, #1
 8000fd0:	60fb      	str	r3, [r7, #12]
 8000fd2:	b2cb      	uxtb	r3, r1
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	4698      	mov	r8, r3
 8000fd8:	4691      	mov	r9, r2
 8000fda:	f04f 0200 	mov.w	r2, #0
 8000fde:	f04f 0300 	mov.w	r3, #0
 8000fe2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000fe6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000fea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000fee:	b2cb      	uxtb	r3, r1
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	461c      	mov	r4, r3
 8000ff4:	4615      	mov	r5, r2
 8000ff6:	f04f 0200 	mov.w	r2, #0
 8000ffa:	f04f 0300 	mov.w	r3, #0
 8000ffe:	00eb      	lsls	r3, r5, #3
 8001000:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001004:	00e2      	lsls	r2, r4, #3
 8001006:	460b      	mov	r3, r1
 8001008:	3307      	adds	r3, #7
 800100a:	08db      	lsrs	r3, r3, #3
 800100c:	00db      	lsls	r3, r3, #3
 800100e:	ebad 0d03 	sub.w	sp, sp, r3
 8001012:	ab02      	add	r3, sp, #8
 8001014:	3300      	adds	r3, #0
 8001016:	60bb      	str	r3, [r7, #8]

	for (int i=0;i<long_trama;i++)
 8001018:	2300      	movs	r3, #0
 800101a:	617b      	str	r3, [r7, #20]
 800101c:	e00b      	b.n	8001036 <i2c_WriteTrama+0x86>
	  {
	  dat[i]= ptr_txbuf[i];
 800101e:	697b      	ldr	r3, [r7, #20]
 8001020:	683a      	ldr	r2, [r7, #0]
 8001022:	4413      	add	r3, r2
 8001024:	7819      	ldrb	r1, [r3, #0]
 8001026:	68ba      	ldr	r2, [r7, #8]
 8001028:	697b      	ldr	r3, [r7, #20]
 800102a:	4413      	add	r3, r2
 800102c:	460a      	mov	r2, r1
 800102e:	701a      	strb	r2, [r3, #0]
	for (int i=0;i<long_trama;i++)
 8001030:	697b      	ldr	r3, [r7, #20]
 8001032:	3301      	adds	r3, #1
 8001034:	617b      	str	r3, [r7, #20]
 8001036:	79bb      	ldrb	r3, [r7, #6]
 8001038:	697a      	ldr	r2, [r7, #20]
 800103a:	429a      	cmp	r2, r3
 800103c:	dbef      	blt.n	800101e <i2c_WriteTrama+0x6e>
	  }

	if (HAL_OK != HAL_I2C_Master_Transmit(&hi2c1, Addr_Device,(uint8_t *) dat , long_trama, TimeOut_I2C))
 800103e:	79fb      	ldrb	r3, [r7, #7]
 8001040:	b299      	uxth	r1, r3
 8001042:	79bb      	ldrb	r3, [r7, #6]
 8001044:	b29b      	uxth	r3, r3
 8001046:	2264      	movs	r2, #100	; 0x64
 8001048:	9200      	str	r2, [sp, #0]
 800104a:	68ba      	ldr	r2, [r7, #8]
 800104c:	4807      	ldr	r0, [pc, #28]	; (800106c <i2c_WriteTrama+0xbc>)
 800104e:	f001 f865 	bl	800211c <HAL_I2C_Master_Transmit>
 8001052:	4603      	mov	r3, r0
 8001054:	2b00      	cmp	r3, #0
 8001056:	d001      	beq.n	800105c <i2c_WriteTrama+0xac>
		resp = API_ERROR;
 8001058:	2301      	movs	r3, #1
 800105a:	74fb      	strb	r3, [r7, #19]

	return resp;
 800105c:	7cfb      	ldrb	r3, [r7, #19]
 800105e:	46b5      	mov	sp, r6
}
 8001060:	4618      	mov	r0, r3
 8001062:	371c      	adds	r7, #28
 8001064:	46bd      	mov	sp, r7
 8001066:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800106a:	bf00      	nop
 800106c:	2000009c 	.word	0x2000009c

08001070 <uartInit>:

void Uart_Error(void); //funcion provada solo aplica para este Driver.


bool uartInit(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b08a      	sub	sp, #40	; 0x28
 8001074:	af00      	add	r7, sp, #0
  bool resp=false;
 8001076:	2300      	movs	r3, #0
 8001078:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  __HAL_RCC_USART3_CLK_ENABLE();
 800107c:	2300      	movs	r3, #0
 800107e:	60bb      	str	r3, [r7, #8]
 8001080:	4b56      	ldr	r3, [pc, #344]	; (80011dc <uartInit+0x16c>)
 8001082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001084:	4a55      	ldr	r2, [pc, #340]	; (80011dc <uartInit+0x16c>)
 8001086:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800108a:	6413      	str	r3, [r2, #64]	; 0x40
 800108c:	4b53      	ldr	r3, [pc, #332]	; (80011dc <uartInit+0x16c>)
 800108e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001090:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001094:	60bb      	str	r3, [r7, #8]
 8001096:	68bb      	ldr	r3, [r7, #8]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001098:	f107 0310 	add.w	r3, r7, #16
 800109c:	2200      	movs	r2, #0
 800109e:	601a      	str	r2, [r3, #0]
 80010a0:	605a      	str	r2, [r3, #4]
 80010a2:	609a      	str	r2, [r3, #8]
 80010a4:	60da      	str	r2, [r3, #12]
 80010a6:	611a      	str	r2, [r3, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80010a8:	2300      	movs	r3, #0
 80010aa:	607b      	str	r3, [r7, #4]
 80010ac:	4b4b      	ldr	r3, [pc, #300]	; (80011dc <uartInit+0x16c>)
 80010ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b0:	4a4a      	ldr	r2, [pc, #296]	; (80011dc <uartInit+0x16c>)
 80010b2:	f043 0308 	orr.w	r3, r3, #8
 80010b6:	6313      	str	r3, [r2, #48]	; 0x30
 80010b8:	4b48      	ldr	r3, [pc, #288]	; (80011dc <uartInit+0x16c>)
 80010ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010bc:	f003 0308 	and.w	r3, r3, #8
 80010c0:	607b      	str	r3, [r7, #4]
 80010c2:	687b      	ldr	r3, [r7, #4]
//#define UART_RX_Pin GPIO_PIN_8
//#define UART_RX_GPIO_Port GPIOD
//#define UART_TX_Pin GPIO_PIN_9
//#define UART_TX_GPIO_Port GPIOD

  GPIO_InitStruct.Pin = UART_RX_Pin|UART_TX_Pin;
 80010c4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80010c8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ca:	2302      	movs	r3, #2
 80010cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ce:	2300      	movs	r3, #0
 80010d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010d2:	2303      	movs	r3, #3
 80010d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80010d6:	2307      	movs	r3, #7
 80010d8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(UART_TX_GPIO_Port, &GPIO_InitStruct);
 80010da:	f107 0310 	add.w	r3, r7, #16
 80010de:	4619      	mov	r1, r3
 80010e0:	483f      	ldr	r0, [pc, #252]	; (80011e0 <uartInit+0x170>)
 80010e2:	f000 fcf7 	bl	8001ad4 <HAL_GPIO_Init>


  BSP_huart.Instance = USART3;
 80010e6:	4b3f      	ldr	r3, [pc, #252]	; (80011e4 <uartInit+0x174>)
 80010e8:	4a3f      	ldr	r2, [pc, #252]	; (80011e8 <uartInit+0x178>)
 80010ea:	601a      	str	r2, [r3, #0]

  BSP_huart.Init.BaudRate = UartBaudRate;
 80010ec:	4b3d      	ldr	r3, [pc, #244]	; (80011e4 <uartInit+0x174>)
 80010ee:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80010f2:	605a      	str	r2, [r3, #4]
  BSP_huart.Init.WordLength = UART_WORDLENGTH_8B;
 80010f4:	4b3b      	ldr	r3, [pc, #236]	; (80011e4 <uartInit+0x174>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	609a      	str	r2, [r3, #8]
  BSP_huart.Init.StopBits = UART_STOPBITS_1;
 80010fa:	4b3a      	ldr	r3, [pc, #232]	; (80011e4 <uartInit+0x174>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	60da      	str	r2, [r3, #12]
  BSP_huart.Init.Parity = UART_PARITY_NONE;
 8001100:	4b38      	ldr	r3, [pc, #224]	; (80011e4 <uartInit+0x174>)
 8001102:	2200      	movs	r2, #0
 8001104:	611a      	str	r2, [r3, #16]
  BSP_huart.Init.Mode = UART_MODE_TX_RX;
 8001106:	4b37      	ldr	r3, [pc, #220]	; (80011e4 <uartInit+0x174>)
 8001108:	220c      	movs	r2, #12
 800110a:	615a      	str	r2, [r3, #20]
  BSP_huart.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800110c:	4b35      	ldr	r3, [pc, #212]	; (80011e4 <uartInit+0x174>)
 800110e:	2200      	movs	r2, #0
 8001110:	619a      	str	r2, [r3, #24]
  BSP_huart.Init.OverSampling = UART_OVERSAMPLING_16;
 8001112:	4b34      	ldr	r3, [pc, #208]	; (80011e4 <uartInit+0x174>)
 8001114:	2200      	movs	r2, #0
 8001116:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&BSP_huart) != HAL_OK)
 8001118:	4832      	ldr	r0, [pc, #200]	; (80011e4 <uartInit+0x174>)
 800111a:	f002 fb63 	bl	80037e4 <HAL_UART_Init>
 800111e:	4603      	mov	r3, r0
 8001120:	2b00      	cmp	r3, #0
 8001122:	d002      	beq.n	800112a <uartInit+0xba>
	  return resp;
 8001124:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001128:	e054      	b.n	80011d4 <uartInit+0x164>
  HAL_Delay(1000);
 800112a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800112e:	f000 fbc7 	bl	80018c0 <HAL_Delay>
  uartSendString((uint8_t *)"\r\n");
 8001132:	482e      	ldr	r0, [pc, #184]	; (80011ec <uartInit+0x17c>)
 8001134:	f000 f882 	bl	800123c <uartSendString>
  uartSendString((uint8_t *)"inicializando Periferico UART                inicializando GPIO de UART\r\n");
 8001138:	482d      	ldr	r0, [pc, #180]	; (80011f0 <uartInit+0x180>)
 800113a:	f000 f87f 	bl	800123c <uartSendString>
  uartSendString((uint8_t *)"**********************************           ***********************************\r\n");
 800113e:	482d      	ldr	r0, [pc, #180]	; (80011f4 <uartInit+0x184>)
 8001140:	f000 f87c 	bl	800123c <uartSendString>
  uartSendString((uint8_t *)"*Periferico  : UART3             *           *RX Pin/Port: PIN_8 / GPIOD       *\r\n");
 8001144:	482c      	ldr	r0, [pc, #176]	; (80011f8 <uartInit+0x188>)
 8001146:	f000 f879 	bl	800123c <uartSendString>
  uartSendString((uint8_t *)"*BaudRate    : 115200            *           *TX Pin/Port: PIN_9 / GPIOD       *\r\n");
 800114a:	482c      	ldr	r0, [pc, #176]	; (80011fc <uartInit+0x18c>)
 800114c:	f000 f876 	bl	800123c <uartSendString>
  uartSendString((uint8_t *)"*Word Length : 8Bytes            *           *Mode       : MODE_AF_PP          *\r\n");
 8001150:	482b      	ldr	r0, [pc, #172]	; (8001200 <uartInit+0x190>)
 8001152:	f000 f873 	bl	800123c <uartSendString>
  uartSendString((uint8_t *)"*Parity      : None              *           *Pull       : NOPULL              *\r\n");
 8001156:	482b      	ldr	r0, [pc, #172]	; (8001204 <uartInit+0x194>)
 8001158:	f000 f870 	bl	800123c <uartSendString>
  uartSendString((uint8_t *)"*Flow Control: None              *           *Speed      : SPEED_FREQ_VERY_HIGH*\r\n");
 800115c:	482a      	ldr	r0, [pc, #168]	; (8001208 <uartInit+0x198>)
 800115e:	f000 f86d 	bl	800123c <uartSendString>
  uartSendString((uint8_t *)"*Muestreo    : over sampling 16  *           *Alternate  : GPIO_AF7_USART3     *\r\n");
 8001162:	482a      	ldr	r0, [pc, #168]	; (800120c <uartInit+0x19c>)
 8001164:	f000 f86a 	bl	800123c <uartSendString>
  uartSendString((uint8_t *)"**********************************           ***********************************\r\n");
 8001168:	4822      	ldr	r0, [pc, #136]	; (80011f4 <uartInit+0x184>)
 800116a:	f000 f867 	bl	800123c <uartSendString>
  HAL_Delay(100);
 800116e:	2064      	movs	r0, #100	; 0x64
 8001170:	f000 fba6 	bl	80018c0 <HAL_Delay>
  uint8_t CRLFbuff[] = "\r\n";
 8001174:	4a1d      	ldr	r2, [pc, #116]	; (80011ec <uartInit+0x17c>)
 8001176:	f107 030c 	add.w	r3, r7, #12
 800117a:	6812      	ldr	r2, [r2, #0]
 800117c:	4611      	mov	r1, r2
 800117e:	8019      	strh	r1, [r3, #0]
 8001180:	3302      	adds	r3, #2
 8001182:	0c12      	lsrs	r2, r2, #16
 8001184:	701a      	strb	r2, [r3, #0]
  HAL_UART_Transmit(&BSP_huart, CRLFbuff, 2, 0xFF);    /* USER CODE BEGIN 3 */
 8001186:	f107 010c 	add.w	r1, r7, #12
 800118a:	23ff      	movs	r3, #255	; 0xff
 800118c:	2202      	movs	r2, #2
 800118e:	4815      	ldr	r0, [pc, #84]	; (80011e4 <uartInit+0x174>)
 8001190:	f002 fb75 	bl	800387e <HAL_UART_Transmit>
  HAL_UART_Transmit(&BSP_huart, CRLFbuff, 2, 0xFF);    /* USER CODE BEGIN 3 */
 8001194:	f107 010c 	add.w	r1, r7, #12
 8001198:	23ff      	movs	r3, #255	; 0xff
 800119a:	2202      	movs	r2, #2
 800119c:	4811      	ldr	r0, [pc, #68]	; (80011e4 <uartInit+0x174>)
 800119e:	f002 fb6e 	bl	800387e <HAL_UART_Transmit>
  uartSendString((uint8_t *)"*Serial port READY to Use*\r\n");
 80011a2:	481b      	ldr	r0, [pc, #108]	; (8001210 <uartInit+0x1a0>)
 80011a4:	f000 f84a 	bl	800123c <uartSendString>
  uartSendString((uint8_t *)"--------------------------\r\n");
 80011a8:	481a      	ldr	r0, [pc, #104]	; (8001214 <uartInit+0x1a4>)
 80011aa:	f000 f847 	bl	800123c <uartSendString>
//  CRLFbuff[] = "\r\n";
  HAL_UART_Transmit(&BSP_huart, CRLFbuff, 2, 0xFF);    /* USER CODE BEGIN 3 */
 80011ae:	f107 010c 	add.w	r1, r7, #12
 80011b2:	23ff      	movs	r3, #255	; 0xff
 80011b4:	2202      	movs	r2, #2
 80011b6:	480b      	ldr	r0, [pc, #44]	; (80011e4 <uartInit+0x174>)
 80011b8:	f002 fb61 	bl	800387e <HAL_UART_Transmit>
  HAL_UART_Transmit(&BSP_huart, CRLFbuff, 2, 0xFF);    /* USER CODE BEGIN 3 */
 80011bc:	f107 010c 	add.w	r1, r7, #12
 80011c0:	23ff      	movs	r3, #255	; 0xff
 80011c2:	2202      	movs	r2, #2
 80011c4:	4807      	ldr	r0, [pc, #28]	; (80011e4 <uartInit+0x174>)
 80011c6:	f002 fb5a 	bl	800387e <HAL_UART_Transmit>
  resp = true;
 80011ca:	2301      	movs	r3, #1
 80011cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27


  return resp;
 80011d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
  /* USER CODE END USART3_Init 2 */

}
 80011d4:	4618      	mov	r0, r3
 80011d6:	3728      	adds	r7, #40	; 0x28
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	40023800 	.word	0x40023800
 80011e0:	40020c00 	.word	0x40020c00
 80011e4:	200000f0 	.word	0x200000f0
 80011e8:	40004800 	.word	0x40004800
 80011ec:	08004fd8 	.word	0x08004fd8
 80011f0:	08004fdc 	.word	0x08004fdc
 80011f4:	08005028 	.word	0x08005028
 80011f8:	0800507c 	.word	0x0800507c
 80011fc:	080050d0 	.word	0x080050d0
 8001200:	08005124 	.word	0x08005124
 8001204:	08005178 	.word	0x08005178
 8001208:	080051cc 	.word	0x080051cc
 800120c:	08005220 	.word	0x08005220
 8001210:	08005274 	.word	0x08005274
 8001214:	08005294 	.word	0x08005294

08001218 <uartTX_CMD_Home>:


void uartTX_CMD_Home (void)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b082      	sub	sp, #8
 800121c:	af00      	add	r7, sp, #0
  uint8_t CRLFbuff[] = "\r";
 800121e:	230d      	movs	r3, #13
 8001220:	80bb      	strh	r3, [r7, #4]
  HAL_UART_Transmit(&BSP_huart, CRLFbuff, 1, 0xFF);    /* USER CODE BEGIN 3 */
 8001222:	1d39      	adds	r1, r7, #4
 8001224:	23ff      	movs	r3, #255	; 0xff
 8001226:	2201      	movs	r2, #1
 8001228:	4803      	ldr	r0, [pc, #12]	; (8001238 <uartTX_CMD_Home+0x20>)
 800122a:	f002 fb28 	bl	800387e <HAL_UART_Transmit>
}
 800122e:	bf00      	nop
 8001230:	3708      	adds	r7, #8
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	200000f0 	.word	0x200000f0

0800123c <uartSendString>:
  HAL_UART_Transmit(&BSP_huart, CRLFbuff, 2, 0xFF);    /* USER CODE BEGIN 3 */
}


void uartSendString(uint8_t * pstring)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b084      	sub	sp, #16
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
	assert(pstring != NULL);
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	2b00      	cmp	r3, #0
 8001248:	d105      	bne.n	8001256 <uartSendString+0x1a>
 800124a:	4b0b      	ldr	r3, [pc, #44]	; (8001278 <uartSendString+0x3c>)
 800124c:	4a0b      	ldr	r2, [pc, #44]	; (800127c <uartSendString+0x40>)
 800124e:	2169      	movs	r1, #105	; 0x69
 8001250:	480b      	ldr	r0, [pc, #44]	; (8001280 <uartSendString+0x44>)
 8001252:	f002 fe89 	bl	8003f68 <__assert_func>
	uint16_t size = strlen (pstring);
 8001256:	6878      	ldr	r0, [r7, #4]
 8001258:	f7fe ffca 	bl	80001f0 <strlen>
 800125c:	4603      	mov	r3, r0
 800125e:	81fb      	strh	r3, [r7, #14]
	HAL_UART_Transmit(&BSP_huart, (uint8_t *)pstring, size, Time_Tx_Uart);
 8001260:	89fa      	ldrh	r2, [r7, #14]
 8001262:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001266:	6879      	ldr	r1, [r7, #4]
 8001268:	4806      	ldr	r0, [pc, #24]	; (8001284 <uartSendString+0x48>)
 800126a:	f002 fb08 	bl	800387e <HAL_UART_Transmit>
}
 800126e:	bf00      	nop
 8001270:	3710      	adds	r7, #16
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	080052b4 	.word	0x080052b4
 800127c:	08005304 	.word	0x08005304
 8001280:	080052c4 	.word	0x080052c4
 8001284:	200000f0 	.word	0x200000f0

08001288 <uartSendStringSize>:


void uartSendStringSize(uint8_t * pstring, uint16_t size)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b082      	sub	sp, #8
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
 8001290:	460b      	mov	r3, r1
 8001292:	807b      	strh	r3, [r7, #2]

assert(pstring != NULL);
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	2b00      	cmp	r3, #0
 8001298:	d105      	bne.n	80012a6 <uartSendStringSize+0x1e>
 800129a:	4b0d      	ldr	r3, [pc, #52]	; (80012d0 <uartSendStringSize+0x48>)
 800129c:	4a0d      	ldr	r2, [pc, #52]	; (80012d4 <uartSendStringSize+0x4c>)
 800129e:	2172      	movs	r1, #114	; 0x72
 80012a0:	480d      	ldr	r0, [pc, #52]	; (80012d8 <uartSendStringSize+0x50>)
 80012a2:	f002 fe61 	bl	8003f68 <__assert_func>
assert(size!=0);
 80012a6:	887b      	ldrh	r3, [r7, #2]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d105      	bne.n	80012b8 <uartSendStringSize+0x30>
 80012ac:	4b0b      	ldr	r3, [pc, #44]	; (80012dc <uartSendStringSize+0x54>)
 80012ae:	4a09      	ldr	r2, [pc, #36]	; (80012d4 <uartSendStringSize+0x4c>)
 80012b0:	2173      	movs	r1, #115	; 0x73
 80012b2:	4809      	ldr	r0, [pc, #36]	; (80012d8 <uartSendStringSize+0x50>)
 80012b4:	f002 fe58 	bl	8003f68 <__assert_func>


HAL_UART_Transmit(&BSP_huart, pstring, size, Time_Tx_Uart);
 80012b8:	887a      	ldrh	r2, [r7, #2]
 80012ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012be:	6879      	ldr	r1, [r7, #4]
 80012c0:	4807      	ldr	r0, [pc, #28]	; (80012e0 <uartSendStringSize+0x58>)
 80012c2:	f002 fadc 	bl	800387e <HAL_UART_Transmit>


}
 80012c6:	bf00      	nop
 80012c8:	3708      	adds	r7, #8
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	080052b4 	.word	0x080052b4
 80012d4:	08005314 	.word	0x08005314
 80012d8:	080052c4 	.word	0x080052c4
 80012dc:	080052e4 	.word	0x080052e4
 80012e0:	200000f0 	.word	0x200000f0

080012e4 <DS1307_Init>:
 * devuelve : Bloquea en caso de inicializar dispositivo erroneamente
 * Es una funcion Bloqueante, en caso de error
 * Bloquea desde el Driver i2c
 */
void DS1307_Init(void)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	af00      	add	r7, sp, #0
	i2c_Init();
 80012e8:	f7ff fd8e 	bl	8000e08 <i2c_Init>
}
 80012ec:	bf00      	nop
 80012ee:	bd80      	pop	{r7, pc}

080012f0 <DS1307_SetTime>:
 * devuelve : respuesta de Error en la escritura.
 *
 * No es una funcion Bloqueante
 */
bool DS1307_SetTime(char * ptr_dtime) //(Hour,Min,Sec)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b084      	sub	sp, #16
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
	bool resp= API_OK;
 80012f8:	2300      	movs	r3, #0
 80012fa:	73fb      	strb	r3, [r7, #15]

	  char tx_dat;
	  tx_dat= ((ptr_dtime[0] & 0x0f) << 4) | (ptr_dtime[1] & 0x0f); // ASCII to BCD
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	781b      	ldrb	r3, [r3, #0]
 8001300:	011b      	lsls	r3, r3, #4
 8001302:	b25a      	sxtb	r2, r3
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	3301      	adds	r3, #1
 8001308:	781b      	ldrb	r3, [r3, #0]
 800130a:	b25b      	sxtb	r3, r3
 800130c:	f003 030f 	and.w	r3, r3, #15
 8001310:	b25b      	sxtb	r3, r3
 8001312:	4313      	orrs	r3, r2
 8001314:	b25b      	sxtb	r3, r3
 8001316:	73bb      	strb	r3, [r7, #14]
	  if( API_ERROR == i2c_Write_RegDataByte(DevAddress, Reg_Hour, tx_dat))
 8001318:	7bbb      	ldrb	r3, [r7, #14]
 800131a:	461a      	mov	r2, r3
 800131c:	2102      	movs	r1, #2
 800131e:	20d0      	movs	r0, #208	; 0xd0
 8001320:	f7ff fdec 	bl	8000efc <i2c_Write_RegDataByte>
 8001324:	4603      	mov	r3, r0
 8001326:	2b00      	cmp	r3, #0
 8001328:	d001      	beq.n	800132e <DS1307_SetTime+0x3e>
		  resp = API_ERROR;
 800132a:	2301      	movs	r3, #1
 800132c:	73fb      	strb	r3, [r7, #15]
	  tx_dat= ((ptr_dtime[2] & 0x0f) << 4) | (ptr_dtime[3] & 0x0f); // ASCII to BCD
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	3302      	adds	r3, #2
 8001332:	781b      	ldrb	r3, [r3, #0]
 8001334:	011b      	lsls	r3, r3, #4
 8001336:	b25a      	sxtb	r2, r3
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	3303      	adds	r3, #3
 800133c:	781b      	ldrb	r3, [r3, #0]
 800133e:	b25b      	sxtb	r3, r3
 8001340:	f003 030f 	and.w	r3, r3, #15
 8001344:	b25b      	sxtb	r3, r3
 8001346:	4313      	orrs	r3, r2
 8001348:	b25b      	sxtb	r3, r3
 800134a:	73bb      	strb	r3, [r7, #14]
	  if( API_ERROR == i2c_Write_RegDataByte(DevAddress, Reg_Min, tx_dat))
 800134c:	7bbb      	ldrb	r3, [r7, #14]
 800134e:	461a      	mov	r2, r3
 8001350:	2101      	movs	r1, #1
 8001352:	20d0      	movs	r0, #208	; 0xd0
 8001354:	f7ff fdd2 	bl	8000efc <i2c_Write_RegDataByte>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	d001      	beq.n	8001362 <DS1307_SetTime+0x72>
		  resp = API_ERROR;
 800135e:	2301      	movs	r3, #1
 8001360:	73fb      	strb	r3, [r7, #15]
	  tx_dat= ((ptr_dtime[4] & 0x0f) << 4) | (ptr_dtime[5] & 0x0f); // ASCII to BCD
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	3304      	adds	r3, #4
 8001366:	781b      	ldrb	r3, [r3, #0]
 8001368:	011b      	lsls	r3, r3, #4
 800136a:	b25a      	sxtb	r2, r3
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	3305      	adds	r3, #5
 8001370:	781b      	ldrb	r3, [r3, #0]
 8001372:	b25b      	sxtb	r3, r3
 8001374:	f003 030f 	and.w	r3, r3, #15
 8001378:	b25b      	sxtb	r3, r3
 800137a:	4313      	orrs	r3, r2
 800137c:	b25b      	sxtb	r3, r3
 800137e:	73bb      	strb	r3, [r7, #14]
	  if( API_ERROR == i2c_Write_RegDataByte(DevAddress, Reg_Sec, tx_dat))
 8001380:	7bbb      	ldrb	r3, [r7, #14]
 8001382:	461a      	mov	r2, r3
 8001384:	2100      	movs	r1, #0
 8001386:	20d0      	movs	r0, #208	; 0xd0
 8001388:	f7ff fdb8 	bl	8000efc <i2c_Write_RegDataByte>
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	d001      	beq.n	8001396 <DS1307_SetTime+0xa6>
		  resp = API_ERROR;
 8001392:	2301      	movs	r3, #1
 8001394:	73fb      	strb	r3, [r7, #15]

   return resp;
 8001396:	7bfb      	ldrb	r3, [r7, #15]

}
 8001398:	4618      	mov	r0, r3
 800139a:	3710      	adds	r7, #16
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}

080013a0 <DS1307_SetDate>:
 * devuelve : respuesta de Error en la escritura.
 *
 * No es una funcion Bloqueante
 */
bool DS1307_SetDate(char * ptr_ddate)   //Day,Month,Year)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b084      	sub	sp, #16
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
	bool resp= API_OK;
 80013a8:	2300      	movs	r3, #0
 80013aa:	73fb      	strb	r3, [r7, #15]
	 char tx_dat;
	  tx_dat= ((ptr_ddate[0] & 0x0f) << 4) | (ptr_ddate[1] & 0x0f); // ASCII to BCD
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	781b      	ldrb	r3, [r3, #0]
 80013b0:	011b      	lsls	r3, r3, #4
 80013b2:	b25a      	sxtb	r2, r3
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	3301      	adds	r3, #1
 80013b8:	781b      	ldrb	r3, [r3, #0]
 80013ba:	b25b      	sxtb	r3, r3
 80013bc:	f003 030f 	and.w	r3, r3, #15
 80013c0:	b25b      	sxtb	r3, r3
 80013c2:	4313      	orrs	r3, r2
 80013c4:	b25b      	sxtb	r3, r3
 80013c6:	73bb      	strb	r3, [r7, #14]
	  if( API_ERROR == i2c_Write_RegDataByte(DevAddress, Reg_Day, tx_dat))
 80013c8:	7bbb      	ldrb	r3, [r7, #14]
 80013ca:	461a      	mov	r2, r3
 80013cc:	2104      	movs	r1, #4
 80013ce:	20d0      	movs	r0, #208	; 0xd0
 80013d0:	f7ff fd94 	bl	8000efc <i2c_Write_RegDataByte>
 80013d4:	4603      	mov	r3, r0
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d001      	beq.n	80013de <DS1307_SetDate+0x3e>
		  resp = API_ERROR;
 80013da:	2301      	movs	r3, #1
 80013dc:	73fb      	strb	r3, [r7, #15]

	  tx_dat= ((ptr_ddate[2] & 0x0f) << 4) | (ptr_ddate[3] & 0x0f); // ASCII to BCD
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	3302      	adds	r3, #2
 80013e2:	781b      	ldrb	r3, [r3, #0]
 80013e4:	011b      	lsls	r3, r3, #4
 80013e6:	b25a      	sxtb	r2, r3
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	3303      	adds	r3, #3
 80013ec:	781b      	ldrb	r3, [r3, #0]
 80013ee:	b25b      	sxtb	r3, r3
 80013f0:	f003 030f 	and.w	r3, r3, #15
 80013f4:	b25b      	sxtb	r3, r3
 80013f6:	4313      	orrs	r3, r2
 80013f8:	b25b      	sxtb	r3, r3
 80013fa:	73bb      	strb	r3, [r7, #14]
	  if( API_ERROR == i2c_Write_RegDataByte(DevAddress, Reg_Month, tx_dat))
 80013fc:	7bbb      	ldrb	r3, [r7, #14]
 80013fe:	461a      	mov	r2, r3
 8001400:	2105      	movs	r1, #5
 8001402:	20d0      	movs	r0, #208	; 0xd0
 8001404:	f7ff fd7a 	bl	8000efc <i2c_Write_RegDataByte>
 8001408:	4603      	mov	r3, r0
 800140a:	2b00      	cmp	r3, #0
 800140c:	d001      	beq.n	8001412 <DS1307_SetDate+0x72>
		  resp = API_ERROR;
 800140e:	2301      	movs	r3, #1
 8001410:	73fb      	strb	r3, [r7, #15]

	  tx_dat= ((ptr_ddate[4] & 0x0f) << 4) | (ptr_ddate[5] & 0x0f); // ASCII to BCD
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	3304      	adds	r3, #4
 8001416:	781b      	ldrb	r3, [r3, #0]
 8001418:	011b      	lsls	r3, r3, #4
 800141a:	b25a      	sxtb	r2, r3
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	3305      	adds	r3, #5
 8001420:	781b      	ldrb	r3, [r3, #0]
 8001422:	b25b      	sxtb	r3, r3
 8001424:	f003 030f 	and.w	r3, r3, #15
 8001428:	b25b      	sxtb	r3, r3
 800142a:	4313      	orrs	r3, r2
 800142c:	b25b      	sxtb	r3, r3
 800142e:	73bb      	strb	r3, [r7, #14]
	  if( API_ERROR == i2c_Write_RegDataByte(DevAddress, Reg_Year, tx_dat))
 8001430:	7bbb      	ldrb	r3, [r7, #14]
 8001432:	461a      	mov	r2, r3
 8001434:	2106      	movs	r1, #6
 8001436:	20d0      	movs	r0, #208	; 0xd0
 8001438:	f7ff fd60 	bl	8000efc <i2c_Write_RegDataByte>
 800143c:	4603      	mov	r3, r0
 800143e:	2b00      	cmp	r3, #0
 8001440:	d001      	beq.n	8001446 <DS1307_SetDate+0xa6>
		  resp = API_ERROR;
 8001442:	2301      	movs	r3, #1
 8001444:	73fb      	strb	r3, [r7, #15]

	  return resp;
 8001446:	7bfb      	ldrb	r3, [r7, #15]

}
 8001448:	4618      	mov	r0, r3
 800144a:	3710      	adds	r7, #16
 800144c:	46bd      	mov	sp, r7
 800144e:	bd80      	pop	{r7, pc}

08001450 <DS1307_GetDate>:
 * devuelve :lee i2c y entrega en formato ddmmyy
 * funcionBloqueante solo en caso de error
 * En caso de Error genera una en led_rojo una frecuencia espesifica
 */
void DS1307_GetDate(char hora[len_Wdate])
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b082      	sub	sp, #8
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
	if (HAL_OK != i2c_RegRead(DevAddress,Reg_Day,(uint8_t * ) hora, len_Bdate))
 8001458:	2303      	movs	r3, #3
 800145a:	687a      	ldr	r2, [r7, #4]
 800145c:	2104      	movs	r1, #4
 800145e:	20d0      	movs	r0, #208	; 0xd0
 8001460:	f7ff fd72 	bl	8000f48 <i2c_RegRead>
 8001464:	4603      	mov	r3, r0
 8001466:	2b00      	cmp	r3, #0
 8001468:	d001      	beq.n	800146e <DS1307_GetDate+0x1e>
		DS1307_Error();
 800146a:	f000 f8a9 	bl	80015c0 <DS1307_Error>
    					 // 6 char, formato "ddmmyy" [0] decena de d


    // convierte BCD del DS1307 en ASCII para entregarlo.
	hora[5]= (hora[2] & 0x0f) | ascii_mask ;        //unidad año
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	3302      	adds	r3, #2
 8001472:	781b      	ldrb	r3, [r3, #0]
 8001474:	b25b      	sxtb	r3, r3
 8001476:	f003 030f 	and.w	r3, r3, #15
 800147a:	b25b      	sxtb	r3, r3
 800147c:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8001480:	b25a      	sxtb	r2, r3
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	3305      	adds	r3, #5
 8001486:	b2d2      	uxtb	r2, r2
 8001488:	701a      	strb	r2, [r3, #0]
	hora[4]= (hora[2] & 0xf0) >> 4 | ascii_mask;    //decena año
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	3302      	adds	r3, #2
 800148e:	781b      	ldrb	r3, [r3, #0]
 8001490:	091b      	lsrs	r3, r3, #4
 8001492:	b2da      	uxtb	r2, r3
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	3304      	adds	r3, #4
 8001498:	f042 0230 	orr.w	r2, r2, #48	; 0x30
 800149c:	b2d2      	uxtb	r2, r2
 800149e:	701a      	strb	r2, [r3, #0]
	hora[3]= (hora[1] & 0x0f) | ascii_mask ;        //unidad mes
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	3301      	adds	r3, #1
 80014a4:	781b      	ldrb	r3, [r3, #0]
 80014a6:	b25b      	sxtb	r3, r3
 80014a8:	f003 030f 	and.w	r3, r3, #15
 80014ac:	b25b      	sxtb	r3, r3
 80014ae:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80014b2:	b25a      	sxtb	r2, r3
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	3303      	adds	r3, #3
 80014b8:	b2d2      	uxtb	r2, r2
 80014ba:	701a      	strb	r2, [r3, #0]
	hora[2]= (hora[1] & 0xf0) >> 4 | ascii_mask;    //decena mes
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	3301      	adds	r3, #1
 80014c0:	781b      	ldrb	r3, [r3, #0]
 80014c2:	091b      	lsrs	r3, r3, #4
 80014c4:	b2da      	uxtb	r2, r3
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	3302      	adds	r3, #2
 80014ca:	f042 0230 	orr.w	r2, r2, #48	; 0x30
 80014ce:	b2d2      	uxtb	r2, r2
 80014d0:	701a      	strb	r2, [r3, #0]
	hora[1]= (hora[0] & 0x0f) | ascii_mask ;        //unidad dia
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	781b      	ldrb	r3, [r3, #0]
 80014d6:	b25b      	sxtb	r3, r3
 80014d8:	f003 030f 	and.w	r3, r3, #15
 80014dc:	b25b      	sxtb	r3, r3
 80014de:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80014e2:	b25a      	sxtb	r2, r3
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	3301      	adds	r3, #1
 80014e8:	b2d2      	uxtb	r2, r2
 80014ea:	701a      	strb	r2, [r3, #0]
	hora[0]= (hora[0] & 0xf0) >> 4 | ascii_mask;    //decena dia
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	781b      	ldrb	r3, [r3, #0]
 80014f0:	091b      	lsrs	r3, r3, #4
 80014f2:	b2db      	uxtb	r3, r3
 80014f4:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80014f8:	b2da      	uxtb	r2, r3
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	701a      	strb	r2, [r3, #0]

}
 80014fe:	bf00      	nop
 8001500:	3708      	adds	r7, #8
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}

08001506 <DS1307_GetTime>:
 * devuelve :lee i2c y entrega en formato hhmmss
 * funcionBloqueante solo en caso de error
 * En caso de Error genera una en led_rojo una frecuencia espesifica
 */
void DS1307_GetTime(char fecha[len_Wtime])
{
 8001506:	b580      	push	{r7, lr}
 8001508:	b082      	sub	sp, #8
 800150a:	af00      	add	r7, sp, #0
 800150c:	6078      	str	r0, [r7, #4]
	if (HAL_OK != i2c_RegRead(DevAddress,Reg_Sec,(uint8_t *) fecha, len_Btime))
 800150e:	2303      	movs	r3, #3
 8001510:	687a      	ldr	r2, [r7, #4]
 8001512:	2100      	movs	r1, #0
 8001514:	20d0      	movs	r0, #208	; 0xd0
 8001516:	f7ff fd17 	bl	8000f48 <i2c_RegRead>
 800151a:	4603      	mov	r3, r0
 800151c:	2b00      	cmp	r3, #0
 800151e:	d001      	beq.n	8001524 <DS1307_GetTime+0x1e>
		DS1307_Error();  // error de lectura
 8001520:	f000 f84e 	bl	80015c0 <DS1307_Error>
    					 // 6 char, formato "hhmmss" [0] decena de h

    // convierte BCD del DS1307 en ASCII para entregarlo.
    fecha[5]= (fecha[0] & 0x0f) | ascii_mask ;     //unidad Seg
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	781b      	ldrb	r3, [r3, #0]
 8001528:	b25b      	sxtb	r3, r3
 800152a:	f003 030f 	and.w	r3, r3, #15
 800152e:	b25b      	sxtb	r3, r3
 8001530:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8001534:	b25a      	sxtb	r2, r3
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	3305      	adds	r3, #5
 800153a:	b2d2      	uxtb	r2, r2
 800153c:	701a      	strb	r2, [r3, #0]
	fecha[4]= (fecha[0] & 0xf0) >> 4 | ascii_mask; //decena seg
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	781b      	ldrb	r3, [r3, #0]
 8001542:	091b      	lsrs	r3, r3, #4
 8001544:	b2da      	uxtb	r2, r3
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	3304      	adds	r3, #4
 800154a:	f042 0230 	orr.w	r2, r2, #48	; 0x30
 800154e:	b2d2      	uxtb	r2, r2
 8001550:	701a      	strb	r2, [r3, #0]
	fecha[0] = fecha[2];  // salva antes de sobre-escribirlo
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	789a      	ldrb	r2, [r3, #2]
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	701a      	strb	r2, [r3, #0]
	fecha[3]= (fecha[1] & 0x0f) | ascii_mask ;     //unidad min
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	3301      	adds	r3, #1
 800155e:	781b      	ldrb	r3, [r3, #0]
 8001560:	b25b      	sxtb	r3, r3
 8001562:	f003 030f 	and.w	r3, r3, #15
 8001566:	b25b      	sxtb	r3, r3
 8001568:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 800156c:	b25a      	sxtb	r2, r3
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	3303      	adds	r3, #3
 8001572:	b2d2      	uxtb	r2, r2
 8001574:	701a      	strb	r2, [r3, #0]
	fecha[2]= (fecha[1] & 0xf0) >> 4 | ascii_mask; //decena min
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	3301      	adds	r3, #1
 800157a:	781b      	ldrb	r3, [r3, #0]
 800157c:	091b      	lsrs	r3, r3, #4
 800157e:	b2da      	uxtb	r2, r3
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	3302      	adds	r3, #2
 8001584:	f042 0230 	orr.w	r2, r2, #48	; 0x30
 8001588:	b2d2      	uxtb	r2, r2
 800158a:	701a      	strb	r2, [r3, #0]
	fecha[1]= (fecha[0] & 0x0f) | ascii_mask ;     //unidad Hr
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	781b      	ldrb	r3, [r3, #0]
 8001590:	b25b      	sxtb	r3, r3
 8001592:	f003 030f 	and.w	r3, r3, #15
 8001596:	b25b      	sxtb	r3, r3
 8001598:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 800159c:	b25a      	sxtb	r2, r3
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	3301      	adds	r3, #1
 80015a2:	b2d2      	uxtb	r2, r2
 80015a4:	701a      	strb	r2, [r3, #0]
	fecha[0]= (fecha[0] & 0xf0) >> 4 | ascii_mask; //decena Hr
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	781b      	ldrb	r3, [r3, #0]
 80015aa:	091b      	lsrs	r3, r3, #4
 80015ac:	b2db      	uxtb	r3, r3
 80015ae:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80015b2:	b2da      	uxtb	r2, r3
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	701a      	strb	r2, [r3, #0]

}
 80015b8:	bf00      	nop
 80015ba:	3708      	adds	r7, #8
 80015bc:	46bd      	mov	sp, r7
 80015be:	bd80      	pop	{r7, pc}

080015c0 <DS1307_Error>:
 * no devuelve datos
 * funcionBloqueante
 * En caso de Error genera una en led_rojo una frecuencia espesifica
 */
void DS1307_Error ( void)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	af00      	add	r7, sp, #0
	BSP_LED_Init(LED_RED);
 80015c4:	2002      	movs	r0, #2
 80015c6:	f000 f89f 	bl	8001708 <BSP_LED_Init>
	while(1)
	{
		BSP_LED_Toggle(LED_RED);
 80015ca:	2002      	movs	r0, #2
 80015cc:	f000 f8ec 	bl	80017a8 <BSP_LED_Toggle>
		HAL_Delay(DS1307_Error_Delay);
 80015d0:	2064      	movs	r0, #100	; 0x64
 80015d2:	f000 f975 	bl	80018c0 <HAL_Delay>
		BSP_LED_Toggle(LED_RED);
 80015d6:	e7f8      	b.n	80015ca <DS1307_Error+0xa>

080015d8 <LCD04x16_init>:


/* Name & Code of Function ---------------------------------------------------*/

void LCD04x16_init (void)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	af00      	add	r7, sp, #0
	i2c_Init();
 80015dc:	f7ff fc14 	bl	8000e08 <i2c_Init>

	// 4 bit initialisation
	HAL_Delay(10);  // wait for >40ms
 80015e0:	200a      	movs	r0, #10
 80015e2:	f000 f96d 	bl	80018c0 <HAL_Delay>
	LCD04x16_TxCmd (0x30);
 80015e6:	2030      	movs	r0, #48	; 0x30
 80015e8:	f000 f838 	bl	800165c <LCD04x16_TxCmd>
	HAL_Delay(10);  // wait for >4.1ms
 80015ec:	200a      	movs	r0, #10
 80015ee:	f000 f967 	bl	80018c0 <HAL_Delay>
	LCD04x16_TxCmd (0x30);
 80015f2:	2030      	movs	r0, #48	; 0x30
 80015f4:	f000 f832 	bl	800165c <LCD04x16_TxCmd>
	HAL_Delay(10);  // wait for >100us
 80015f8:	200a      	movs	r0, #10
 80015fa:	f000 f961 	bl	80018c0 <HAL_Delay>
	LCD04x16_TxCmd (0x30);
 80015fe:	2030      	movs	r0, #48	; 0x30
 8001600:	f000 f82c 	bl	800165c <LCD04x16_TxCmd>
	HAL_Delay(10);
 8001604:	200a      	movs	r0, #10
 8001606:	f000 f95b 	bl	80018c0 <HAL_Delay>
	LCD04x16_TxCmd (0x20);  // 4bit mode
 800160a:	2020      	movs	r0, #32
 800160c:	f000 f826 	bl	800165c <LCD04x16_TxCmd>
	HAL_Delay(10);
 8001610:	200a      	movs	r0, #10
 8001612:	f000 f955 	bl	80018c0 <HAL_Delay>

  // dislay initialisation
	LCD04x16_TxCmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8001616:	2028      	movs	r0, #40	; 0x28
 8001618:	f000 f820 	bl	800165c <LCD04x16_TxCmd>
	HAL_Delay(10);
 800161c:	200a      	movs	r0, #10
 800161e:	f000 f94f 	bl	80018c0 <HAL_Delay>
	LCD04x16_TxCmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8001622:	2008      	movs	r0, #8
 8001624:	f000 f81a 	bl	800165c <LCD04x16_TxCmd>
	HAL_Delay(10);
 8001628:	200a      	movs	r0, #10
 800162a:	f000 f949 	bl	80018c0 <HAL_Delay>
	LCD04x16_TxCmd (0x01);  // clear display
 800162e:	2001      	movs	r0, #1
 8001630:	f000 f814 	bl	800165c <LCD04x16_TxCmd>
	HAL_Delay(10);
 8001634:	200a      	movs	r0, #10
 8001636:	f000 f943 	bl	80018c0 <HAL_Delay>
	LCD04x16_TxCmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 800163a:	2006      	movs	r0, #6
 800163c:	f000 f80e 	bl	800165c <LCD04x16_TxCmd>
	HAL_Delay(10);
 8001640:	200a      	movs	r0, #10
 8001642:	f000 f93d 	bl	80018c0 <HAL_Delay>
	LCD04x16_TxCmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8001646:	200c      	movs	r0, #12
 8001648:	f000 f808 	bl	800165c <LCD04x16_TxCmd>
	HAL_Delay(10);
 800164c:	200a      	movs	r0, #10
 800164e:	f000 f937 	bl	80018c0 <HAL_Delay>
	LCD04x16_TxCmd(0x01);
 8001652:	2001      	movs	r0, #1
 8001654:	f000 f802 	bl	800165c <LCD04x16_TxCmd>




}
 8001658:	bf00      	nop
 800165a:	bd80      	pop	{r7, pc}

0800165c <LCD04x16_TxCmd>:



//void LCD04x16_TxCmd(char LCD_Cmd)
void LCD04x16_TxCmd(char LCD_Cmd)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b084      	sub	sp, #16
 8001660:	af00      	add	r7, sp, #0
 8001662:	4603      	mov	r3, r0
 8001664:	71fb      	strb	r3, [r7, #7]
	  char data_u, data_l;
		uint8_t data_t[4];
		data_u = (LCD_Cmd&0xf0);
 8001666:	79fb      	ldrb	r3, [r7, #7]
 8001668:	f023 030f 	bic.w	r3, r3, #15
 800166c:	73fb      	strb	r3, [r7, #15]
		data_l = ((LCD_Cmd<<4)&0xf0);
 800166e:	79fb      	ldrb	r3, [r7, #7]
 8001670:	011b      	lsls	r3, r3, #4
 8001672:	73bb      	strb	r3, [r7, #14]
		data_t[0] = data_u|0x0C;  //en=1, rs=0
 8001674:	7bfb      	ldrb	r3, [r7, #15]
 8001676:	f043 030c 	orr.w	r3, r3, #12
 800167a:	b2db      	uxtb	r3, r3
 800167c:	723b      	strb	r3, [r7, #8]
		data_t[1] = data_u|0x08;  //en=0, rs=0
 800167e:	7bfb      	ldrb	r3, [r7, #15]
 8001680:	f043 0308 	orr.w	r3, r3, #8
 8001684:	b2db      	uxtb	r3, r3
 8001686:	727b      	strb	r3, [r7, #9]
		data_t[2] = data_l|0x0C;  //en=1, rs=0
 8001688:	7bbb      	ldrb	r3, [r7, #14]
 800168a:	f043 030c 	orr.w	r3, r3, #12
 800168e:	b2db      	uxtb	r3, r3
 8001690:	72bb      	strb	r3, [r7, #10]
		data_t[3] = data_l|0x08;  //en=0, rs=0
 8001692:	7bbb      	ldrb	r3, [r7, #14]
 8001694:	f043 0308 	orr.w	r3, r3, #8
 8001698:	b2db      	uxtb	r3, r3
 800169a:	72fb      	strb	r3, [r7, #11]
		i2c_WriteTrama(DevAddress, (uint8_t *)data_t, 4);
 800169c:	f107 0308 	add.w	r3, r7, #8
 80016a0:	2204      	movs	r2, #4
 80016a2:	4619      	mov	r1, r3
 80016a4:	204e      	movs	r0, #78	; 0x4e
 80016a6:	f7ff fc83 	bl	8000fb0 <i2c_WriteTrama>
	data_t[0] = data_l|msk_Enabled | msk; // 0x0C;  //en=1, rs=0
	data_t[1] = data_l|Clear_port  | msk;  //0x08;  //en=0, rs=0

	i2c_WriteTrama(DevAddress, (uint8_t *)data_t, 2);
*/
}
 80016aa:	bf00      	nop
 80016ac:	3710      	adds	r7, #16
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}

080016b2 <LCD04x16_TxChar>:


//void LCD04x16_TxChar(char LCD_Dat)
void LCD04x16_TxChar(char LCD_Dat)
{
 80016b2:	b580      	push	{r7, lr}
 80016b4:	b084      	sub	sp, #16
 80016b6:	af00      	add	r7, sp, #0
 80016b8:	4603      	mov	r3, r0
 80016ba:	71fb      	strb	r3, [r7, #7]

	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (LCD_Dat&0xf0);
 80016bc:	79fb      	ldrb	r3, [r7, #7]
 80016be:	f023 030f 	bic.w	r3, r3, #15
 80016c2:	73fb      	strb	r3, [r7, #15]
	data_l = ((LCD_Dat<<4)&0xf0);
 80016c4:	79fb      	ldrb	r3, [r7, #7]
 80016c6:	011b      	lsls	r3, r3, #4
 80016c8:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=1
 80016ca:	7bfb      	ldrb	r3, [r7, #15]
 80016cc:	f043 030d 	orr.w	r3, r3, #13
 80016d0:	b2db      	uxtb	r3, r3
 80016d2:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=1
 80016d4:	7bfb      	ldrb	r3, [r7, #15]
 80016d6:	f043 0309 	orr.w	r3, r3, #9
 80016da:	b2db      	uxtb	r3, r3
 80016dc:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=1
 80016de:	7bbb      	ldrb	r3, [r7, #14]
 80016e0:	f043 030d 	orr.w	r3, r3, #13
 80016e4:	b2db      	uxtb	r3, r3
 80016e6:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=1
 80016e8:	7bbb      	ldrb	r3, [r7, #14]
 80016ea:	f043 0309 	orr.w	r3, r3, #9
 80016ee:	b2db      	uxtb	r3, r3
 80016f0:	72fb      	strb	r3, [r7, #11]

	i2c_WriteTrama(DevAddress, (uint8_t *)data_t, 4);
 80016f2:	f107 0308 	add.w	r3, r7, #8
 80016f6:	2204      	movs	r2, #4
 80016f8:	4619      	mov	r1, r3
 80016fa:	204e      	movs	r0, #78	; 0x4e
 80016fc:	f7ff fc58 	bl	8000fb0 <i2c_WriteTrama>
	data_t[3] = (data_l & msk_Clear)| msk_RS | msk ; // 0x09;  //en=0, rs=1
//	HAL_I2C_Master_Transmit (&hi2c1, DevAddress,(uint8_t *) data_t, 4, 100);
	i2c_WriteTrama(DevAddress, (uint8_t *)data_t, 4);
*/

}
 8001700:	bf00      	nop
 8001702:	3710      	adds	r7, #16
 8001704:	46bd      	mov	sp, r7
 8001706:	bd80      	pop	{r7, pc}

08001708 <BSP_LED_Init>:

//******************************************************************************************
//**********   MANEJO DE LEDS    ***********************************************************
//******************************************************************************************
void BSP_LED_Init(Led_TypeDef Led)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b08a      	sub	sp, #40	; 0x28
 800170c:	af00      	add	r7, sp, #0
 800170e:	4603      	mov	r3, r0
 8001710:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8001712:	79fb      	ldrb	r3, [r7, #7]
 8001714:	2b00      	cmp	r3, #0
 8001716:	d10e      	bne.n	8001736 <BSP_LED_Init+0x2e>
 8001718:	2300      	movs	r3, #0
 800171a:	613b      	str	r3, [r7, #16]
 800171c:	4b1f      	ldr	r3, [pc, #124]	; (800179c <BSP_LED_Init+0x94>)
 800171e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001720:	4a1e      	ldr	r2, [pc, #120]	; (800179c <BSP_LED_Init+0x94>)
 8001722:	f043 0302 	orr.w	r3, r3, #2
 8001726:	6313      	str	r3, [r2, #48]	; 0x30
 8001728:	4b1c      	ldr	r3, [pc, #112]	; (800179c <BSP_LED_Init+0x94>)
 800172a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800172c:	f003 0302 	and.w	r3, r3, #2
 8001730:	613b      	str	r3, [r7, #16]
 8001732:	693b      	ldr	r3, [r7, #16]
 8001734:	e00d      	b.n	8001752 <BSP_LED_Init+0x4a>
 8001736:	2300      	movs	r3, #0
 8001738:	60fb      	str	r3, [r7, #12]
 800173a:	4b18      	ldr	r3, [pc, #96]	; (800179c <BSP_LED_Init+0x94>)
 800173c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800173e:	4a17      	ldr	r2, [pc, #92]	; (800179c <BSP_LED_Init+0x94>)
 8001740:	f043 0302 	orr.w	r3, r3, #2
 8001744:	6313      	str	r3, [r2, #48]	; 0x30
 8001746:	4b15      	ldr	r3, [pc, #84]	; (800179c <BSP_LED_Init+0x94>)
 8001748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800174a:	f003 0302 	and.w	r3, r3, #2
 800174e:	60fb      	str	r3, [r7, #12]
 8001750:	68fb      	ldr	r3, [r7, #12]

  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 8001752:	79fb      	ldrb	r3, [r7, #7]
 8001754:	4a12      	ldr	r2, [pc, #72]	; (80017a0 <BSP_LED_Init+0x98>)
 8001756:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800175a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800175c:	2301      	movs	r3, #1
 800175e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001760:	2300      	movs	r3, #0
 8001762:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8001764:	2302      	movs	r3, #2
 8001766:	623b      	str	r3, [r7, #32]

  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 8001768:	79fb      	ldrb	r3, [r7, #7]
 800176a:	4a0e      	ldr	r2, [pc, #56]	; (80017a4 <BSP_LED_Init+0x9c>)
 800176c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001770:	f107 0214 	add.w	r2, r7, #20
 8001774:	4611      	mov	r1, r2
 8001776:	4618      	mov	r0, r3
 8001778:	f000 f9ac 	bl	8001ad4 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET);
 800177c:	79fb      	ldrb	r3, [r7, #7]
 800177e:	4a09      	ldr	r2, [pc, #36]	; (80017a4 <BSP_LED_Init+0x9c>)
 8001780:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001784:	79fb      	ldrb	r3, [r7, #7]
 8001786:	4a06      	ldr	r2, [pc, #24]	; (80017a0 <BSP_LED_Init+0x98>)
 8001788:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800178c:	2200      	movs	r2, #0
 800178e:	4619      	mov	r1, r3
 8001790:	f000 fb4c 	bl	8001e2c <HAL_GPIO_WritePin>
}
 8001794:	bf00      	nop
 8001796:	3728      	adds	r7, #40	; 0x28
 8001798:	46bd      	mov	sp, r7
 800179a:	bd80      	pop	{r7, pc}
 800179c:	40023800 	.word	0x40023800
 80017a0:	08005328 	.word	0x08005328
 80017a4:	20000004 	.word	0x20000004

080017a8 <BSP_LED_Toggle>:
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET);
}

// Invierte el estado actual de variable Led
void BSP_LED_Toggle(Led_TypeDef Led)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b082      	sub	sp, #8
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	4603      	mov	r3, r0
 80017b0:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(GPIO_PORT[Led], GPIO_PIN[Led]);
 80017b2:	79fb      	ldrb	r3, [r7, #7]
 80017b4:	4a07      	ldr	r2, [pc, #28]	; (80017d4 <BSP_LED_Toggle+0x2c>)
 80017b6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80017ba:	79fb      	ldrb	r3, [r7, #7]
 80017bc:	4906      	ldr	r1, [pc, #24]	; (80017d8 <BSP_LED_Toggle+0x30>)
 80017be:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80017c2:	4619      	mov	r1, r3
 80017c4:	4610      	mov	r0, r2
 80017c6:	f000 fb4a 	bl	8001e5e <HAL_GPIO_TogglePin>
}
 80017ca:	bf00      	nop
 80017cc:	3708      	adds	r7, #8
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	20000004 	.word	0x20000004
 80017d8:	08005328 	.word	0x08005328

080017dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80017e0:	4b0e      	ldr	r3, [pc, #56]	; (800181c <HAL_Init+0x40>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4a0d      	ldr	r2, [pc, #52]	; (800181c <HAL_Init+0x40>)
 80017e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80017ea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80017ec:	4b0b      	ldr	r3, [pc, #44]	; (800181c <HAL_Init+0x40>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4a0a      	ldr	r2, [pc, #40]	; (800181c <HAL_Init+0x40>)
 80017f2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80017f6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017f8:	4b08      	ldr	r3, [pc, #32]	; (800181c <HAL_Init+0x40>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4a07      	ldr	r2, [pc, #28]	; (800181c <HAL_Init+0x40>)
 80017fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001802:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001804:	2003      	movs	r0, #3
 8001806:	f000 f931 	bl	8001a6c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800180a:	2000      	movs	r0, #0
 800180c:	f000 f808 	bl	8001820 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001810:	f7ff f918 	bl	8000a44 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001814:	2300      	movs	r3, #0
}
 8001816:	4618      	mov	r0, r3
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop
 800181c:	40023c00 	.word	0x40023c00

08001820 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b082      	sub	sp, #8
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001828:	4b12      	ldr	r3, [pc, #72]	; (8001874 <HAL_InitTick+0x54>)
 800182a:	681a      	ldr	r2, [r3, #0]
 800182c:	4b12      	ldr	r3, [pc, #72]	; (8001878 <HAL_InitTick+0x58>)
 800182e:	781b      	ldrb	r3, [r3, #0]
 8001830:	4619      	mov	r1, r3
 8001832:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001836:	fbb3 f3f1 	udiv	r3, r3, r1
 800183a:	fbb2 f3f3 	udiv	r3, r2, r3
 800183e:	4618      	mov	r0, r3
 8001840:	f000 f93b 	bl	8001aba <HAL_SYSTICK_Config>
 8001844:	4603      	mov	r3, r0
 8001846:	2b00      	cmp	r3, #0
 8001848:	d001      	beq.n	800184e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800184a:	2301      	movs	r3, #1
 800184c:	e00e      	b.n	800186c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	2b0f      	cmp	r3, #15
 8001852:	d80a      	bhi.n	800186a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001854:	2200      	movs	r2, #0
 8001856:	6879      	ldr	r1, [r7, #4]
 8001858:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800185c:	f000 f911 	bl	8001a82 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001860:	4a06      	ldr	r2, [pc, #24]	; (800187c <HAL_InitTick+0x5c>)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001866:	2300      	movs	r3, #0
 8001868:	e000      	b.n	800186c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800186a:	2301      	movs	r3, #1
}
 800186c:	4618      	mov	r0, r3
 800186e:	3708      	adds	r7, #8
 8001870:	46bd      	mov	sp, r7
 8001872:	bd80      	pop	{r7, pc}
 8001874:	20000000 	.word	0x20000000
 8001878:	20000014 	.word	0x20000014
 800187c:	20000010 	.word	0x20000010

08001880 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001880:	b480      	push	{r7}
 8001882:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001884:	4b06      	ldr	r3, [pc, #24]	; (80018a0 <HAL_IncTick+0x20>)
 8001886:	781b      	ldrb	r3, [r3, #0]
 8001888:	461a      	mov	r2, r3
 800188a:	4b06      	ldr	r3, [pc, #24]	; (80018a4 <HAL_IncTick+0x24>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	4413      	add	r3, r2
 8001890:	4a04      	ldr	r2, [pc, #16]	; (80018a4 <HAL_IncTick+0x24>)
 8001892:	6013      	str	r3, [r2, #0]
}
 8001894:	bf00      	nop
 8001896:	46bd      	mov	sp, r7
 8001898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189c:	4770      	bx	lr
 800189e:	bf00      	nop
 80018a0:	20000014 	.word	0x20000014
 80018a4:	20000134 	.word	0x20000134

080018a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018a8:	b480      	push	{r7}
 80018aa:	af00      	add	r7, sp, #0
  return uwTick;
 80018ac:	4b03      	ldr	r3, [pc, #12]	; (80018bc <HAL_GetTick+0x14>)
 80018ae:	681b      	ldr	r3, [r3, #0]
}
 80018b0:	4618      	mov	r0, r3
 80018b2:	46bd      	mov	sp, r7
 80018b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b8:	4770      	bx	lr
 80018ba:	bf00      	nop
 80018bc:	20000134 	.word	0x20000134

080018c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b084      	sub	sp, #16
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018c8:	f7ff ffee 	bl	80018a8 <HAL_GetTick>
 80018cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80018d8:	d005      	beq.n	80018e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80018da:	4b0a      	ldr	r3, [pc, #40]	; (8001904 <HAL_Delay+0x44>)
 80018dc:	781b      	ldrb	r3, [r3, #0]
 80018de:	461a      	mov	r2, r3
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	4413      	add	r3, r2
 80018e4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80018e6:	bf00      	nop
 80018e8:	f7ff ffde 	bl	80018a8 <HAL_GetTick>
 80018ec:	4602      	mov	r2, r0
 80018ee:	68bb      	ldr	r3, [r7, #8]
 80018f0:	1ad3      	subs	r3, r2, r3
 80018f2:	68fa      	ldr	r2, [r7, #12]
 80018f4:	429a      	cmp	r2, r3
 80018f6:	d8f7      	bhi.n	80018e8 <HAL_Delay+0x28>
  {
  }
}
 80018f8:	bf00      	nop
 80018fa:	bf00      	nop
 80018fc:	3710      	adds	r7, #16
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	20000014 	.word	0x20000014

08001908 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001908:	b480      	push	{r7}
 800190a:	b085      	sub	sp, #20
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	f003 0307 	and.w	r3, r3, #7
 8001916:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001918:	4b0c      	ldr	r3, [pc, #48]	; (800194c <__NVIC_SetPriorityGrouping+0x44>)
 800191a:	68db      	ldr	r3, [r3, #12]
 800191c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800191e:	68ba      	ldr	r2, [r7, #8]
 8001920:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001924:	4013      	ands	r3, r2
 8001926:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800192c:	68bb      	ldr	r3, [r7, #8]
 800192e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001930:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001934:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001938:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800193a:	4a04      	ldr	r2, [pc, #16]	; (800194c <__NVIC_SetPriorityGrouping+0x44>)
 800193c:	68bb      	ldr	r3, [r7, #8]
 800193e:	60d3      	str	r3, [r2, #12]
}
 8001940:	bf00      	nop
 8001942:	3714      	adds	r7, #20
 8001944:	46bd      	mov	sp, r7
 8001946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194a:	4770      	bx	lr
 800194c:	e000ed00 	.word	0xe000ed00

08001950 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001950:	b480      	push	{r7}
 8001952:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001954:	4b04      	ldr	r3, [pc, #16]	; (8001968 <__NVIC_GetPriorityGrouping+0x18>)
 8001956:	68db      	ldr	r3, [r3, #12]
 8001958:	0a1b      	lsrs	r3, r3, #8
 800195a:	f003 0307 	and.w	r3, r3, #7
}
 800195e:	4618      	mov	r0, r3
 8001960:	46bd      	mov	sp, r7
 8001962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001966:	4770      	bx	lr
 8001968:	e000ed00 	.word	0xe000ed00

0800196c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800196c:	b480      	push	{r7}
 800196e:	b083      	sub	sp, #12
 8001970:	af00      	add	r7, sp, #0
 8001972:	4603      	mov	r3, r0
 8001974:	6039      	str	r1, [r7, #0]
 8001976:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001978:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800197c:	2b00      	cmp	r3, #0
 800197e:	db0a      	blt.n	8001996 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	b2da      	uxtb	r2, r3
 8001984:	490c      	ldr	r1, [pc, #48]	; (80019b8 <__NVIC_SetPriority+0x4c>)
 8001986:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800198a:	0112      	lsls	r2, r2, #4
 800198c:	b2d2      	uxtb	r2, r2
 800198e:	440b      	add	r3, r1
 8001990:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001994:	e00a      	b.n	80019ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	b2da      	uxtb	r2, r3
 800199a:	4908      	ldr	r1, [pc, #32]	; (80019bc <__NVIC_SetPriority+0x50>)
 800199c:	79fb      	ldrb	r3, [r7, #7]
 800199e:	f003 030f 	and.w	r3, r3, #15
 80019a2:	3b04      	subs	r3, #4
 80019a4:	0112      	lsls	r2, r2, #4
 80019a6:	b2d2      	uxtb	r2, r2
 80019a8:	440b      	add	r3, r1
 80019aa:	761a      	strb	r2, [r3, #24]
}
 80019ac:	bf00      	nop
 80019ae:	370c      	adds	r7, #12
 80019b0:	46bd      	mov	sp, r7
 80019b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b6:	4770      	bx	lr
 80019b8:	e000e100 	.word	0xe000e100
 80019bc:	e000ed00 	.word	0xe000ed00

080019c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019c0:	b480      	push	{r7}
 80019c2:	b089      	sub	sp, #36	; 0x24
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	60f8      	str	r0, [r7, #12]
 80019c8:	60b9      	str	r1, [r7, #8]
 80019ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	f003 0307 	and.w	r3, r3, #7
 80019d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019d4:	69fb      	ldr	r3, [r7, #28]
 80019d6:	f1c3 0307 	rsb	r3, r3, #7
 80019da:	2b04      	cmp	r3, #4
 80019dc:	bf28      	it	cs
 80019de:	2304      	movcs	r3, #4
 80019e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019e2:	69fb      	ldr	r3, [r7, #28]
 80019e4:	3304      	adds	r3, #4
 80019e6:	2b06      	cmp	r3, #6
 80019e8:	d902      	bls.n	80019f0 <NVIC_EncodePriority+0x30>
 80019ea:	69fb      	ldr	r3, [r7, #28]
 80019ec:	3b03      	subs	r3, #3
 80019ee:	e000      	b.n	80019f2 <NVIC_EncodePriority+0x32>
 80019f0:	2300      	movs	r3, #0
 80019f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80019f8:	69bb      	ldr	r3, [r7, #24]
 80019fa:	fa02 f303 	lsl.w	r3, r2, r3
 80019fe:	43da      	mvns	r2, r3
 8001a00:	68bb      	ldr	r3, [r7, #8]
 8001a02:	401a      	ands	r2, r3
 8001a04:	697b      	ldr	r3, [r7, #20]
 8001a06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a08:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001a0c:	697b      	ldr	r3, [r7, #20]
 8001a0e:	fa01 f303 	lsl.w	r3, r1, r3
 8001a12:	43d9      	mvns	r1, r3
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a18:	4313      	orrs	r3, r2
         );
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	3724      	adds	r7, #36	; 0x24
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a24:	4770      	bx	lr
	...

08001a28 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b082      	sub	sp, #8
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	3b01      	subs	r3, #1
 8001a34:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a38:	d301      	bcc.n	8001a3e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	e00f      	b.n	8001a5e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a3e:	4a0a      	ldr	r2, [pc, #40]	; (8001a68 <SysTick_Config+0x40>)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	3b01      	subs	r3, #1
 8001a44:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a46:	210f      	movs	r1, #15
 8001a48:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001a4c:	f7ff ff8e 	bl	800196c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a50:	4b05      	ldr	r3, [pc, #20]	; (8001a68 <SysTick_Config+0x40>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a56:	4b04      	ldr	r3, [pc, #16]	; (8001a68 <SysTick_Config+0x40>)
 8001a58:	2207      	movs	r2, #7
 8001a5a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a5c:	2300      	movs	r3, #0
}
 8001a5e:	4618      	mov	r0, r3
 8001a60:	3708      	adds	r7, #8
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}
 8001a66:	bf00      	nop
 8001a68:	e000e010 	.word	0xe000e010

08001a6c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b082      	sub	sp, #8
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a74:	6878      	ldr	r0, [r7, #4]
 8001a76:	f7ff ff47 	bl	8001908 <__NVIC_SetPriorityGrouping>
}
 8001a7a:	bf00      	nop
 8001a7c:	3708      	adds	r7, #8
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}

08001a82 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a82:	b580      	push	{r7, lr}
 8001a84:	b086      	sub	sp, #24
 8001a86:	af00      	add	r7, sp, #0
 8001a88:	4603      	mov	r3, r0
 8001a8a:	60b9      	str	r1, [r7, #8]
 8001a8c:	607a      	str	r2, [r7, #4]
 8001a8e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a90:	2300      	movs	r3, #0
 8001a92:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a94:	f7ff ff5c 	bl	8001950 <__NVIC_GetPriorityGrouping>
 8001a98:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a9a:	687a      	ldr	r2, [r7, #4]
 8001a9c:	68b9      	ldr	r1, [r7, #8]
 8001a9e:	6978      	ldr	r0, [r7, #20]
 8001aa0:	f7ff ff8e 	bl	80019c0 <NVIC_EncodePriority>
 8001aa4:	4602      	mov	r2, r0
 8001aa6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001aaa:	4611      	mov	r1, r2
 8001aac:	4618      	mov	r0, r3
 8001aae:	f7ff ff5d 	bl	800196c <__NVIC_SetPriority>
}
 8001ab2:	bf00      	nop
 8001ab4:	3718      	adds	r7, #24
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}

08001aba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001aba:	b580      	push	{r7, lr}
 8001abc:	b082      	sub	sp, #8
 8001abe:	af00      	add	r7, sp, #0
 8001ac0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ac2:	6878      	ldr	r0, [r7, #4]
 8001ac4:	f7ff ffb0 	bl	8001a28 <SysTick_Config>
 8001ac8:	4603      	mov	r3, r0
}
 8001aca:	4618      	mov	r0, r3
 8001acc:	3708      	adds	r7, #8
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}
	...

08001ad4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	b089      	sub	sp, #36	; 0x24
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
 8001adc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001aea:	2300      	movs	r3, #0
 8001aec:	61fb      	str	r3, [r7, #28]
 8001aee:	e177      	b.n	8001de0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001af0:	2201      	movs	r2, #1
 8001af2:	69fb      	ldr	r3, [r7, #28]
 8001af4:	fa02 f303 	lsl.w	r3, r2, r3
 8001af8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	697a      	ldr	r2, [r7, #20]
 8001b00:	4013      	ands	r3, r2
 8001b02:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001b04:	693a      	ldr	r2, [r7, #16]
 8001b06:	697b      	ldr	r3, [r7, #20]
 8001b08:	429a      	cmp	r2, r3
 8001b0a:	f040 8166 	bne.w	8001dda <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	f003 0303 	and.w	r3, r3, #3
 8001b16:	2b01      	cmp	r3, #1
 8001b18:	d005      	beq.n	8001b26 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b22:	2b02      	cmp	r3, #2
 8001b24:	d130      	bne.n	8001b88 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	689b      	ldr	r3, [r3, #8]
 8001b2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001b2c:	69fb      	ldr	r3, [r7, #28]
 8001b2e:	005b      	lsls	r3, r3, #1
 8001b30:	2203      	movs	r2, #3
 8001b32:	fa02 f303 	lsl.w	r3, r2, r3
 8001b36:	43db      	mvns	r3, r3
 8001b38:	69ba      	ldr	r2, [r7, #24]
 8001b3a:	4013      	ands	r3, r2
 8001b3c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	68da      	ldr	r2, [r3, #12]
 8001b42:	69fb      	ldr	r3, [r7, #28]
 8001b44:	005b      	lsls	r3, r3, #1
 8001b46:	fa02 f303 	lsl.w	r3, r2, r3
 8001b4a:	69ba      	ldr	r2, [r7, #24]
 8001b4c:	4313      	orrs	r3, r2
 8001b4e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	69ba      	ldr	r2, [r7, #24]
 8001b54:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b5c:	2201      	movs	r2, #1
 8001b5e:	69fb      	ldr	r3, [r7, #28]
 8001b60:	fa02 f303 	lsl.w	r3, r2, r3
 8001b64:	43db      	mvns	r3, r3
 8001b66:	69ba      	ldr	r2, [r7, #24]
 8001b68:	4013      	ands	r3, r2
 8001b6a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	091b      	lsrs	r3, r3, #4
 8001b72:	f003 0201 	and.w	r2, r3, #1
 8001b76:	69fb      	ldr	r3, [r7, #28]
 8001b78:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7c:	69ba      	ldr	r2, [r7, #24]
 8001b7e:	4313      	orrs	r3, r2
 8001b80:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	69ba      	ldr	r2, [r7, #24]
 8001b86:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	f003 0303 	and.w	r3, r3, #3
 8001b90:	2b03      	cmp	r3, #3
 8001b92:	d017      	beq.n	8001bc4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	68db      	ldr	r3, [r3, #12]
 8001b98:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001b9a:	69fb      	ldr	r3, [r7, #28]
 8001b9c:	005b      	lsls	r3, r3, #1
 8001b9e:	2203      	movs	r2, #3
 8001ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba4:	43db      	mvns	r3, r3
 8001ba6:	69ba      	ldr	r2, [r7, #24]
 8001ba8:	4013      	ands	r3, r2
 8001baa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	689a      	ldr	r2, [r3, #8]
 8001bb0:	69fb      	ldr	r3, [r7, #28]
 8001bb2:	005b      	lsls	r3, r3, #1
 8001bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb8:	69ba      	ldr	r2, [r7, #24]
 8001bba:	4313      	orrs	r3, r2
 8001bbc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	69ba      	ldr	r2, [r7, #24]
 8001bc2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	f003 0303 	and.w	r3, r3, #3
 8001bcc:	2b02      	cmp	r3, #2
 8001bce:	d123      	bne.n	8001c18 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001bd0:	69fb      	ldr	r3, [r7, #28]
 8001bd2:	08da      	lsrs	r2, r3, #3
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	3208      	adds	r2, #8
 8001bd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bdc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001bde:	69fb      	ldr	r3, [r7, #28]
 8001be0:	f003 0307 	and.w	r3, r3, #7
 8001be4:	009b      	lsls	r3, r3, #2
 8001be6:	220f      	movs	r2, #15
 8001be8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bec:	43db      	mvns	r3, r3
 8001bee:	69ba      	ldr	r2, [r7, #24]
 8001bf0:	4013      	ands	r3, r2
 8001bf2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	691a      	ldr	r2, [r3, #16]
 8001bf8:	69fb      	ldr	r3, [r7, #28]
 8001bfa:	f003 0307 	and.w	r3, r3, #7
 8001bfe:	009b      	lsls	r3, r3, #2
 8001c00:	fa02 f303 	lsl.w	r3, r2, r3
 8001c04:	69ba      	ldr	r2, [r7, #24]
 8001c06:	4313      	orrs	r3, r2
 8001c08:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001c0a:	69fb      	ldr	r3, [r7, #28]
 8001c0c:	08da      	lsrs	r2, r3, #3
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	3208      	adds	r2, #8
 8001c12:	69b9      	ldr	r1, [r7, #24]
 8001c14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001c1e:	69fb      	ldr	r3, [r7, #28]
 8001c20:	005b      	lsls	r3, r3, #1
 8001c22:	2203      	movs	r2, #3
 8001c24:	fa02 f303 	lsl.w	r3, r2, r3
 8001c28:	43db      	mvns	r3, r3
 8001c2a:	69ba      	ldr	r2, [r7, #24]
 8001c2c:	4013      	ands	r3, r2
 8001c2e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	f003 0203 	and.w	r2, r3, #3
 8001c38:	69fb      	ldr	r3, [r7, #28]
 8001c3a:	005b      	lsls	r3, r3, #1
 8001c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c40:	69ba      	ldr	r2, [r7, #24]
 8001c42:	4313      	orrs	r3, r2
 8001c44:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	69ba      	ldr	r2, [r7, #24]
 8001c4a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	f000 80c0 	beq.w	8001dda <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	60fb      	str	r3, [r7, #12]
 8001c5e:	4b66      	ldr	r3, [pc, #408]	; (8001df8 <HAL_GPIO_Init+0x324>)
 8001c60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c62:	4a65      	ldr	r2, [pc, #404]	; (8001df8 <HAL_GPIO_Init+0x324>)
 8001c64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c68:	6453      	str	r3, [r2, #68]	; 0x44
 8001c6a:	4b63      	ldr	r3, [pc, #396]	; (8001df8 <HAL_GPIO_Init+0x324>)
 8001c6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c72:	60fb      	str	r3, [r7, #12]
 8001c74:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c76:	4a61      	ldr	r2, [pc, #388]	; (8001dfc <HAL_GPIO_Init+0x328>)
 8001c78:	69fb      	ldr	r3, [r7, #28]
 8001c7a:	089b      	lsrs	r3, r3, #2
 8001c7c:	3302      	adds	r3, #2
 8001c7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c82:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001c84:	69fb      	ldr	r3, [r7, #28]
 8001c86:	f003 0303 	and.w	r3, r3, #3
 8001c8a:	009b      	lsls	r3, r3, #2
 8001c8c:	220f      	movs	r2, #15
 8001c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c92:	43db      	mvns	r3, r3
 8001c94:	69ba      	ldr	r2, [r7, #24]
 8001c96:	4013      	ands	r3, r2
 8001c98:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	4a58      	ldr	r2, [pc, #352]	; (8001e00 <HAL_GPIO_Init+0x32c>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d037      	beq.n	8001d12 <HAL_GPIO_Init+0x23e>
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	4a57      	ldr	r2, [pc, #348]	; (8001e04 <HAL_GPIO_Init+0x330>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d031      	beq.n	8001d0e <HAL_GPIO_Init+0x23a>
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	4a56      	ldr	r2, [pc, #344]	; (8001e08 <HAL_GPIO_Init+0x334>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d02b      	beq.n	8001d0a <HAL_GPIO_Init+0x236>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	4a55      	ldr	r2, [pc, #340]	; (8001e0c <HAL_GPIO_Init+0x338>)
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d025      	beq.n	8001d06 <HAL_GPIO_Init+0x232>
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	4a54      	ldr	r2, [pc, #336]	; (8001e10 <HAL_GPIO_Init+0x33c>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d01f      	beq.n	8001d02 <HAL_GPIO_Init+0x22e>
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	4a53      	ldr	r2, [pc, #332]	; (8001e14 <HAL_GPIO_Init+0x340>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d019      	beq.n	8001cfe <HAL_GPIO_Init+0x22a>
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	4a52      	ldr	r2, [pc, #328]	; (8001e18 <HAL_GPIO_Init+0x344>)
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d013      	beq.n	8001cfa <HAL_GPIO_Init+0x226>
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	4a51      	ldr	r2, [pc, #324]	; (8001e1c <HAL_GPIO_Init+0x348>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d00d      	beq.n	8001cf6 <HAL_GPIO_Init+0x222>
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	4a50      	ldr	r2, [pc, #320]	; (8001e20 <HAL_GPIO_Init+0x34c>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d007      	beq.n	8001cf2 <HAL_GPIO_Init+0x21e>
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	4a4f      	ldr	r2, [pc, #316]	; (8001e24 <HAL_GPIO_Init+0x350>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d101      	bne.n	8001cee <HAL_GPIO_Init+0x21a>
 8001cea:	2309      	movs	r3, #9
 8001cec:	e012      	b.n	8001d14 <HAL_GPIO_Init+0x240>
 8001cee:	230a      	movs	r3, #10
 8001cf0:	e010      	b.n	8001d14 <HAL_GPIO_Init+0x240>
 8001cf2:	2308      	movs	r3, #8
 8001cf4:	e00e      	b.n	8001d14 <HAL_GPIO_Init+0x240>
 8001cf6:	2307      	movs	r3, #7
 8001cf8:	e00c      	b.n	8001d14 <HAL_GPIO_Init+0x240>
 8001cfa:	2306      	movs	r3, #6
 8001cfc:	e00a      	b.n	8001d14 <HAL_GPIO_Init+0x240>
 8001cfe:	2305      	movs	r3, #5
 8001d00:	e008      	b.n	8001d14 <HAL_GPIO_Init+0x240>
 8001d02:	2304      	movs	r3, #4
 8001d04:	e006      	b.n	8001d14 <HAL_GPIO_Init+0x240>
 8001d06:	2303      	movs	r3, #3
 8001d08:	e004      	b.n	8001d14 <HAL_GPIO_Init+0x240>
 8001d0a:	2302      	movs	r3, #2
 8001d0c:	e002      	b.n	8001d14 <HAL_GPIO_Init+0x240>
 8001d0e:	2301      	movs	r3, #1
 8001d10:	e000      	b.n	8001d14 <HAL_GPIO_Init+0x240>
 8001d12:	2300      	movs	r3, #0
 8001d14:	69fa      	ldr	r2, [r7, #28]
 8001d16:	f002 0203 	and.w	r2, r2, #3
 8001d1a:	0092      	lsls	r2, r2, #2
 8001d1c:	4093      	lsls	r3, r2
 8001d1e:	69ba      	ldr	r2, [r7, #24]
 8001d20:	4313      	orrs	r3, r2
 8001d22:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d24:	4935      	ldr	r1, [pc, #212]	; (8001dfc <HAL_GPIO_Init+0x328>)
 8001d26:	69fb      	ldr	r3, [r7, #28]
 8001d28:	089b      	lsrs	r3, r3, #2
 8001d2a:	3302      	adds	r3, #2
 8001d2c:	69ba      	ldr	r2, [r7, #24]
 8001d2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d32:	4b3d      	ldr	r3, [pc, #244]	; (8001e28 <HAL_GPIO_Init+0x354>)
 8001d34:	689b      	ldr	r3, [r3, #8]
 8001d36:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d38:	693b      	ldr	r3, [r7, #16]
 8001d3a:	43db      	mvns	r3, r3
 8001d3c:	69ba      	ldr	r2, [r7, #24]
 8001d3e:	4013      	ands	r3, r2
 8001d40:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	685b      	ldr	r3, [r3, #4]
 8001d46:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d003      	beq.n	8001d56 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001d4e:	69ba      	ldr	r2, [r7, #24]
 8001d50:	693b      	ldr	r3, [r7, #16]
 8001d52:	4313      	orrs	r3, r2
 8001d54:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d56:	4a34      	ldr	r2, [pc, #208]	; (8001e28 <HAL_GPIO_Init+0x354>)
 8001d58:	69bb      	ldr	r3, [r7, #24]
 8001d5a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d5c:	4b32      	ldr	r3, [pc, #200]	; (8001e28 <HAL_GPIO_Init+0x354>)
 8001d5e:	68db      	ldr	r3, [r3, #12]
 8001d60:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d62:	693b      	ldr	r3, [r7, #16]
 8001d64:	43db      	mvns	r3, r3
 8001d66:	69ba      	ldr	r2, [r7, #24]
 8001d68:	4013      	ands	r3, r2
 8001d6a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d003      	beq.n	8001d80 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001d78:	69ba      	ldr	r2, [r7, #24]
 8001d7a:	693b      	ldr	r3, [r7, #16]
 8001d7c:	4313      	orrs	r3, r2
 8001d7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d80:	4a29      	ldr	r2, [pc, #164]	; (8001e28 <HAL_GPIO_Init+0x354>)
 8001d82:	69bb      	ldr	r3, [r7, #24]
 8001d84:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001d86:	4b28      	ldr	r3, [pc, #160]	; (8001e28 <HAL_GPIO_Init+0x354>)
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d8c:	693b      	ldr	r3, [r7, #16]
 8001d8e:	43db      	mvns	r3, r3
 8001d90:	69ba      	ldr	r2, [r7, #24]
 8001d92:	4013      	ands	r3, r2
 8001d94:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d003      	beq.n	8001daa <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001da2:	69ba      	ldr	r2, [r7, #24]
 8001da4:	693b      	ldr	r3, [r7, #16]
 8001da6:	4313      	orrs	r3, r2
 8001da8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001daa:	4a1f      	ldr	r2, [pc, #124]	; (8001e28 <HAL_GPIO_Init+0x354>)
 8001dac:	69bb      	ldr	r3, [r7, #24]
 8001dae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001db0:	4b1d      	ldr	r3, [pc, #116]	; (8001e28 <HAL_GPIO_Init+0x354>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001db6:	693b      	ldr	r3, [r7, #16]
 8001db8:	43db      	mvns	r3, r3
 8001dba:	69ba      	ldr	r2, [r7, #24]
 8001dbc:	4013      	ands	r3, r2
 8001dbe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d003      	beq.n	8001dd4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001dcc:	69ba      	ldr	r2, [r7, #24]
 8001dce:	693b      	ldr	r3, [r7, #16]
 8001dd0:	4313      	orrs	r3, r2
 8001dd2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001dd4:	4a14      	ldr	r2, [pc, #80]	; (8001e28 <HAL_GPIO_Init+0x354>)
 8001dd6:	69bb      	ldr	r3, [r7, #24]
 8001dd8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001dda:	69fb      	ldr	r3, [r7, #28]
 8001ddc:	3301      	adds	r3, #1
 8001dde:	61fb      	str	r3, [r7, #28]
 8001de0:	69fb      	ldr	r3, [r7, #28]
 8001de2:	2b0f      	cmp	r3, #15
 8001de4:	f67f ae84 	bls.w	8001af0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001de8:	bf00      	nop
 8001dea:	bf00      	nop
 8001dec:	3724      	adds	r7, #36	; 0x24
 8001dee:	46bd      	mov	sp, r7
 8001df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df4:	4770      	bx	lr
 8001df6:	bf00      	nop
 8001df8:	40023800 	.word	0x40023800
 8001dfc:	40013800 	.word	0x40013800
 8001e00:	40020000 	.word	0x40020000
 8001e04:	40020400 	.word	0x40020400
 8001e08:	40020800 	.word	0x40020800
 8001e0c:	40020c00 	.word	0x40020c00
 8001e10:	40021000 	.word	0x40021000
 8001e14:	40021400 	.word	0x40021400
 8001e18:	40021800 	.word	0x40021800
 8001e1c:	40021c00 	.word	0x40021c00
 8001e20:	40022000 	.word	0x40022000
 8001e24:	40022400 	.word	0x40022400
 8001e28:	40013c00 	.word	0x40013c00

08001e2c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b083      	sub	sp, #12
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
 8001e34:	460b      	mov	r3, r1
 8001e36:	807b      	strh	r3, [r7, #2]
 8001e38:	4613      	mov	r3, r2
 8001e3a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e3c:	787b      	ldrb	r3, [r7, #1]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d003      	beq.n	8001e4a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e42:	887a      	ldrh	r2, [r7, #2]
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001e48:	e003      	b.n	8001e52 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001e4a:	887b      	ldrh	r3, [r7, #2]
 8001e4c:	041a      	lsls	r2, r3, #16
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	619a      	str	r2, [r3, #24]
}
 8001e52:	bf00      	nop
 8001e54:	370c      	adds	r7, #12
 8001e56:	46bd      	mov	sp, r7
 8001e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5c:	4770      	bx	lr

08001e5e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001e5e:	b480      	push	{r7}
 8001e60:	b085      	sub	sp, #20
 8001e62:	af00      	add	r7, sp, #0
 8001e64:	6078      	str	r0, [r7, #4]
 8001e66:	460b      	mov	r3, r1
 8001e68:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	695b      	ldr	r3, [r3, #20]
 8001e6e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001e70:	887a      	ldrh	r2, [r7, #2]
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	4013      	ands	r3, r2
 8001e76:	041a      	lsls	r2, r3, #16
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	43d9      	mvns	r1, r3
 8001e7c:	887b      	ldrh	r3, [r7, #2]
 8001e7e:	400b      	ands	r3, r1
 8001e80:	431a      	orrs	r2, r3
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	619a      	str	r2, [r3, #24]
}
 8001e86:	bf00      	nop
 8001e88:	3714      	adds	r7, #20
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e90:	4770      	bx	lr
	...

08001e94 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b084      	sub	sp, #16
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d101      	bne.n	8001ea6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	e12b      	b.n	80020fe <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001eac:	b2db      	uxtb	r3, r3
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d106      	bne.n	8001ec0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001eba:	6878      	ldr	r0, [r7, #4]
 8001ebc:	f7fe fdea 	bl	8000a94 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2224      	movs	r2, #36	; 0x24
 8001ec4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	681a      	ldr	r2, [r3, #0]
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f022 0201 	bic.w	r2, r2, #1
 8001ed6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	681a      	ldr	r2, [r3, #0]
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001ee6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	681a      	ldr	r2, [r3, #0]
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001ef6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001ef8:	f001 fc4c 	bl	8003794 <HAL_RCC_GetPCLK1Freq>
 8001efc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	4a81      	ldr	r2, [pc, #516]	; (8002108 <HAL_I2C_Init+0x274>)
 8001f04:	4293      	cmp	r3, r2
 8001f06:	d807      	bhi.n	8001f18 <HAL_I2C_Init+0x84>
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	4a80      	ldr	r2, [pc, #512]	; (800210c <HAL_I2C_Init+0x278>)
 8001f0c:	4293      	cmp	r3, r2
 8001f0e:	bf94      	ite	ls
 8001f10:	2301      	movls	r3, #1
 8001f12:	2300      	movhi	r3, #0
 8001f14:	b2db      	uxtb	r3, r3
 8001f16:	e006      	b.n	8001f26 <HAL_I2C_Init+0x92>
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	4a7d      	ldr	r2, [pc, #500]	; (8002110 <HAL_I2C_Init+0x27c>)
 8001f1c:	4293      	cmp	r3, r2
 8001f1e:	bf94      	ite	ls
 8001f20:	2301      	movls	r3, #1
 8001f22:	2300      	movhi	r3, #0
 8001f24:	b2db      	uxtb	r3, r3
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d001      	beq.n	8001f2e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	e0e7      	b.n	80020fe <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	4a78      	ldr	r2, [pc, #480]	; (8002114 <HAL_I2C_Init+0x280>)
 8001f32:	fba2 2303 	umull	r2, r3, r2, r3
 8001f36:	0c9b      	lsrs	r3, r3, #18
 8001f38:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	68ba      	ldr	r2, [r7, #8]
 8001f4a:	430a      	orrs	r2, r1
 8001f4c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	6a1b      	ldr	r3, [r3, #32]
 8001f54:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	4a6a      	ldr	r2, [pc, #424]	; (8002108 <HAL_I2C_Init+0x274>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d802      	bhi.n	8001f68 <HAL_I2C_Init+0xd4>
 8001f62:	68bb      	ldr	r3, [r7, #8]
 8001f64:	3301      	adds	r3, #1
 8001f66:	e009      	b.n	8001f7c <HAL_I2C_Init+0xe8>
 8001f68:	68bb      	ldr	r3, [r7, #8]
 8001f6a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001f6e:	fb02 f303 	mul.w	r3, r2, r3
 8001f72:	4a69      	ldr	r2, [pc, #420]	; (8002118 <HAL_I2C_Init+0x284>)
 8001f74:	fba2 2303 	umull	r2, r3, r2, r3
 8001f78:	099b      	lsrs	r3, r3, #6
 8001f7a:	3301      	adds	r3, #1
 8001f7c:	687a      	ldr	r2, [r7, #4]
 8001f7e:	6812      	ldr	r2, [r2, #0]
 8001f80:	430b      	orrs	r3, r1
 8001f82:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	69db      	ldr	r3, [r3, #28]
 8001f8a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001f8e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	495c      	ldr	r1, [pc, #368]	; (8002108 <HAL_I2C_Init+0x274>)
 8001f98:	428b      	cmp	r3, r1
 8001f9a:	d819      	bhi.n	8001fd0 <HAL_I2C_Init+0x13c>
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	1e59      	subs	r1, r3, #1
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	005b      	lsls	r3, r3, #1
 8001fa6:	fbb1 f3f3 	udiv	r3, r1, r3
 8001faa:	1c59      	adds	r1, r3, #1
 8001fac:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001fb0:	400b      	ands	r3, r1
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d00a      	beq.n	8001fcc <HAL_I2C_Init+0x138>
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	1e59      	subs	r1, r3, #1
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	005b      	lsls	r3, r3, #1
 8001fc0:	fbb1 f3f3 	udiv	r3, r1, r3
 8001fc4:	3301      	adds	r3, #1
 8001fc6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001fca:	e051      	b.n	8002070 <HAL_I2C_Init+0x1dc>
 8001fcc:	2304      	movs	r3, #4
 8001fce:	e04f      	b.n	8002070 <HAL_I2C_Init+0x1dc>
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	689b      	ldr	r3, [r3, #8]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d111      	bne.n	8001ffc <HAL_I2C_Init+0x168>
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	1e58      	subs	r0, r3, #1
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6859      	ldr	r1, [r3, #4]
 8001fe0:	460b      	mov	r3, r1
 8001fe2:	005b      	lsls	r3, r3, #1
 8001fe4:	440b      	add	r3, r1
 8001fe6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001fea:	3301      	adds	r3, #1
 8001fec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	bf0c      	ite	eq
 8001ff4:	2301      	moveq	r3, #1
 8001ff6:	2300      	movne	r3, #0
 8001ff8:	b2db      	uxtb	r3, r3
 8001ffa:	e012      	b.n	8002022 <HAL_I2C_Init+0x18e>
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	1e58      	subs	r0, r3, #1
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6859      	ldr	r1, [r3, #4]
 8002004:	460b      	mov	r3, r1
 8002006:	009b      	lsls	r3, r3, #2
 8002008:	440b      	add	r3, r1
 800200a:	0099      	lsls	r1, r3, #2
 800200c:	440b      	add	r3, r1
 800200e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002012:	3301      	adds	r3, #1
 8002014:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002018:	2b00      	cmp	r3, #0
 800201a:	bf0c      	ite	eq
 800201c:	2301      	moveq	r3, #1
 800201e:	2300      	movne	r3, #0
 8002020:	b2db      	uxtb	r3, r3
 8002022:	2b00      	cmp	r3, #0
 8002024:	d001      	beq.n	800202a <HAL_I2C_Init+0x196>
 8002026:	2301      	movs	r3, #1
 8002028:	e022      	b.n	8002070 <HAL_I2C_Init+0x1dc>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	689b      	ldr	r3, [r3, #8]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d10e      	bne.n	8002050 <HAL_I2C_Init+0x1bc>
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	1e58      	subs	r0, r3, #1
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6859      	ldr	r1, [r3, #4]
 800203a:	460b      	mov	r3, r1
 800203c:	005b      	lsls	r3, r3, #1
 800203e:	440b      	add	r3, r1
 8002040:	fbb0 f3f3 	udiv	r3, r0, r3
 8002044:	3301      	adds	r3, #1
 8002046:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800204a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800204e:	e00f      	b.n	8002070 <HAL_I2C_Init+0x1dc>
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	1e58      	subs	r0, r3, #1
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6859      	ldr	r1, [r3, #4]
 8002058:	460b      	mov	r3, r1
 800205a:	009b      	lsls	r3, r3, #2
 800205c:	440b      	add	r3, r1
 800205e:	0099      	lsls	r1, r3, #2
 8002060:	440b      	add	r3, r1
 8002062:	fbb0 f3f3 	udiv	r3, r0, r3
 8002066:	3301      	adds	r3, #1
 8002068:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800206c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002070:	6879      	ldr	r1, [r7, #4]
 8002072:	6809      	ldr	r1, [r1, #0]
 8002074:	4313      	orrs	r3, r2
 8002076:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	69da      	ldr	r2, [r3, #28]
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6a1b      	ldr	r3, [r3, #32]
 800208a:	431a      	orrs	r2, r3
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	430a      	orrs	r2, r1
 8002092:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	689b      	ldr	r3, [r3, #8]
 800209a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800209e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80020a2:	687a      	ldr	r2, [r7, #4]
 80020a4:	6911      	ldr	r1, [r2, #16]
 80020a6:	687a      	ldr	r2, [r7, #4]
 80020a8:	68d2      	ldr	r2, [r2, #12]
 80020aa:	4311      	orrs	r1, r2
 80020ac:	687a      	ldr	r2, [r7, #4]
 80020ae:	6812      	ldr	r2, [r2, #0]
 80020b0:	430b      	orrs	r3, r1
 80020b2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	68db      	ldr	r3, [r3, #12]
 80020ba:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	695a      	ldr	r2, [r3, #20]
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	699b      	ldr	r3, [r3, #24]
 80020c6:	431a      	orrs	r2, r3
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	430a      	orrs	r2, r1
 80020ce:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	681a      	ldr	r2, [r3, #0]
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f042 0201 	orr.w	r2, r2, #1
 80020de:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2200      	movs	r2, #0
 80020e4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	2220      	movs	r2, #32
 80020ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2200      	movs	r2, #0
 80020f2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2200      	movs	r2, #0
 80020f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80020fc:	2300      	movs	r3, #0
}
 80020fe:	4618      	mov	r0, r3
 8002100:	3710      	adds	r7, #16
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}
 8002106:	bf00      	nop
 8002108:	000186a0 	.word	0x000186a0
 800210c:	001e847f 	.word	0x001e847f
 8002110:	003d08ff 	.word	0x003d08ff
 8002114:	431bde83 	.word	0x431bde83
 8002118:	10624dd3 	.word	0x10624dd3

0800211c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b088      	sub	sp, #32
 8002120:	af02      	add	r7, sp, #8
 8002122:	60f8      	str	r0, [r7, #12]
 8002124:	607a      	str	r2, [r7, #4]
 8002126:	461a      	mov	r2, r3
 8002128:	460b      	mov	r3, r1
 800212a:	817b      	strh	r3, [r7, #10]
 800212c:	4613      	mov	r3, r2
 800212e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002130:	f7ff fbba 	bl	80018a8 <HAL_GetTick>
 8002134:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800213c:	b2db      	uxtb	r3, r3
 800213e:	2b20      	cmp	r3, #32
 8002140:	f040 80e0 	bne.w	8002304 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002144:	697b      	ldr	r3, [r7, #20]
 8002146:	9300      	str	r3, [sp, #0]
 8002148:	2319      	movs	r3, #25
 800214a:	2201      	movs	r2, #1
 800214c:	4970      	ldr	r1, [pc, #448]	; (8002310 <HAL_I2C_Master_Transmit+0x1f4>)
 800214e:	68f8      	ldr	r0, [r7, #12]
 8002150:	f000 fc58 	bl	8002a04 <I2C_WaitOnFlagUntilTimeout>
 8002154:	4603      	mov	r3, r0
 8002156:	2b00      	cmp	r3, #0
 8002158:	d001      	beq.n	800215e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800215a:	2302      	movs	r3, #2
 800215c:	e0d3      	b.n	8002306 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002164:	2b01      	cmp	r3, #1
 8002166:	d101      	bne.n	800216c <HAL_I2C_Master_Transmit+0x50>
 8002168:	2302      	movs	r3, #2
 800216a:	e0cc      	b.n	8002306 <HAL_I2C_Master_Transmit+0x1ea>
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	2201      	movs	r2, #1
 8002170:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f003 0301 	and.w	r3, r3, #1
 800217e:	2b01      	cmp	r3, #1
 8002180:	d007      	beq.n	8002192 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	681a      	ldr	r2, [r3, #0]
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f042 0201 	orr.w	r2, r2, #1
 8002190:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	681a      	ldr	r2, [r3, #0]
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80021a0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	2221      	movs	r2, #33	; 0x21
 80021a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	2210      	movs	r2, #16
 80021ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	2200      	movs	r2, #0
 80021b6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	687a      	ldr	r2, [r7, #4]
 80021bc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	893a      	ldrh	r2, [r7, #8]
 80021c2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021c8:	b29a      	uxth	r2, r3
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	4a50      	ldr	r2, [pc, #320]	; (8002314 <HAL_I2C_Master_Transmit+0x1f8>)
 80021d2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80021d4:	8979      	ldrh	r1, [r7, #10]
 80021d6:	697b      	ldr	r3, [r7, #20]
 80021d8:	6a3a      	ldr	r2, [r7, #32]
 80021da:	68f8      	ldr	r0, [r7, #12]
 80021dc:	f000 fac2 	bl	8002764 <I2C_MasterRequestWrite>
 80021e0:	4603      	mov	r3, r0
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d001      	beq.n	80021ea <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80021e6:	2301      	movs	r3, #1
 80021e8:	e08d      	b.n	8002306 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80021ea:	2300      	movs	r3, #0
 80021ec:	613b      	str	r3, [r7, #16]
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	695b      	ldr	r3, [r3, #20]
 80021f4:	613b      	str	r3, [r7, #16]
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	699b      	ldr	r3, [r3, #24]
 80021fc:	613b      	str	r3, [r7, #16]
 80021fe:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002200:	e066      	b.n	80022d0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002202:	697a      	ldr	r2, [r7, #20]
 8002204:	6a39      	ldr	r1, [r7, #32]
 8002206:	68f8      	ldr	r0, [r7, #12]
 8002208:	f000 fcd2 	bl	8002bb0 <I2C_WaitOnTXEFlagUntilTimeout>
 800220c:	4603      	mov	r3, r0
 800220e:	2b00      	cmp	r3, #0
 8002210:	d00d      	beq.n	800222e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002216:	2b04      	cmp	r3, #4
 8002218:	d107      	bne.n	800222a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	681a      	ldr	r2, [r3, #0]
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002228:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800222a:	2301      	movs	r3, #1
 800222c:	e06b      	b.n	8002306 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002232:	781a      	ldrb	r2, [r3, #0]
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800223e:	1c5a      	adds	r2, r3, #1
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002248:	b29b      	uxth	r3, r3
 800224a:	3b01      	subs	r3, #1
 800224c:	b29a      	uxth	r2, r3
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002256:	3b01      	subs	r3, #1
 8002258:	b29a      	uxth	r2, r3
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	695b      	ldr	r3, [r3, #20]
 8002264:	f003 0304 	and.w	r3, r3, #4
 8002268:	2b04      	cmp	r3, #4
 800226a:	d11b      	bne.n	80022a4 <HAL_I2C_Master_Transmit+0x188>
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002270:	2b00      	cmp	r3, #0
 8002272:	d017      	beq.n	80022a4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002278:	781a      	ldrb	r2, [r3, #0]
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002284:	1c5a      	adds	r2, r3, #1
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800228e:	b29b      	uxth	r3, r3
 8002290:	3b01      	subs	r3, #1
 8002292:	b29a      	uxth	r2, r3
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800229c:	3b01      	subs	r3, #1
 800229e:	b29a      	uxth	r2, r3
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80022a4:	697a      	ldr	r2, [r7, #20]
 80022a6:	6a39      	ldr	r1, [r7, #32]
 80022a8:	68f8      	ldr	r0, [r7, #12]
 80022aa:	f000 fcc2 	bl	8002c32 <I2C_WaitOnBTFFlagUntilTimeout>
 80022ae:	4603      	mov	r3, r0
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d00d      	beq.n	80022d0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022b8:	2b04      	cmp	r3, #4
 80022ba:	d107      	bne.n	80022cc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	681a      	ldr	r2, [r3, #0]
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022ca:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80022cc:	2301      	movs	r3, #1
 80022ce:	e01a      	b.n	8002306 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d194      	bne.n	8002202 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	681a      	ldr	r2, [r3, #0]
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022e6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	2220      	movs	r2, #32
 80022ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	2200      	movs	r2, #0
 80022f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	2200      	movs	r2, #0
 80022fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002300:	2300      	movs	r3, #0
 8002302:	e000      	b.n	8002306 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002304:	2302      	movs	r3, #2
  }
}
 8002306:	4618      	mov	r0, r3
 8002308:	3718      	adds	r7, #24
 800230a:	46bd      	mov	sp, r7
 800230c:	bd80      	pop	{r7, pc}
 800230e:	bf00      	nop
 8002310:	00100002 	.word	0x00100002
 8002314:	ffff0000 	.word	0xffff0000

08002318 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b08c      	sub	sp, #48	; 0x30
 800231c:	af02      	add	r7, sp, #8
 800231e:	60f8      	str	r0, [r7, #12]
 8002320:	607a      	str	r2, [r7, #4]
 8002322:	461a      	mov	r2, r3
 8002324:	460b      	mov	r3, r1
 8002326:	817b      	strh	r3, [r7, #10]
 8002328:	4613      	mov	r3, r2
 800232a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800232c:	f7ff fabc 	bl	80018a8 <HAL_GetTick>
 8002330:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002338:	b2db      	uxtb	r3, r3
 800233a:	2b20      	cmp	r3, #32
 800233c:	f040 820b 	bne.w	8002756 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002342:	9300      	str	r3, [sp, #0]
 8002344:	2319      	movs	r3, #25
 8002346:	2201      	movs	r2, #1
 8002348:	497c      	ldr	r1, [pc, #496]	; (800253c <HAL_I2C_Master_Receive+0x224>)
 800234a:	68f8      	ldr	r0, [r7, #12]
 800234c:	f000 fb5a 	bl	8002a04 <I2C_WaitOnFlagUntilTimeout>
 8002350:	4603      	mov	r3, r0
 8002352:	2b00      	cmp	r3, #0
 8002354:	d001      	beq.n	800235a <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8002356:	2302      	movs	r3, #2
 8002358:	e1fe      	b.n	8002758 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002360:	2b01      	cmp	r3, #1
 8002362:	d101      	bne.n	8002368 <HAL_I2C_Master_Receive+0x50>
 8002364:	2302      	movs	r3, #2
 8002366:	e1f7      	b.n	8002758 <HAL_I2C_Master_Receive+0x440>
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	2201      	movs	r2, #1
 800236c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f003 0301 	and.w	r3, r3, #1
 800237a:	2b01      	cmp	r3, #1
 800237c:	d007      	beq.n	800238e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	681a      	ldr	r2, [r3, #0]
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f042 0201 	orr.w	r2, r2, #1
 800238c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	681a      	ldr	r2, [r3, #0]
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800239c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	2222      	movs	r2, #34	; 0x22
 80023a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	2210      	movs	r2, #16
 80023aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	2200      	movs	r2, #0
 80023b2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	687a      	ldr	r2, [r7, #4]
 80023b8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	893a      	ldrh	r2, [r7, #8]
 80023be:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023c4:	b29a      	uxth	r2, r3
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	4a5c      	ldr	r2, [pc, #368]	; (8002540 <HAL_I2C_Master_Receive+0x228>)
 80023ce:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80023d0:	8979      	ldrh	r1, [r7, #10]
 80023d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80023d6:	68f8      	ldr	r0, [r7, #12]
 80023d8:	f000 fa46 	bl	8002868 <I2C_MasterRequestRead>
 80023dc:	4603      	mov	r3, r0
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d001      	beq.n	80023e6 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80023e2:	2301      	movs	r3, #1
 80023e4:	e1b8      	b.n	8002758 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d113      	bne.n	8002416 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80023ee:	2300      	movs	r3, #0
 80023f0:	623b      	str	r3, [r7, #32]
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	695b      	ldr	r3, [r3, #20]
 80023f8:	623b      	str	r3, [r7, #32]
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	699b      	ldr	r3, [r3, #24]
 8002400:	623b      	str	r3, [r7, #32]
 8002402:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	681a      	ldr	r2, [r3, #0]
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002412:	601a      	str	r2, [r3, #0]
 8002414:	e18c      	b.n	8002730 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800241a:	2b01      	cmp	r3, #1
 800241c:	d11b      	bne.n	8002456 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	681a      	ldr	r2, [r3, #0]
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800242c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800242e:	2300      	movs	r3, #0
 8002430:	61fb      	str	r3, [r7, #28]
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	695b      	ldr	r3, [r3, #20]
 8002438:	61fb      	str	r3, [r7, #28]
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	699b      	ldr	r3, [r3, #24]
 8002440:	61fb      	str	r3, [r7, #28]
 8002442:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	681a      	ldr	r2, [r3, #0]
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002452:	601a      	str	r2, [r3, #0]
 8002454:	e16c      	b.n	8002730 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800245a:	2b02      	cmp	r3, #2
 800245c:	d11b      	bne.n	8002496 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	681a      	ldr	r2, [r3, #0]
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800246c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	681a      	ldr	r2, [r3, #0]
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800247c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800247e:	2300      	movs	r3, #0
 8002480:	61bb      	str	r3, [r7, #24]
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	695b      	ldr	r3, [r3, #20]
 8002488:	61bb      	str	r3, [r7, #24]
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	699b      	ldr	r3, [r3, #24]
 8002490:	61bb      	str	r3, [r7, #24]
 8002492:	69bb      	ldr	r3, [r7, #24]
 8002494:	e14c      	b.n	8002730 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	681a      	ldr	r2, [r3, #0]
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80024a4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80024a6:	2300      	movs	r3, #0
 80024a8:	617b      	str	r3, [r7, #20]
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	695b      	ldr	r3, [r3, #20]
 80024b0:	617b      	str	r3, [r7, #20]
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	699b      	ldr	r3, [r3, #24]
 80024b8:	617b      	str	r3, [r7, #20]
 80024ba:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80024bc:	e138      	b.n	8002730 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024c2:	2b03      	cmp	r3, #3
 80024c4:	f200 80f1 	bhi.w	80026aa <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024cc:	2b01      	cmp	r3, #1
 80024ce:	d123      	bne.n	8002518 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024d2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80024d4:	68f8      	ldr	r0, [r7, #12]
 80024d6:	f000 fbed 	bl	8002cb4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80024da:	4603      	mov	r3, r0
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d001      	beq.n	80024e4 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80024e0:	2301      	movs	r3, #1
 80024e2:	e139      	b.n	8002758 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	691a      	ldr	r2, [r3, #16]
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ee:	b2d2      	uxtb	r2, r2
 80024f0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024f6:	1c5a      	adds	r2, r3, #1
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002500:	3b01      	subs	r3, #1
 8002502:	b29a      	uxth	r2, r3
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800250c:	b29b      	uxth	r3, r3
 800250e:	3b01      	subs	r3, #1
 8002510:	b29a      	uxth	r2, r3
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002516:	e10b      	b.n	8002730 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800251c:	2b02      	cmp	r3, #2
 800251e:	d14e      	bne.n	80025be <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002522:	9300      	str	r3, [sp, #0]
 8002524:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002526:	2200      	movs	r2, #0
 8002528:	4906      	ldr	r1, [pc, #24]	; (8002544 <HAL_I2C_Master_Receive+0x22c>)
 800252a:	68f8      	ldr	r0, [r7, #12]
 800252c:	f000 fa6a 	bl	8002a04 <I2C_WaitOnFlagUntilTimeout>
 8002530:	4603      	mov	r3, r0
 8002532:	2b00      	cmp	r3, #0
 8002534:	d008      	beq.n	8002548 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8002536:	2301      	movs	r3, #1
 8002538:	e10e      	b.n	8002758 <HAL_I2C_Master_Receive+0x440>
 800253a:	bf00      	nop
 800253c:	00100002 	.word	0x00100002
 8002540:	ffff0000 	.word	0xffff0000
 8002544:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	681a      	ldr	r2, [r3, #0]
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002556:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	691a      	ldr	r2, [r3, #16]
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002562:	b2d2      	uxtb	r2, r2
 8002564:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800256a:	1c5a      	adds	r2, r3, #1
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002574:	3b01      	subs	r3, #1
 8002576:	b29a      	uxth	r2, r3
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002580:	b29b      	uxth	r3, r3
 8002582:	3b01      	subs	r3, #1
 8002584:	b29a      	uxth	r2, r3
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	691a      	ldr	r2, [r3, #16]
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002594:	b2d2      	uxtb	r2, r2
 8002596:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800259c:	1c5a      	adds	r2, r3, #1
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025a6:	3b01      	subs	r3, #1
 80025a8:	b29a      	uxth	r2, r3
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025b2:	b29b      	uxth	r3, r3
 80025b4:	3b01      	subs	r3, #1
 80025b6:	b29a      	uxth	r2, r3
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	855a      	strh	r2, [r3, #42]	; 0x2a
 80025bc:	e0b8      	b.n	8002730 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80025be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c0:	9300      	str	r3, [sp, #0]
 80025c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025c4:	2200      	movs	r2, #0
 80025c6:	4966      	ldr	r1, [pc, #408]	; (8002760 <HAL_I2C_Master_Receive+0x448>)
 80025c8:	68f8      	ldr	r0, [r7, #12]
 80025ca:	f000 fa1b 	bl	8002a04 <I2C_WaitOnFlagUntilTimeout>
 80025ce:	4603      	mov	r3, r0
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d001      	beq.n	80025d8 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80025d4:	2301      	movs	r3, #1
 80025d6:	e0bf      	b.n	8002758 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	681a      	ldr	r2, [r3, #0]
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80025e6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	691a      	ldr	r2, [r3, #16]
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025f2:	b2d2      	uxtb	r2, r2
 80025f4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025fa:	1c5a      	adds	r2, r3, #1
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002604:	3b01      	subs	r3, #1
 8002606:	b29a      	uxth	r2, r3
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002610:	b29b      	uxth	r3, r3
 8002612:	3b01      	subs	r3, #1
 8002614:	b29a      	uxth	r2, r3
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800261a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800261c:	9300      	str	r3, [sp, #0]
 800261e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002620:	2200      	movs	r2, #0
 8002622:	494f      	ldr	r1, [pc, #316]	; (8002760 <HAL_I2C_Master_Receive+0x448>)
 8002624:	68f8      	ldr	r0, [r7, #12]
 8002626:	f000 f9ed 	bl	8002a04 <I2C_WaitOnFlagUntilTimeout>
 800262a:	4603      	mov	r3, r0
 800262c:	2b00      	cmp	r3, #0
 800262e:	d001      	beq.n	8002634 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8002630:	2301      	movs	r3, #1
 8002632:	e091      	b.n	8002758 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	681a      	ldr	r2, [r3, #0]
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002642:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	691a      	ldr	r2, [r3, #16]
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800264e:	b2d2      	uxtb	r2, r2
 8002650:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002656:	1c5a      	adds	r2, r3, #1
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002660:	3b01      	subs	r3, #1
 8002662:	b29a      	uxth	r2, r3
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800266c:	b29b      	uxth	r3, r3
 800266e:	3b01      	subs	r3, #1
 8002670:	b29a      	uxth	r2, r3
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	691a      	ldr	r2, [r3, #16]
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002680:	b2d2      	uxtb	r2, r2
 8002682:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002688:	1c5a      	adds	r2, r3, #1
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002692:	3b01      	subs	r3, #1
 8002694:	b29a      	uxth	r2, r3
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800269e:	b29b      	uxth	r3, r3
 80026a0:	3b01      	subs	r3, #1
 80026a2:	b29a      	uxth	r2, r3
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80026a8:	e042      	b.n	8002730 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80026aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026ac:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80026ae:	68f8      	ldr	r0, [r7, #12]
 80026b0:	f000 fb00 	bl	8002cb4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80026b4:	4603      	mov	r3, r0
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d001      	beq.n	80026be <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80026ba:	2301      	movs	r3, #1
 80026bc:	e04c      	b.n	8002758 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	691a      	ldr	r2, [r3, #16]
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026c8:	b2d2      	uxtb	r2, r2
 80026ca:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026d0:	1c5a      	adds	r2, r3, #1
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026da:	3b01      	subs	r3, #1
 80026dc:	b29a      	uxth	r2, r3
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026e6:	b29b      	uxth	r3, r3
 80026e8:	3b01      	subs	r3, #1
 80026ea:	b29a      	uxth	r2, r3
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	695b      	ldr	r3, [r3, #20]
 80026f6:	f003 0304 	and.w	r3, r3, #4
 80026fa:	2b04      	cmp	r3, #4
 80026fc:	d118      	bne.n	8002730 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	691a      	ldr	r2, [r3, #16]
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002708:	b2d2      	uxtb	r2, r2
 800270a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002710:	1c5a      	adds	r2, r3, #1
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800271a:	3b01      	subs	r3, #1
 800271c:	b29a      	uxth	r2, r3
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002726:	b29b      	uxth	r3, r3
 8002728:	3b01      	subs	r3, #1
 800272a:	b29a      	uxth	r2, r3
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002734:	2b00      	cmp	r3, #0
 8002736:	f47f aec2 	bne.w	80024be <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	2220      	movs	r2, #32
 800273e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	2200      	movs	r2, #0
 8002746:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	2200      	movs	r2, #0
 800274e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002752:	2300      	movs	r3, #0
 8002754:	e000      	b.n	8002758 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002756:	2302      	movs	r3, #2
  }
}
 8002758:	4618      	mov	r0, r3
 800275a:	3728      	adds	r7, #40	; 0x28
 800275c:	46bd      	mov	sp, r7
 800275e:	bd80      	pop	{r7, pc}
 8002760:	00010004 	.word	0x00010004

08002764 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b088      	sub	sp, #32
 8002768:	af02      	add	r7, sp, #8
 800276a:	60f8      	str	r0, [r7, #12]
 800276c:	607a      	str	r2, [r7, #4]
 800276e:	603b      	str	r3, [r7, #0]
 8002770:	460b      	mov	r3, r1
 8002772:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002778:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800277a:	697b      	ldr	r3, [r7, #20]
 800277c:	2b08      	cmp	r3, #8
 800277e:	d006      	beq.n	800278e <I2C_MasterRequestWrite+0x2a>
 8002780:	697b      	ldr	r3, [r7, #20]
 8002782:	2b01      	cmp	r3, #1
 8002784:	d003      	beq.n	800278e <I2C_MasterRequestWrite+0x2a>
 8002786:	697b      	ldr	r3, [r7, #20]
 8002788:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800278c:	d108      	bne.n	80027a0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	681a      	ldr	r2, [r3, #0]
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800279c:	601a      	str	r2, [r3, #0]
 800279e:	e00b      	b.n	80027b8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027a4:	2b12      	cmp	r3, #18
 80027a6:	d107      	bne.n	80027b8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	681a      	ldr	r2, [r3, #0]
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80027b6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	9300      	str	r3, [sp, #0]
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2200      	movs	r2, #0
 80027c0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80027c4:	68f8      	ldr	r0, [r7, #12]
 80027c6:	f000 f91d 	bl	8002a04 <I2C_WaitOnFlagUntilTimeout>
 80027ca:	4603      	mov	r3, r0
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d00d      	beq.n	80027ec <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80027de:	d103      	bne.n	80027e8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80027e6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80027e8:	2303      	movs	r3, #3
 80027ea:	e035      	b.n	8002858 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	691b      	ldr	r3, [r3, #16]
 80027f0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80027f4:	d108      	bne.n	8002808 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80027f6:	897b      	ldrh	r3, [r7, #10]
 80027f8:	b2db      	uxtb	r3, r3
 80027fa:	461a      	mov	r2, r3
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002804:	611a      	str	r2, [r3, #16]
 8002806:	e01b      	b.n	8002840 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002808:	897b      	ldrh	r3, [r7, #10]
 800280a:	11db      	asrs	r3, r3, #7
 800280c:	b2db      	uxtb	r3, r3
 800280e:	f003 0306 	and.w	r3, r3, #6
 8002812:	b2db      	uxtb	r3, r3
 8002814:	f063 030f 	orn	r3, r3, #15
 8002818:	b2da      	uxtb	r2, r3
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	687a      	ldr	r2, [r7, #4]
 8002824:	490e      	ldr	r1, [pc, #56]	; (8002860 <I2C_MasterRequestWrite+0xfc>)
 8002826:	68f8      	ldr	r0, [r7, #12]
 8002828:	f000 f943 	bl	8002ab2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800282c:	4603      	mov	r3, r0
 800282e:	2b00      	cmp	r3, #0
 8002830:	d001      	beq.n	8002836 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002832:	2301      	movs	r3, #1
 8002834:	e010      	b.n	8002858 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002836:	897b      	ldrh	r3, [r7, #10]
 8002838:	b2da      	uxtb	r2, r3
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	687a      	ldr	r2, [r7, #4]
 8002844:	4907      	ldr	r1, [pc, #28]	; (8002864 <I2C_MasterRequestWrite+0x100>)
 8002846:	68f8      	ldr	r0, [r7, #12]
 8002848:	f000 f933 	bl	8002ab2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800284c:	4603      	mov	r3, r0
 800284e:	2b00      	cmp	r3, #0
 8002850:	d001      	beq.n	8002856 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002852:	2301      	movs	r3, #1
 8002854:	e000      	b.n	8002858 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002856:	2300      	movs	r3, #0
}
 8002858:	4618      	mov	r0, r3
 800285a:	3718      	adds	r7, #24
 800285c:	46bd      	mov	sp, r7
 800285e:	bd80      	pop	{r7, pc}
 8002860:	00010008 	.word	0x00010008
 8002864:	00010002 	.word	0x00010002

08002868 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b088      	sub	sp, #32
 800286c:	af02      	add	r7, sp, #8
 800286e:	60f8      	str	r0, [r7, #12]
 8002870:	607a      	str	r2, [r7, #4]
 8002872:	603b      	str	r3, [r7, #0]
 8002874:	460b      	mov	r3, r1
 8002876:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800287c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	681a      	ldr	r2, [r3, #0]
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800288c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800288e:	697b      	ldr	r3, [r7, #20]
 8002890:	2b08      	cmp	r3, #8
 8002892:	d006      	beq.n	80028a2 <I2C_MasterRequestRead+0x3a>
 8002894:	697b      	ldr	r3, [r7, #20]
 8002896:	2b01      	cmp	r3, #1
 8002898:	d003      	beq.n	80028a2 <I2C_MasterRequestRead+0x3a>
 800289a:	697b      	ldr	r3, [r7, #20]
 800289c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80028a0:	d108      	bne.n	80028b4 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	681a      	ldr	r2, [r3, #0]
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80028b0:	601a      	str	r2, [r3, #0]
 80028b2:	e00b      	b.n	80028cc <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028b8:	2b11      	cmp	r3, #17
 80028ba:	d107      	bne.n	80028cc <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	681a      	ldr	r2, [r3, #0]
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80028ca:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	9300      	str	r3, [sp, #0]
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2200      	movs	r2, #0
 80028d4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80028d8:	68f8      	ldr	r0, [r7, #12]
 80028da:	f000 f893 	bl	8002a04 <I2C_WaitOnFlagUntilTimeout>
 80028de:	4603      	mov	r3, r0
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d00d      	beq.n	8002900 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80028f2:	d103      	bne.n	80028fc <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80028fa:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80028fc:	2303      	movs	r3, #3
 80028fe:	e079      	b.n	80029f4 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	691b      	ldr	r3, [r3, #16]
 8002904:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002908:	d108      	bne.n	800291c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800290a:	897b      	ldrh	r3, [r7, #10]
 800290c:	b2db      	uxtb	r3, r3
 800290e:	f043 0301 	orr.w	r3, r3, #1
 8002912:	b2da      	uxtb	r2, r3
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	611a      	str	r2, [r3, #16]
 800291a:	e05f      	b.n	80029dc <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800291c:	897b      	ldrh	r3, [r7, #10]
 800291e:	11db      	asrs	r3, r3, #7
 8002920:	b2db      	uxtb	r3, r3
 8002922:	f003 0306 	and.w	r3, r3, #6
 8002926:	b2db      	uxtb	r3, r3
 8002928:	f063 030f 	orn	r3, r3, #15
 800292c:	b2da      	uxtb	r2, r3
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	687a      	ldr	r2, [r7, #4]
 8002938:	4930      	ldr	r1, [pc, #192]	; (80029fc <I2C_MasterRequestRead+0x194>)
 800293a:	68f8      	ldr	r0, [r7, #12]
 800293c:	f000 f8b9 	bl	8002ab2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002940:	4603      	mov	r3, r0
 8002942:	2b00      	cmp	r3, #0
 8002944:	d001      	beq.n	800294a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8002946:	2301      	movs	r3, #1
 8002948:	e054      	b.n	80029f4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800294a:	897b      	ldrh	r3, [r7, #10]
 800294c:	b2da      	uxtb	r2, r3
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	687a      	ldr	r2, [r7, #4]
 8002958:	4929      	ldr	r1, [pc, #164]	; (8002a00 <I2C_MasterRequestRead+0x198>)
 800295a:	68f8      	ldr	r0, [r7, #12]
 800295c:	f000 f8a9 	bl	8002ab2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002960:	4603      	mov	r3, r0
 8002962:	2b00      	cmp	r3, #0
 8002964:	d001      	beq.n	800296a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8002966:	2301      	movs	r3, #1
 8002968:	e044      	b.n	80029f4 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800296a:	2300      	movs	r3, #0
 800296c:	613b      	str	r3, [r7, #16]
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	695b      	ldr	r3, [r3, #20]
 8002974:	613b      	str	r3, [r7, #16]
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	699b      	ldr	r3, [r3, #24]
 800297c:	613b      	str	r3, [r7, #16]
 800297e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	681a      	ldr	r2, [r3, #0]
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800298e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	9300      	str	r3, [sp, #0]
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2200      	movs	r2, #0
 8002998:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800299c:	68f8      	ldr	r0, [r7, #12]
 800299e:	f000 f831 	bl	8002a04 <I2C_WaitOnFlagUntilTimeout>
 80029a2:	4603      	mov	r3, r0
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d00d      	beq.n	80029c4 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80029b6:	d103      	bne.n	80029c0 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80029be:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80029c0:	2303      	movs	r3, #3
 80029c2:	e017      	b.n	80029f4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80029c4:	897b      	ldrh	r3, [r7, #10]
 80029c6:	11db      	asrs	r3, r3, #7
 80029c8:	b2db      	uxtb	r3, r3
 80029ca:	f003 0306 	and.w	r3, r3, #6
 80029ce:	b2db      	uxtb	r3, r3
 80029d0:	f063 030e 	orn	r3, r3, #14
 80029d4:	b2da      	uxtb	r2, r3
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	687a      	ldr	r2, [r7, #4]
 80029e0:	4907      	ldr	r1, [pc, #28]	; (8002a00 <I2C_MasterRequestRead+0x198>)
 80029e2:	68f8      	ldr	r0, [r7, #12]
 80029e4:	f000 f865 	bl	8002ab2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80029e8:	4603      	mov	r3, r0
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d001      	beq.n	80029f2 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80029ee:	2301      	movs	r3, #1
 80029f0:	e000      	b.n	80029f4 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80029f2:	2300      	movs	r3, #0
}
 80029f4:	4618      	mov	r0, r3
 80029f6:	3718      	adds	r7, #24
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bd80      	pop	{r7, pc}
 80029fc:	00010008 	.word	0x00010008
 8002a00:	00010002 	.word	0x00010002

08002a04 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b084      	sub	sp, #16
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	60f8      	str	r0, [r7, #12]
 8002a0c:	60b9      	str	r1, [r7, #8]
 8002a0e:	603b      	str	r3, [r7, #0]
 8002a10:	4613      	mov	r3, r2
 8002a12:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a14:	e025      	b.n	8002a62 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002a1c:	d021      	beq.n	8002a62 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a1e:	f7fe ff43 	bl	80018a8 <HAL_GetTick>
 8002a22:	4602      	mov	r2, r0
 8002a24:	69bb      	ldr	r3, [r7, #24]
 8002a26:	1ad3      	subs	r3, r2, r3
 8002a28:	683a      	ldr	r2, [r7, #0]
 8002a2a:	429a      	cmp	r2, r3
 8002a2c:	d302      	bcc.n	8002a34 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d116      	bne.n	8002a62 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	2200      	movs	r2, #0
 8002a38:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	2220      	movs	r2, #32
 8002a3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	2200      	movs	r2, #0
 8002a46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a4e:	f043 0220 	orr.w	r2, r3, #32
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	2200      	movs	r2, #0
 8002a5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	e023      	b.n	8002aaa <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a62:	68bb      	ldr	r3, [r7, #8]
 8002a64:	0c1b      	lsrs	r3, r3, #16
 8002a66:	b2db      	uxtb	r3, r3
 8002a68:	2b01      	cmp	r3, #1
 8002a6a:	d10d      	bne.n	8002a88 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	695b      	ldr	r3, [r3, #20]
 8002a72:	43da      	mvns	r2, r3
 8002a74:	68bb      	ldr	r3, [r7, #8]
 8002a76:	4013      	ands	r3, r2
 8002a78:	b29b      	uxth	r3, r3
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	bf0c      	ite	eq
 8002a7e:	2301      	moveq	r3, #1
 8002a80:	2300      	movne	r3, #0
 8002a82:	b2db      	uxtb	r3, r3
 8002a84:	461a      	mov	r2, r3
 8002a86:	e00c      	b.n	8002aa2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	699b      	ldr	r3, [r3, #24]
 8002a8e:	43da      	mvns	r2, r3
 8002a90:	68bb      	ldr	r3, [r7, #8]
 8002a92:	4013      	ands	r3, r2
 8002a94:	b29b      	uxth	r3, r3
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	bf0c      	ite	eq
 8002a9a:	2301      	moveq	r3, #1
 8002a9c:	2300      	movne	r3, #0
 8002a9e:	b2db      	uxtb	r3, r3
 8002aa0:	461a      	mov	r2, r3
 8002aa2:	79fb      	ldrb	r3, [r7, #7]
 8002aa4:	429a      	cmp	r2, r3
 8002aa6:	d0b6      	beq.n	8002a16 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002aa8:	2300      	movs	r3, #0
}
 8002aaa:	4618      	mov	r0, r3
 8002aac:	3710      	adds	r7, #16
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}

08002ab2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002ab2:	b580      	push	{r7, lr}
 8002ab4:	b084      	sub	sp, #16
 8002ab6:	af00      	add	r7, sp, #0
 8002ab8:	60f8      	str	r0, [r7, #12]
 8002aba:	60b9      	str	r1, [r7, #8]
 8002abc:	607a      	str	r2, [r7, #4]
 8002abe:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002ac0:	e051      	b.n	8002b66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	695b      	ldr	r3, [r3, #20]
 8002ac8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002acc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ad0:	d123      	bne.n	8002b1a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	681a      	ldr	r2, [r3, #0]
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ae0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002aea:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	2200      	movs	r2, #0
 8002af0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	2220      	movs	r2, #32
 8002af6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	2200      	movs	r2, #0
 8002afe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b06:	f043 0204 	orr.w	r2, r3, #4
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	2200      	movs	r2, #0
 8002b12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002b16:	2301      	movs	r3, #1
 8002b18:	e046      	b.n	8002ba8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002b20:	d021      	beq.n	8002b66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b22:	f7fe fec1 	bl	80018a8 <HAL_GetTick>
 8002b26:	4602      	mov	r2, r0
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	1ad3      	subs	r3, r2, r3
 8002b2c:	687a      	ldr	r2, [r7, #4]
 8002b2e:	429a      	cmp	r2, r3
 8002b30:	d302      	bcc.n	8002b38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d116      	bne.n	8002b66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	2220      	movs	r2, #32
 8002b42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	2200      	movs	r2, #0
 8002b4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b52:	f043 0220 	orr.w	r2, r3, #32
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002b62:	2301      	movs	r3, #1
 8002b64:	e020      	b.n	8002ba8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002b66:	68bb      	ldr	r3, [r7, #8]
 8002b68:	0c1b      	lsrs	r3, r3, #16
 8002b6a:	b2db      	uxtb	r3, r3
 8002b6c:	2b01      	cmp	r3, #1
 8002b6e:	d10c      	bne.n	8002b8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	695b      	ldr	r3, [r3, #20]
 8002b76:	43da      	mvns	r2, r3
 8002b78:	68bb      	ldr	r3, [r7, #8]
 8002b7a:	4013      	ands	r3, r2
 8002b7c:	b29b      	uxth	r3, r3
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	bf14      	ite	ne
 8002b82:	2301      	movne	r3, #1
 8002b84:	2300      	moveq	r3, #0
 8002b86:	b2db      	uxtb	r3, r3
 8002b88:	e00b      	b.n	8002ba2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	699b      	ldr	r3, [r3, #24]
 8002b90:	43da      	mvns	r2, r3
 8002b92:	68bb      	ldr	r3, [r7, #8]
 8002b94:	4013      	ands	r3, r2
 8002b96:	b29b      	uxth	r3, r3
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	bf14      	ite	ne
 8002b9c:	2301      	movne	r3, #1
 8002b9e:	2300      	moveq	r3, #0
 8002ba0:	b2db      	uxtb	r3, r3
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d18d      	bne.n	8002ac2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002ba6:	2300      	movs	r3, #0
}
 8002ba8:	4618      	mov	r0, r3
 8002baa:	3710      	adds	r7, #16
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bd80      	pop	{r7, pc}

08002bb0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b084      	sub	sp, #16
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	60f8      	str	r0, [r7, #12]
 8002bb8:	60b9      	str	r1, [r7, #8]
 8002bba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002bbc:	e02d      	b.n	8002c1a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002bbe:	68f8      	ldr	r0, [r7, #12]
 8002bc0:	f000 f8ce 	bl	8002d60 <I2C_IsAcknowledgeFailed>
 8002bc4:	4603      	mov	r3, r0
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d001      	beq.n	8002bce <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002bca:	2301      	movs	r3, #1
 8002bcc:	e02d      	b.n	8002c2a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002bce:	68bb      	ldr	r3, [r7, #8]
 8002bd0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002bd4:	d021      	beq.n	8002c1a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002bd6:	f7fe fe67 	bl	80018a8 <HAL_GetTick>
 8002bda:	4602      	mov	r2, r0
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	1ad3      	subs	r3, r2, r3
 8002be0:	68ba      	ldr	r2, [r7, #8]
 8002be2:	429a      	cmp	r2, r3
 8002be4:	d302      	bcc.n	8002bec <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002be6:	68bb      	ldr	r3, [r7, #8]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d116      	bne.n	8002c1a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	2200      	movs	r2, #0
 8002bf0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	2220      	movs	r2, #32
 8002bf6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c06:	f043 0220 	orr.w	r2, r3, #32
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	2200      	movs	r2, #0
 8002c12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002c16:	2301      	movs	r3, #1
 8002c18:	e007      	b.n	8002c2a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	695b      	ldr	r3, [r3, #20]
 8002c20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c24:	2b80      	cmp	r3, #128	; 0x80
 8002c26:	d1ca      	bne.n	8002bbe <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002c28:	2300      	movs	r3, #0
}
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	3710      	adds	r7, #16
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bd80      	pop	{r7, pc}

08002c32 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002c32:	b580      	push	{r7, lr}
 8002c34:	b084      	sub	sp, #16
 8002c36:	af00      	add	r7, sp, #0
 8002c38:	60f8      	str	r0, [r7, #12]
 8002c3a:	60b9      	str	r1, [r7, #8]
 8002c3c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002c3e:	e02d      	b.n	8002c9c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002c40:	68f8      	ldr	r0, [r7, #12]
 8002c42:	f000 f88d 	bl	8002d60 <I2C_IsAcknowledgeFailed>
 8002c46:	4603      	mov	r3, r0
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d001      	beq.n	8002c50 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	e02d      	b.n	8002cac <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c50:	68bb      	ldr	r3, [r7, #8]
 8002c52:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002c56:	d021      	beq.n	8002c9c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c58:	f7fe fe26 	bl	80018a8 <HAL_GetTick>
 8002c5c:	4602      	mov	r2, r0
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	1ad3      	subs	r3, r2, r3
 8002c62:	68ba      	ldr	r2, [r7, #8]
 8002c64:	429a      	cmp	r2, r3
 8002c66:	d302      	bcc.n	8002c6e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002c68:	68bb      	ldr	r3, [r7, #8]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d116      	bne.n	8002c9c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	2200      	movs	r2, #0
 8002c72:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	2220      	movs	r2, #32
 8002c78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	2200      	movs	r2, #0
 8002c80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c88:	f043 0220 	orr.w	r2, r3, #32
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	2200      	movs	r2, #0
 8002c94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002c98:	2301      	movs	r3, #1
 8002c9a:	e007      	b.n	8002cac <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	695b      	ldr	r3, [r3, #20]
 8002ca2:	f003 0304 	and.w	r3, r3, #4
 8002ca6:	2b04      	cmp	r3, #4
 8002ca8:	d1ca      	bne.n	8002c40 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002caa:	2300      	movs	r3, #0
}
 8002cac:	4618      	mov	r0, r3
 8002cae:	3710      	adds	r7, #16
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	bd80      	pop	{r7, pc}

08002cb4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b084      	sub	sp, #16
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	60f8      	str	r0, [r7, #12]
 8002cbc:	60b9      	str	r1, [r7, #8]
 8002cbe:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002cc0:	e042      	b.n	8002d48 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	695b      	ldr	r3, [r3, #20]
 8002cc8:	f003 0310 	and.w	r3, r3, #16
 8002ccc:	2b10      	cmp	r3, #16
 8002cce:	d119      	bne.n	8002d04 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f06f 0210 	mvn.w	r2, #16
 8002cd8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	2200      	movs	r2, #0
 8002cde:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	2220      	movs	r2, #32
 8002ce4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	2200      	movs	r2, #0
 8002cec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002d00:	2301      	movs	r3, #1
 8002d02:	e029      	b.n	8002d58 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d04:	f7fe fdd0 	bl	80018a8 <HAL_GetTick>
 8002d08:	4602      	mov	r2, r0
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	1ad3      	subs	r3, r2, r3
 8002d0e:	68ba      	ldr	r2, [r7, #8]
 8002d10:	429a      	cmp	r2, r3
 8002d12:	d302      	bcc.n	8002d1a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002d14:	68bb      	ldr	r3, [r7, #8]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d116      	bne.n	8002d48 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	2220      	movs	r2, #32
 8002d24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d34:	f043 0220 	orr.w	r2, r3, #32
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	2200      	movs	r2, #0
 8002d40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002d44:	2301      	movs	r3, #1
 8002d46:	e007      	b.n	8002d58 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	695b      	ldr	r3, [r3, #20]
 8002d4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d52:	2b40      	cmp	r3, #64	; 0x40
 8002d54:	d1b5      	bne.n	8002cc2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002d56:	2300      	movs	r3, #0
}
 8002d58:	4618      	mov	r0, r3
 8002d5a:	3710      	adds	r7, #16
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	bd80      	pop	{r7, pc}

08002d60 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002d60:	b480      	push	{r7}
 8002d62:	b083      	sub	sp, #12
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	695b      	ldr	r3, [r3, #20]
 8002d6e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d76:	d11b      	bne.n	8002db0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002d80:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2200      	movs	r2, #0
 8002d86:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2220      	movs	r2, #32
 8002d8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2200      	movs	r2, #0
 8002d94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d9c:	f043 0204 	orr.w	r2, r3, #4
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2200      	movs	r2, #0
 8002da8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002dac:	2301      	movs	r3, #1
 8002dae:	e000      	b.n	8002db2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002db0:	2300      	movs	r3, #0
}
 8002db2:	4618      	mov	r0, r3
 8002db4:	370c      	adds	r7, #12
 8002db6:	46bd      	mov	sp, r7
 8002db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbc:	4770      	bx	lr

08002dbe <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002dbe:	b480      	push	{r7}
 8002dc0:	b083      	sub	sp, #12
 8002dc2:	af00      	add	r7, sp, #0
 8002dc4:	6078      	str	r0, [r7, #4]
 8002dc6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002dce:	b2db      	uxtb	r3, r3
 8002dd0:	2b20      	cmp	r3, #32
 8002dd2:	d129      	bne.n	8002e28 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2224      	movs	r2, #36	; 0x24
 8002dd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	681a      	ldr	r2, [r3, #0]
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f022 0201 	bic.w	r2, r2, #1
 8002dea:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f022 0210 	bic.w	r2, r2, #16
 8002dfa:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	683a      	ldr	r2, [r7, #0]
 8002e08:	430a      	orrs	r2, r1
 8002e0a:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	681a      	ldr	r2, [r3, #0]
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f042 0201 	orr.w	r2, r2, #1
 8002e1a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2220      	movs	r2, #32
 8002e20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002e24:	2300      	movs	r3, #0
 8002e26:	e000      	b.n	8002e2a <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8002e28:	2302      	movs	r3, #2
  }
}
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	370c      	adds	r7, #12
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e34:	4770      	bx	lr

08002e36 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002e36:	b480      	push	{r7}
 8002e38:	b085      	sub	sp, #20
 8002e3a:	af00      	add	r7, sp, #0
 8002e3c:	6078      	str	r0, [r7, #4]
 8002e3e:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8002e40:	2300      	movs	r3, #0
 8002e42:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e4a:	b2db      	uxtb	r3, r3
 8002e4c:	2b20      	cmp	r3, #32
 8002e4e:	d12a      	bne.n	8002ea6 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2224      	movs	r2, #36	; 0x24
 8002e54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	681a      	ldr	r2, [r3, #0]
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f022 0201 	bic.w	r2, r2, #1
 8002e66:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e6e:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8002e70:	89fb      	ldrh	r3, [r7, #14]
 8002e72:	f023 030f 	bic.w	r3, r3, #15
 8002e76:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	b29a      	uxth	r2, r3
 8002e7c:	89fb      	ldrh	r3, [r7, #14]
 8002e7e:	4313      	orrs	r3, r2
 8002e80:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	89fa      	ldrh	r2, [r7, #14]
 8002e88:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	681a      	ldr	r2, [r3, #0]
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f042 0201 	orr.w	r2, r2, #1
 8002e98:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2220      	movs	r2, #32
 8002e9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	e000      	b.n	8002ea8 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8002ea6:	2302      	movs	r3, #2
  }
}
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	3714      	adds	r7, #20
 8002eac:	46bd      	mov	sp, r7
 8002eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb2:	4770      	bx	lr

08002eb4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b086      	sub	sp, #24
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d101      	bne.n	8002ec6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	e267      	b.n	8003396 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f003 0301 	and.w	r3, r3, #1
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d075      	beq.n	8002fbe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002ed2:	4b88      	ldr	r3, [pc, #544]	; (80030f4 <HAL_RCC_OscConfig+0x240>)
 8002ed4:	689b      	ldr	r3, [r3, #8]
 8002ed6:	f003 030c 	and.w	r3, r3, #12
 8002eda:	2b04      	cmp	r3, #4
 8002edc:	d00c      	beq.n	8002ef8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ede:	4b85      	ldr	r3, [pc, #532]	; (80030f4 <HAL_RCC_OscConfig+0x240>)
 8002ee0:	689b      	ldr	r3, [r3, #8]
 8002ee2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002ee6:	2b08      	cmp	r3, #8
 8002ee8:	d112      	bne.n	8002f10 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002eea:	4b82      	ldr	r3, [pc, #520]	; (80030f4 <HAL_RCC_OscConfig+0x240>)
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ef2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ef6:	d10b      	bne.n	8002f10 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ef8:	4b7e      	ldr	r3, [pc, #504]	; (80030f4 <HAL_RCC_OscConfig+0x240>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d05b      	beq.n	8002fbc <HAL_RCC_OscConfig+0x108>
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d157      	bne.n	8002fbc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002f0c:	2301      	movs	r3, #1
 8002f0e:	e242      	b.n	8003396 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f18:	d106      	bne.n	8002f28 <HAL_RCC_OscConfig+0x74>
 8002f1a:	4b76      	ldr	r3, [pc, #472]	; (80030f4 <HAL_RCC_OscConfig+0x240>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4a75      	ldr	r2, [pc, #468]	; (80030f4 <HAL_RCC_OscConfig+0x240>)
 8002f20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f24:	6013      	str	r3, [r2, #0]
 8002f26:	e01d      	b.n	8002f64 <HAL_RCC_OscConfig+0xb0>
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f30:	d10c      	bne.n	8002f4c <HAL_RCC_OscConfig+0x98>
 8002f32:	4b70      	ldr	r3, [pc, #448]	; (80030f4 <HAL_RCC_OscConfig+0x240>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4a6f      	ldr	r2, [pc, #444]	; (80030f4 <HAL_RCC_OscConfig+0x240>)
 8002f38:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f3c:	6013      	str	r3, [r2, #0]
 8002f3e:	4b6d      	ldr	r3, [pc, #436]	; (80030f4 <HAL_RCC_OscConfig+0x240>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4a6c      	ldr	r2, [pc, #432]	; (80030f4 <HAL_RCC_OscConfig+0x240>)
 8002f44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f48:	6013      	str	r3, [r2, #0]
 8002f4a:	e00b      	b.n	8002f64 <HAL_RCC_OscConfig+0xb0>
 8002f4c:	4b69      	ldr	r3, [pc, #420]	; (80030f4 <HAL_RCC_OscConfig+0x240>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a68      	ldr	r2, [pc, #416]	; (80030f4 <HAL_RCC_OscConfig+0x240>)
 8002f52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f56:	6013      	str	r3, [r2, #0]
 8002f58:	4b66      	ldr	r3, [pc, #408]	; (80030f4 <HAL_RCC_OscConfig+0x240>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4a65      	ldr	r2, [pc, #404]	; (80030f4 <HAL_RCC_OscConfig+0x240>)
 8002f5e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f62:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d013      	beq.n	8002f94 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f6c:	f7fe fc9c 	bl	80018a8 <HAL_GetTick>
 8002f70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f72:	e008      	b.n	8002f86 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f74:	f7fe fc98 	bl	80018a8 <HAL_GetTick>
 8002f78:	4602      	mov	r2, r0
 8002f7a:	693b      	ldr	r3, [r7, #16]
 8002f7c:	1ad3      	subs	r3, r2, r3
 8002f7e:	2b64      	cmp	r3, #100	; 0x64
 8002f80:	d901      	bls.n	8002f86 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002f82:	2303      	movs	r3, #3
 8002f84:	e207      	b.n	8003396 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f86:	4b5b      	ldr	r3, [pc, #364]	; (80030f4 <HAL_RCC_OscConfig+0x240>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d0f0      	beq.n	8002f74 <HAL_RCC_OscConfig+0xc0>
 8002f92:	e014      	b.n	8002fbe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f94:	f7fe fc88 	bl	80018a8 <HAL_GetTick>
 8002f98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f9a:	e008      	b.n	8002fae <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f9c:	f7fe fc84 	bl	80018a8 <HAL_GetTick>
 8002fa0:	4602      	mov	r2, r0
 8002fa2:	693b      	ldr	r3, [r7, #16]
 8002fa4:	1ad3      	subs	r3, r2, r3
 8002fa6:	2b64      	cmp	r3, #100	; 0x64
 8002fa8:	d901      	bls.n	8002fae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002faa:	2303      	movs	r3, #3
 8002fac:	e1f3      	b.n	8003396 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fae:	4b51      	ldr	r3, [pc, #324]	; (80030f4 <HAL_RCC_OscConfig+0x240>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d1f0      	bne.n	8002f9c <HAL_RCC_OscConfig+0xe8>
 8002fba:	e000      	b.n	8002fbe <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fbc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f003 0302 	and.w	r3, r3, #2
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d063      	beq.n	8003092 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002fca:	4b4a      	ldr	r3, [pc, #296]	; (80030f4 <HAL_RCC_OscConfig+0x240>)
 8002fcc:	689b      	ldr	r3, [r3, #8]
 8002fce:	f003 030c 	and.w	r3, r3, #12
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d00b      	beq.n	8002fee <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002fd6:	4b47      	ldr	r3, [pc, #284]	; (80030f4 <HAL_RCC_OscConfig+0x240>)
 8002fd8:	689b      	ldr	r3, [r3, #8]
 8002fda:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002fde:	2b08      	cmp	r3, #8
 8002fe0:	d11c      	bne.n	800301c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002fe2:	4b44      	ldr	r3, [pc, #272]	; (80030f4 <HAL_RCC_OscConfig+0x240>)
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d116      	bne.n	800301c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fee:	4b41      	ldr	r3, [pc, #260]	; (80030f4 <HAL_RCC_OscConfig+0x240>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f003 0302 	and.w	r3, r3, #2
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d005      	beq.n	8003006 <HAL_RCC_OscConfig+0x152>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	68db      	ldr	r3, [r3, #12]
 8002ffe:	2b01      	cmp	r3, #1
 8003000:	d001      	beq.n	8003006 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003002:	2301      	movs	r3, #1
 8003004:	e1c7      	b.n	8003396 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003006:	4b3b      	ldr	r3, [pc, #236]	; (80030f4 <HAL_RCC_OscConfig+0x240>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	691b      	ldr	r3, [r3, #16]
 8003012:	00db      	lsls	r3, r3, #3
 8003014:	4937      	ldr	r1, [pc, #220]	; (80030f4 <HAL_RCC_OscConfig+0x240>)
 8003016:	4313      	orrs	r3, r2
 8003018:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800301a:	e03a      	b.n	8003092 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	68db      	ldr	r3, [r3, #12]
 8003020:	2b00      	cmp	r3, #0
 8003022:	d020      	beq.n	8003066 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003024:	4b34      	ldr	r3, [pc, #208]	; (80030f8 <HAL_RCC_OscConfig+0x244>)
 8003026:	2201      	movs	r2, #1
 8003028:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800302a:	f7fe fc3d 	bl	80018a8 <HAL_GetTick>
 800302e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003030:	e008      	b.n	8003044 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003032:	f7fe fc39 	bl	80018a8 <HAL_GetTick>
 8003036:	4602      	mov	r2, r0
 8003038:	693b      	ldr	r3, [r7, #16]
 800303a:	1ad3      	subs	r3, r2, r3
 800303c:	2b02      	cmp	r3, #2
 800303e:	d901      	bls.n	8003044 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003040:	2303      	movs	r3, #3
 8003042:	e1a8      	b.n	8003396 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003044:	4b2b      	ldr	r3, [pc, #172]	; (80030f4 <HAL_RCC_OscConfig+0x240>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f003 0302 	and.w	r3, r3, #2
 800304c:	2b00      	cmp	r3, #0
 800304e:	d0f0      	beq.n	8003032 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003050:	4b28      	ldr	r3, [pc, #160]	; (80030f4 <HAL_RCC_OscConfig+0x240>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	691b      	ldr	r3, [r3, #16]
 800305c:	00db      	lsls	r3, r3, #3
 800305e:	4925      	ldr	r1, [pc, #148]	; (80030f4 <HAL_RCC_OscConfig+0x240>)
 8003060:	4313      	orrs	r3, r2
 8003062:	600b      	str	r3, [r1, #0]
 8003064:	e015      	b.n	8003092 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003066:	4b24      	ldr	r3, [pc, #144]	; (80030f8 <HAL_RCC_OscConfig+0x244>)
 8003068:	2200      	movs	r2, #0
 800306a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800306c:	f7fe fc1c 	bl	80018a8 <HAL_GetTick>
 8003070:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003072:	e008      	b.n	8003086 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003074:	f7fe fc18 	bl	80018a8 <HAL_GetTick>
 8003078:	4602      	mov	r2, r0
 800307a:	693b      	ldr	r3, [r7, #16]
 800307c:	1ad3      	subs	r3, r2, r3
 800307e:	2b02      	cmp	r3, #2
 8003080:	d901      	bls.n	8003086 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003082:	2303      	movs	r3, #3
 8003084:	e187      	b.n	8003396 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003086:	4b1b      	ldr	r3, [pc, #108]	; (80030f4 <HAL_RCC_OscConfig+0x240>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f003 0302 	and.w	r3, r3, #2
 800308e:	2b00      	cmp	r3, #0
 8003090:	d1f0      	bne.n	8003074 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f003 0308 	and.w	r3, r3, #8
 800309a:	2b00      	cmp	r3, #0
 800309c:	d036      	beq.n	800310c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	695b      	ldr	r3, [r3, #20]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d016      	beq.n	80030d4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80030a6:	4b15      	ldr	r3, [pc, #84]	; (80030fc <HAL_RCC_OscConfig+0x248>)
 80030a8:	2201      	movs	r2, #1
 80030aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030ac:	f7fe fbfc 	bl	80018a8 <HAL_GetTick>
 80030b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030b2:	e008      	b.n	80030c6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80030b4:	f7fe fbf8 	bl	80018a8 <HAL_GetTick>
 80030b8:	4602      	mov	r2, r0
 80030ba:	693b      	ldr	r3, [r7, #16]
 80030bc:	1ad3      	subs	r3, r2, r3
 80030be:	2b02      	cmp	r3, #2
 80030c0:	d901      	bls.n	80030c6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80030c2:	2303      	movs	r3, #3
 80030c4:	e167      	b.n	8003396 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030c6:	4b0b      	ldr	r3, [pc, #44]	; (80030f4 <HAL_RCC_OscConfig+0x240>)
 80030c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030ca:	f003 0302 	and.w	r3, r3, #2
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d0f0      	beq.n	80030b4 <HAL_RCC_OscConfig+0x200>
 80030d2:	e01b      	b.n	800310c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80030d4:	4b09      	ldr	r3, [pc, #36]	; (80030fc <HAL_RCC_OscConfig+0x248>)
 80030d6:	2200      	movs	r2, #0
 80030d8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030da:	f7fe fbe5 	bl	80018a8 <HAL_GetTick>
 80030de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030e0:	e00e      	b.n	8003100 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80030e2:	f7fe fbe1 	bl	80018a8 <HAL_GetTick>
 80030e6:	4602      	mov	r2, r0
 80030e8:	693b      	ldr	r3, [r7, #16]
 80030ea:	1ad3      	subs	r3, r2, r3
 80030ec:	2b02      	cmp	r3, #2
 80030ee:	d907      	bls.n	8003100 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80030f0:	2303      	movs	r3, #3
 80030f2:	e150      	b.n	8003396 <HAL_RCC_OscConfig+0x4e2>
 80030f4:	40023800 	.word	0x40023800
 80030f8:	42470000 	.word	0x42470000
 80030fc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003100:	4b88      	ldr	r3, [pc, #544]	; (8003324 <HAL_RCC_OscConfig+0x470>)
 8003102:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003104:	f003 0302 	and.w	r3, r3, #2
 8003108:	2b00      	cmp	r3, #0
 800310a:	d1ea      	bne.n	80030e2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f003 0304 	and.w	r3, r3, #4
 8003114:	2b00      	cmp	r3, #0
 8003116:	f000 8097 	beq.w	8003248 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800311a:	2300      	movs	r3, #0
 800311c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800311e:	4b81      	ldr	r3, [pc, #516]	; (8003324 <HAL_RCC_OscConfig+0x470>)
 8003120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003122:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003126:	2b00      	cmp	r3, #0
 8003128:	d10f      	bne.n	800314a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800312a:	2300      	movs	r3, #0
 800312c:	60bb      	str	r3, [r7, #8]
 800312e:	4b7d      	ldr	r3, [pc, #500]	; (8003324 <HAL_RCC_OscConfig+0x470>)
 8003130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003132:	4a7c      	ldr	r2, [pc, #496]	; (8003324 <HAL_RCC_OscConfig+0x470>)
 8003134:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003138:	6413      	str	r3, [r2, #64]	; 0x40
 800313a:	4b7a      	ldr	r3, [pc, #488]	; (8003324 <HAL_RCC_OscConfig+0x470>)
 800313c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800313e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003142:	60bb      	str	r3, [r7, #8]
 8003144:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003146:	2301      	movs	r3, #1
 8003148:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800314a:	4b77      	ldr	r3, [pc, #476]	; (8003328 <HAL_RCC_OscConfig+0x474>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003152:	2b00      	cmp	r3, #0
 8003154:	d118      	bne.n	8003188 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003156:	4b74      	ldr	r3, [pc, #464]	; (8003328 <HAL_RCC_OscConfig+0x474>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4a73      	ldr	r2, [pc, #460]	; (8003328 <HAL_RCC_OscConfig+0x474>)
 800315c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003160:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003162:	f7fe fba1 	bl	80018a8 <HAL_GetTick>
 8003166:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003168:	e008      	b.n	800317c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800316a:	f7fe fb9d 	bl	80018a8 <HAL_GetTick>
 800316e:	4602      	mov	r2, r0
 8003170:	693b      	ldr	r3, [r7, #16]
 8003172:	1ad3      	subs	r3, r2, r3
 8003174:	2b02      	cmp	r3, #2
 8003176:	d901      	bls.n	800317c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003178:	2303      	movs	r3, #3
 800317a:	e10c      	b.n	8003396 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800317c:	4b6a      	ldr	r3, [pc, #424]	; (8003328 <HAL_RCC_OscConfig+0x474>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003184:	2b00      	cmp	r3, #0
 8003186:	d0f0      	beq.n	800316a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	689b      	ldr	r3, [r3, #8]
 800318c:	2b01      	cmp	r3, #1
 800318e:	d106      	bne.n	800319e <HAL_RCC_OscConfig+0x2ea>
 8003190:	4b64      	ldr	r3, [pc, #400]	; (8003324 <HAL_RCC_OscConfig+0x470>)
 8003192:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003194:	4a63      	ldr	r2, [pc, #396]	; (8003324 <HAL_RCC_OscConfig+0x470>)
 8003196:	f043 0301 	orr.w	r3, r3, #1
 800319a:	6713      	str	r3, [r2, #112]	; 0x70
 800319c:	e01c      	b.n	80031d8 <HAL_RCC_OscConfig+0x324>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	689b      	ldr	r3, [r3, #8]
 80031a2:	2b05      	cmp	r3, #5
 80031a4:	d10c      	bne.n	80031c0 <HAL_RCC_OscConfig+0x30c>
 80031a6:	4b5f      	ldr	r3, [pc, #380]	; (8003324 <HAL_RCC_OscConfig+0x470>)
 80031a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031aa:	4a5e      	ldr	r2, [pc, #376]	; (8003324 <HAL_RCC_OscConfig+0x470>)
 80031ac:	f043 0304 	orr.w	r3, r3, #4
 80031b0:	6713      	str	r3, [r2, #112]	; 0x70
 80031b2:	4b5c      	ldr	r3, [pc, #368]	; (8003324 <HAL_RCC_OscConfig+0x470>)
 80031b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031b6:	4a5b      	ldr	r2, [pc, #364]	; (8003324 <HAL_RCC_OscConfig+0x470>)
 80031b8:	f043 0301 	orr.w	r3, r3, #1
 80031bc:	6713      	str	r3, [r2, #112]	; 0x70
 80031be:	e00b      	b.n	80031d8 <HAL_RCC_OscConfig+0x324>
 80031c0:	4b58      	ldr	r3, [pc, #352]	; (8003324 <HAL_RCC_OscConfig+0x470>)
 80031c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031c4:	4a57      	ldr	r2, [pc, #348]	; (8003324 <HAL_RCC_OscConfig+0x470>)
 80031c6:	f023 0301 	bic.w	r3, r3, #1
 80031ca:	6713      	str	r3, [r2, #112]	; 0x70
 80031cc:	4b55      	ldr	r3, [pc, #340]	; (8003324 <HAL_RCC_OscConfig+0x470>)
 80031ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031d0:	4a54      	ldr	r2, [pc, #336]	; (8003324 <HAL_RCC_OscConfig+0x470>)
 80031d2:	f023 0304 	bic.w	r3, r3, #4
 80031d6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	689b      	ldr	r3, [r3, #8]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d015      	beq.n	800320c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031e0:	f7fe fb62 	bl	80018a8 <HAL_GetTick>
 80031e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031e6:	e00a      	b.n	80031fe <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031e8:	f7fe fb5e 	bl	80018a8 <HAL_GetTick>
 80031ec:	4602      	mov	r2, r0
 80031ee:	693b      	ldr	r3, [r7, #16]
 80031f0:	1ad3      	subs	r3, r2, r3
 80031f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d901      	bls.n	80031fe <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80031fa:	2303      	movs	r3, #3
 80031fc:	e0cb      	b.n	8003396 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031fe:	4b49      	ldr	r3, [pc, #292]	; (8003324 <HAL_RCC_OscConfig+0x470>)
 8003200:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003202:	f003 0302 	and.w	r3, r3, #2
 8003206:	2b00      	cmp	r3, #0
 8003208:	d0ee      	beq.n	80031e8 <HAL_RCC_OscConfig+0x334>
 800320a:	e014      	b.n	8003236 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800320c:	f7fe fb4c 	bl	80018a8 <HAL_GetTick>
 8003210:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003212:	e00a      	b.n	800322a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003214:	f7fe fb48 	bl	80018a8 <HAL_GetTick>
 8003218:	4602      	mov	r2, r0
 800321a:	693b      	ldr	r3, [r7, #16]
 800321c:	1ad3      	subs	r3, r2, r3
 800321e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003222:	4293      	cmp	r3, r2
 8003224:	d901      	bls.n	800322a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003226:	2303      	movs	r3, #3
 8003228:	e0b5      	b.n	8003396 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800322a:	4b3e      	ldr	r3, [pc, #248]	; (8003324 <HAL_RCC_OscConfig+0x470>)
 800322c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800322e:	f003 0302 	and.w	r3, r3, #2
 8003232:	2b00      	cmp	r3, #0
 8003234:	d1ee      	bne.n	8003214 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003236:	7dfb      	ldrb	r3, [r7, #23]
 8003238:	2b01      	cmp	r3, #1
 800323a:	d105      	bne.n	8003248 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800323c:	4b39      	ldr	r3, [pc, #228]	; (8003324 <HAL_RCC_OscConfig+0x470>)
 800323e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003240:	4a38      	ldr	r2, [pc, #224]	; (8003324 <HAL_RCC_OscConfig+0x470>)
 8003242:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003246:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	699b      	ldr	r3, [r3, #24]
 800324c:	2b00      	cmp	r3, #0
 800324e:	f000 80a1 	beq.w	8003394 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003252:	4b34      	ldr	r3, [pc, #208]	; (8003324 <HAL_RCC_OscConfig+0x470>)
 8003254:	689b      	ldr	r3, [r3, #8]
 8003256:	f003 030c 	and.w	r3, r3, #12
 800325a:	2b08      	cmp	r3, #8
 800325c:	d05c      	beq.n	8003318 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	699b      	ldr	r3, [r3, #24]
 8003262:	2b02      	cmp	r3, #2
 8003264:	d141      	bne.n	80032ea <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003266:	4b31      	ldr	r3, [pc, #196]	; (800332c <HAL_RCC_OscConfig+0x478>)
 8003268:	2200      	movs	r2, #0
 800326a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800326c:	f7fe fb1c 	bl	80018a8 <HAL_GetTick>
 8003270:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003272:	e008      	b.n	8003286 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003274:	f7fe fb18 	bl	80018a8 <HAL_GetTick>
 8003278:	4602      	mov	r2, r0
 800327a:	693b      	ldr	r3, [r7, #16]
 800327c:	1ad3      	subs	r3, r2, r3
 800327e:	2b02      	cmp	r3, #2
 8003280:	d901      	bls.n	8003286 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003282:	2303      	movs	r3, #3
 8003284:	e087      	b.n	8003396 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003286:	4b27      	ldr	r3, [pc, #156]	; (8003324 <HAL_RCC_OscConfig+0x470>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800328e:	2b00      	cmp	r3, #0
 8003290:	d1f0      	bne.n	8003274 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	69da      	ldr	r2, [r3, #28]
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6a1b      	ldr	r3, [r3, #32]
 800329a:	431a      	orrs	r2, r3
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032a0:	019b      	lsls	r3, r3, #6
 80032a2:	431a      	orrs	r2, r3
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032a8:	085b      	lsrs	r3, r3, #1
 80032aa:	3b01      	subs	r3, #1
 80032ac:	041b      	lsls	r3, r3, #16
 80032ae:	431a      	orrs	r2, r3
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032b4:	061b      	lsls	r3, r3, #24
 80032b6:	491b      	ldr	r1, [pc, #108]	; (8003324 <HAL_RCC_OscConfig+0x470>)
 80032b8:	4313      	orrs	r3, r2
 80032ba:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80032bc:	4b1b      	ldr	r3, [pc, #108]	; (800332c <HAL_RCC_OscConfig+0x478>)
 80032be:	2201      	movs	r2, #1
 80032c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032c2:	f7fe faf1 	bl	80018a8 <HAL_GetTick>
 80032c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032c8:	e008      	b.n	80032dc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032ca:	f7fe faed 	bl	80018a8 <HAL_GetTick>
 80032ce:	4602      	mov	r2, r0
 80032d0:	693b      	ldr	r3, [r7, #16]
 80032d2:	1ad3      	subs	r3, r2, r3
 80032d4:	2b02      	cmp	r3, #2
 80032d6:	d901      	bls.n	80032dc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80032d8:	2303      	movs	r3, #3
 80032da:	e05c      	b.n	8003396 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032dc:	4b11      	ldr	r3, [pc, #68]	; (8003324 <HAL_RCC_OscConfig+0x470>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d0f0      	beq.n	80032ca <HAL_RCC_OscConfig+0x416>
 80032e8:	e054      	b.n	8003394 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032ea:	4b10      	ldr	r3, [pc, #64]	; (800332c <HAL_RCC_OscConfig+0x478>)
 80032ec:	2200      	movs	r2, #0
 80032ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032f0:	f7fe fada 	bl	80018a8 <HAL_GetTick>
 80032f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032f6:	e008      	b.n	800330a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032f8:	f7fe fad6 	bl	80018a8 <HAL_GetTick>
 80032fc:	4602      	mov	r2, r0
 80032fe:	693b      	ldr	r3, [r7, #16]
 8003300:	1ad3      	subs	r3, r2, r3
 8003302:	2b02      	cmp	r3, #2
 8003304:	d901      	bls.n	800330a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003306:	2303      	movs	r3, #3
 8003308:	e045      	b.n	8003396 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800330a:	4b06      	ldr	r3, [pc, #24]	; (8003324 <HAL_RCC_OscConfig+0x470>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003312:	2b00      	cmp	r3, #0
 8003314:	d1f0      	bne.n	80032f8 <HAL_RCC_OscConfig+0x444>
 8003316:	e03d      	b.n	8003394 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	699b      	ldr	r3, [r3, #24]
 800331c:	2b01      	cmp	r3, #1
 800331e:	d107      	bne.n	8003330 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003320:	2301      	movs	r3, #1
 8003322:	e038      	b.n	8003396 <HAL_RCC_OscConfig+0x4e2>
 8003324:	40023800 	.word	0x40023800
 8003328:	40007000 	.word	0x40007000
 800332c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003330:	4b1b      	ldr	r3, [pc, #108]	; (80033a0 <HAL_RCC_OscConfig+0x4ec>)
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	699b      	ldr	r3, [r3, #24]
 800333a:	2b01      	cmp	r3, #1
 800333c:	d028      	beq.n	8003390 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003348:	429a      	cmp	r2, r3
 800334a:	d121      	bne.n	8003390 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003356:	429a      	cmp	r2, r3
 8003358:	d11a      	bne.n	8003390 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800335a:	68fa      	ldr	r2, [r7, #12]
 800335c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003360:	4013      	ands	r3, r2
 8003362:	687a      	ldr	r2, [r7, #4]
 8003364:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003366:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003368:	4293      	cmp	r3, r2
 800336a:	d111      	bne.n	8003390 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003376:	085b      	lsrs	r3, r3, #1
 8003378:	3b01      	subs	r3, #1
 800337a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800337c:	429a      	cmp	r2, r3
 800337e:	d107      	bne.n	8003390 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800338a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800338c:	429a      	cmp	r2, r3
 800338e:	d001      	beq.n	8003394 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003390:	2301      	movs	r3, #1
 8003392:	e000      	b.n	8003396 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003394:	2300      	movs	r3, #0
}
 8003396:	4618      	mov	r0, r3
 8003398:	3718      	adds	r7, #24
 800339a:	46bd      	mov	sp, r7
 800339c:	bd80      	pop	{r7, pc}
 800339e:	bf00      	nop
 80033a0:	40023800 	.word	0x40023800

080033a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b084      	sub	sp, #16
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
 80033ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d101      	bne.n	80033b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80033b4:	2301      	movs	r3, #1
 80033b6:	e0cc      	b.n	8003552 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80033b8:	4b68      	ldr	r3, [pc, #416]	; (800355c <HAL_RCC_ClockConfig+0x1b8>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f003 030f 	and.w	r3, r3, #15
 80033c0:	683a      	ldr	r2, [r7, #0]
 80033c2:	429a      	cmp	r2, r3
 80033c4:	d90c      	bls.n	80033e0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033c6:	4b65      	ldr	r3, [pc, #404]	; (800355c <HAL_RCC_ClockConfig+0x1b8>)
 80033c8:	683a      	ldr	r2, [r7, #0]
 80033ca:	b2d2      	uxtb	r2, r2
 80033cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033ce:	4b63      	ldr	r3, [pc, #396]	; (800355c <HAL_RCC_ClockConfig+0x1b8>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f003 030f 	and.w	r3, r3, #15
 80033d6:	683a      	ldr	r2, [r7, #0]
 80033d8:	429a      	cmp	r2, r3
 80033da:	d001      	beq.n	80033e0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80033dc:	2301      	movs	r3, #1
 80033de:	e0b8      	b.n	8003552 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f003 0302 	and.w	r3, r3, #2
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d020      	beq.n	800342e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f003 0304 	and.w	r3, r3, #4
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d005      	beq.n	8003404 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80033f8:	4b59      	ldr	r3, [pc, #356]	; (8003560 <HAL_RCC_ClockConfig+0x1bc>)
 80033fa:	689b      	ldr	r3, [r3, #8]
 80033fc:	4a58      	ldr	r2, [pc, #352]	; (8003560 <HAL_RCC_ClockConfig+0x1bc>)
 80033fe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003402:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f003 0308 	and.w	r3, r3, #8
 800340c:	2b00      	cmp	r3, #0
 800340e:	d005      	beq.n	800341c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003410:	4b53      	ldr	r3, [pc, #332]	; (8003560 <HAL_RCC_ClockConfig+0x1bc>)
 8003412:	689b      	ldr	r3, [r3, #8]
 8003414:	4a52      	ldr	r2, [pc, #328]	; (8003560 <HAL_RCC_ClockConfig+0x1bc>)
 8003416:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800341a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800341c:	4b50      	ldr	r3, [pc, #320]	; (8003560 <HAL_RCC_ClockConfig+0x1bc>)
 800341e:	689b      	ldr	r3, [r3, #8]
 8003420:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	689b      	ldr	r3, [r3, #8]
 8003428:	494d      	ldr	r1, [pc, #308]	; (8003560 <HAL_RCC_ClockConfig+0x1bc>)
 800342a:	4313      	orrs	r3, r2
 800342c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f003 0301 	and.w	r3, r3, #1
 8003436:	2b00      	cmp	r3, #0
 8003438:	d044      	beq.n	80034c4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	685b      	ldr	r3, [r3, #4]
 800343e:	2b01      	cmp	r3, #1
 8003440:	d107      	bne.n	8003452 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003442:	4b47      	ldr	r3, [pc, #284]	; (8003560 <HAL_RCC_ClockConfig+0x1bc>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800344a:	2b00      	cmp	r3, #0
 800344c:	d119      	bne.n	8003482 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800344e:	2301      	movs	r3, #1
 8003450:	e07f      	b.n	8003552 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	2b02      	cmp	r3, #2
 8003458:	d003      	beq.n	8003462 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800345e:	2b03      	cmp	r3, #3
 8003460:	d107      	bne.n	8003472 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003462:	4b3f      	ldr	r3, [pc, #252]	; (8003560 <HAL_RCC_ClockConfig+0x1bc>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800346a:	2b00      	cmp	r3, #0
 800346c:	d109      	bne.n	8003482 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800346e:	2301      	movs	r3, #1
 8003470:	e06f      	b.n	8003552 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003472:	4b3b      	ldr	r3, [pc, #236]	; (8003560 <HAL_RCC_ClockConfig+0x1bc>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f003 0302 	and.w	r3, r3, #2
 800347a:	2b00      	cmp	r3, #0
 800347c:	d101      	bne.n	8003482 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800347e:	2301      	movs	r3, #1
 8003480:	e067      	b.n	8003552 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003482:	4b37      	ldr	r3, [pc, #220]	; (8003560 <HAL_RCC_ClockConfig+0x1bc>)
 8003484:	689b      	ldr	r3, [r3, #8]
 8003486:	f023 0203 	bic.w	r2, r3, #3
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	4934      	ldr	r1, [pc, #208]	; (8003560 <HAL_RCC_ClockConfig+0x1bc>)
 8003490:	4313      	orrs	r3, r2
 8003492:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003494:	f7fe fa08 	bl	80018a8 <HAL_GetTick>
 8003498:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800349a:	e00a      	b.n	80034b2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800349c:	f7fe fa04 	bl	80018a8 <HAL_GetTick>
 80034a0:	4602      	mov	r2, r0
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	1ad3      	subs	r3, r2, r3
 80034a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d901      	bls.n	80034b2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80034ae:	2303      	movs	r3, #3
 80034b0:	e04f      	b.n	8003552 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034b2:	4b2b      	ldr	r3, [pc, #172]	; (8003560 <HAL_RCC_ClockConfig+0x1bc>)
 80034b4:	689b      	ldr	r3, [r3, #8]
 80034b6:	f003 020c 	and.w	r2, r3, #12
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	685b      	ldr	r3, [r3, #4]
 80034be:	009b      	lsls	r3, r3, #2
 80034c0:	429a      	cmp	r2, r3
 80034c2:	d1eb      	bne.n	800349c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80034c4:	4b25      	ldr	r3, [pc, #148]	; (800355c <HAL_RCC_ClockConfig+0x1b8>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f003 030f 	and.w	r3, r3, #15
 80034cc:	683a      	ldr	r2, [r7, #0]
 80034ce:	429a      	cmp	r2, r3
 80034d0:	d20c      	bcs.n	80034ec <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034d2:	4b22      	ldr	r3, [pc, #136]	; (800355c <HAL_RCC_ClockConfig+0x1b8>)
 80034d4:	683a      	ldr	r2, [r7, #0]
 80034d6:	b2d2      	uxtb	r2, r2
 80034d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034da:	4b20      	ldr	r3, [pc, #128]	; (800355c <HAL_RCC_ClockConfig+0x1b8>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f003 030f 	and.w	r3, r3, #15
 80034e2:	683a      	ldr	r2, [r7, #0]
 80034e4:	429a      	cmp	r2, r3
 80034e6:	d001      	beq.n	80034ec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80034e8:	2301      	movs	r3, #1
 80034ea:	e032      	b.n	8003552 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f003 0304 	and.w	r3, r3, #4
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d008      	beq.n	800350a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80034f8:	4b19      	ldr	r3, [pc, #100]	; (8003560 <HAL_RCC_ClockConfig+0x1bc>)
 80034fa:	689b      	ldr	r3, [r3, #8]
 80034fc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	68db      	ldr	r3, [r3, #12]
 8003504:	4916      	ldr	r1, [pc, #88]	; (8003560 <HAL_RCC_ClockConfig+0x1bc>)
 8003506:	4313      	orrs	r3, r2
 8003508:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f003 0308 	and.w	r3, r3, #8
 8003512:	2b00      	cmp	r3, #0
 8003514:	d009      	beq.n	800352a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003516:	4b12      	ldr	r3, [pc, #72]	; (8003560 <HAL_RCC_ClockConfig+0x1bc>)
 8003518:	689b      	ldr	r3, [r3, #8]
 800351a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	691b      	ldr	r3, [r3, #16]
 8003522:	00db      	lsls	r3, r3, #3
 8003524:	490e      	ldr	r1, [pc, #56]	; (8003560 <HAL_RCC_ClockConfig+0x1bc>)
 8003526:	4313      	orrs	r3, r2
 8003528:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800352a:	f000 f821 	bl	8003570 <HAL_RCC_GetSysClockFreq>
 800352e:	4602      	mov	r2, r0
 8003530:	4b0b      	ldr	r3, [pc, #44]	; (8003560 <HAL_RCC_ClockConfig+0x1bc>)
 8003532:	689b      	ldr	r3, [r3, #8]
 8003534:	091b      	lsrs	r3, r3, #4
 8003536:	f003 030f 	and.w	r3, r3, #15
 800353a:	490a      	ldr	r1, [pc, #40]	; (8003564 <HAL_RCC_ClockConfig+0x1c0>)
 800353c:	5ccb      	ldrb	r3, [r1, r3]
 800353e:	fa22 f303 	lsr.w	r3, r2, r3
 8003542:	4a09      	ldr	r2, [pc, #36]	; (8003568 <HAL_RCC_ClockConfig+0x1c4>)
 8003544:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003546:	4b09      	ldr	r3, [pc, #36]	; (800356c <HAL_RCC_ClockConfig+0x1c8>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4618      	mov	r0, r3
 800354c:	f7fe f968 	bl	8001820 <HAL_InitTick>

  return HAL_OK;
 8003550:	2300      	movs	r3, #0
}
 8003552:	4618      	mov	r0, r3
 8003554:	3710      	adds	r7, #16
 8003556:	46bd      	mov	sp, r7
 8003558:	bd80      	pop	{r7, pc}
 800355a:	bf00      	nop
 800355c:	40023c00 	.word	0x40023c00
 8003560:	40023800 	.word	0x40023800
 8003564:	080052ec 	.word	0x080052ec
 8003568:	20000000 	.word	0x20000000
 800356c:	20000010 	.word	0x20000010

08003570 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003570:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003574:	b094      	sub	sp, #80	; 0x50
 8003576:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003578:	2300      	movs	r3, #0
 800357a:	647b      	str	r3, [r7, #68]	; 0x44
 800357c:	2300      	movs	r3, #0
 800357e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003580:	2300      	movs	r3, #0
 8003582:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003584:	2300      	movs	r3, #0
 8003586:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003588:	4b79      	ldr	r3, [pc, #484]	; (8003770 <HAL_RCC_GetSysClockFreq+0x200>)
 800358a:	689b      	ldr	r3, [r3, #8]
 800358c:	f003 030c 	and.w	r3, r3, #12
 8003590:	2b08      	cmp	r3, #8
 8003592:	d00d      	beq.n	80035b0 <HAL_RCC_GetSysClockFreq+0x40>
 8003594:	2b08      	cmp	r3, #8
 8003596:	f200 80e1 	bhi.w	800375c <HAL_RCC_GetSysClockFreq+0x1ec>
 800359a:	2b00      	cmp	r3, #0
 800359c:	d002      	beq.n	80035a4 <HAL_RCC_GetSysClockFreq+0x34>
 800359e:	2b04      	cmp	r3, #4
 80035a0:	d003      	beq.n	80035aa <HAL_RCC_GetSysClockFreq+0x3a>
 80035a2:	e0db      	b.n	800375c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80035a4:	4b73      	ldr	r3, [pc, #460]	; (8003774 <HAL_RCC_GetSysClockFreq+0x204>)
 80035a6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80035a8:	e0db      	b.n	8003762 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80035aa:	4b73      	ldr	r3, [pc, #460]	; (8003778 <HAL_RCC_GetSysClockFreq+0x208>)
 80035ac:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80035ae:	e0d8      	b.n	8003762 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80035b0:	4b6f      	ldr	r3, [pc, #444]	; (8003770 <HAL_RCC_GetSysClockFreq+0x200>)
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80035b8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80035ba:	4b6d      	ldr	r3, [pc, #436]	; (8003770 <HAL_RCC_GetSysClockFreq+0x200>)
 80035bc:	685b      	ldr	r3, [r3, #4]
 80035be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d063      	beq.n	800368e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035c6:	4b6a      	ldr	r3, [pc, #424]	; (8003770 <HAL_RCC_GetSysClockFreq+0x200>)
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	099b      	lsrs	r3, r3, #6
 80035cc:	2200      	movs	r2, #0
 80035ce:	63bb      	str	r3, [r7, #56]	; 0x38
 80035d0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80035d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035d8:	633b      	str	r3, [r7, #48]	; 0x30
 80035da:	2300      	movs	r3, #0
 80035dc:	637b      	str	r3, [r7, #52]	; 0x34
 80035de:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80035e2:	4622      	mov	r2, r4
 80035e4:	462b      	mov	r3, r5
 80035e6:	f04f 0000 	mov.w	r0, #0
 80035ea:	f04f 0100 	mov.w	r1, #0
 80035ee:	0159      	lsls	r1, r3, #5
 80035f0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80035f4:	0150      	lsls	r0, r2, #5
 80035f6:	4602      	mov	r2, r0
 80035f8:	460b      	mov	r3, r1
 80035fa:	4621      	mov	r1, r4
 80035fc:	1a51      	subs	r1, r2, r1
 80035fe:	6139      	str	r1, [r7, #16]
 8003600:	4629      	mov	r1, r5
 8003602:	eb63 0301 	sbc.w	r3, r3, r1
 8003606:	617b      	str	r3, [r7, #20]
 8003608:	f04f 0200 	mov.w	r2, #0
 800360c:	f04f 0300 	mov.w	r3, #0
 8003610:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003614:	4659      	mov	r1, fp
 8003616:	018b      	lsls	r3, r1, #6
 8003618:	4651      	mov	r1, sl
 800361a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800361e:	4651      	mov	r1, sl
 8003620:	018a      	lsls	r2, r1, #6
 8003622:	4651      	mov	r1, sl
 8003624:	ebb2 0801 	subs.w	r8, r2, r1
 8003628:	4659      	mov	r1, fp
 800362a:	eb63 0901 	sbc.w	r9, r3, r1
 800362e:	f04f 0200 	mov.w	r2, #0
 8003632:	f04f 0300 	mov.w	r3, #0
 8003636:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800363a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800363e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003642:	4690      	mov	r8, r2
 8003644:	4699      	mov	r9, r3
 8003646:	4623      	mov	r3, r4
 8003648:	eb18 0303 	adds.w	r3, r8, r3
 800364c:	60bb      	str	r3, [r7, #8]
 800364e:	462b      	mov	r3, r5
 8003650:	eb49 0303 	adc.w	r3, r9, r3
 8003654:	60fb      	str	r3, [r7, #12]
 8003656:	f04f 0200 	mov.w	r2, #0
 800365a:	f04f 0300 	mov.w	r3, #0
 800365e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003662:	4629      	mov	r1, r5
 8003664:	024b      	lsls	r3, r1, #9
 8003666:	4621      	mov	r1, r4
 8003668:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800366c:	4621      	mov	r1, r4
 800366e:	024a      	lsls	r2, r1, #9
 8003670:	4610      	mov	r0, r2
 8003672:	4619      	mov	r1, r3
 8003674:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003676:	2200      	movs	r2, #0
 8003678:	62bb      	str	r3, [r7, #40]	; 0x28
 800367a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800367c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003680:	f7fc fe0e 	bl	80002a0 <__aeabi_uldivmod>
 8003684:	4602      	mov	r2, r0
 8003686:	460b      	mov	r3, r1
 8003688:	4613      	mov	r3, r2
 800368a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800368c:	e058      	b.n	8003740 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800368e:	4b38      	ldr	r3, [pc, #224]	; (8003770 <HAL_RCC_GetSysClockFreq+0x200>)
 8003690:	685b      	ldr	r3, [r3, #4]
 8003692:	099b      	lsrs	r3, r3, #6
 8003694:	2200      	movs	r2, #0
 8003696:	4618      	mov	r0, r3
 8003698:	4611      	mov	r1, r2
 800369a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800369e:	623b      	str	r3, [r7, #32]
 80036a0:	2300      	movs	r3, #0
 80036a2:	627b      	str	r3, [r7, #36]	; 0x24
 80036a4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80036a8:	4642      	mov	r2, r8
 80036aa:	464b      	mov	r3, r9
 80036ac:	f04f 0000 	mov.w	r0, #0
 80036b0:	f04f 0100 	mov.w	r1, #0
 80036b4:	0159      	lsls	r1, r3, #5
 80036b6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80036ba:	0150      	lsls	r0, r2, #5
 80036bc:	4602      	mov	r2, r0
 80036be:	460b      	mov	r3, r1
 80036c0:	4641      	mov	r1, r8
 80036c2:	ebb2 0a01 	subs.w	sl, r2, r1
 80036c6:	4649      	mov	r1, r9
 80036c8:	eb63 0b01 	sbc.w	fp, r3, r1
 80036cc:	f04f 0200 	mov.w	r2, #0
 80036d0:	f04f 0300 	mov.w	r3, #0
 80036d4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80036d8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80036dc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80036e0:	ebb2 040a 	subs.w	r4, r2, sl
 80036e4:	eb63 050b 	sbc.w	r5, r3, fp
 80036e8:	f04f 0200 	mov.w	r2, #0
 80036ec:	f04f 0300 	mov.w	r3, #0
 80036f0:	00eb      	lsls	r3, r5, #3
 80036f2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80036f6:	00e2      	lsls	r2, r4, #3
 80036f8:	4614      	mov	r4, r2
 80036fa:	461d      	mov	r5, r3
 80036fc:	4643      	mov	r3, r8
 80036fe:	18e3      	adds	r3, r4, r3
 8003700:	603b      	str	r3, [r7, #0]
 8003702:	464b      	mov	r3, r9
 8003704:	eb45 0303 	adc.w	r3, r5, r3
 8003708:	607b      	str	r3, [r7, #4]
 800370a:	f04f 0200 	mov.w	r2, #0
 800370e:	f04f 0300 	mov.w	r3, #0
 8003712:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003716:	4629      	mov	r1, r5
 8003718:	028b      	lsls	r3, r1, #10
 800371a:	4621      	mov	r1, r4
 800371c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003720:	4621      	mov	r1, r4
 8003722:	028a      	lsls	r2, r1, #10
 8003724:	4610      	mov	r0, r2
 8003726:	4619      	mov	r1, r3
 8003728:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800372a:	2200      	movs	r2, #0
 800372c:	61bb      	str	r3, [r7, #24]
 800372e:	61fa      	str	r2, [r7, #28]
 8003730:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003734:	f7fc fdb4 	bl	80002a0 <__aeabi_uldivmod>
 8003738:	4602      	mov	r2, r0
 800373a:	460b      	mov	r3, r1
 800373c:	4613      	mov	r3, r2
 800373e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003740:	4b0b      	ldr	r3, [pc, #44]	; (8003770 <HAL_RCC_GetSysClockFreq+0x200>)
 8003742:	685b      	ldr	r3, [r3, #4]
 8003744:	0c1b      	lsrs	r3, r3, #16
 8003746:	f003 0303 	and.w	r3, r3, #3
 800374a:	3301      	adds	r3, #1
 800374c:	005b      	lsls	r3, r3, #1
 800374e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003750:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003752:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003754:	fbb2 f3f3 	udiv	r3, r2, r3
 8003758:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800375a:	e002      	b.n	8003762 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800375c:	4b05      	ldr	r3, [pc, #20]	; (8003774 <HAL_RCC_GetSysClockFreq+0x204>)
 800375e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003760:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003762:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003764:	4618      	mov	r0, r3
 8003766:	3750      	adds	r7, #80	; 0x50
 8003768:	46bd      	mov	sp, r7
 800376a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800376e:	bf00      	nop
 8003770:	40023800 	.word	0x40023800
 8003774:	00f42400 	.word	0x00f42400
 8003778:	007a1200 	.word	0x007a1200

0800377c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800377c:	b480      	push	{r7}
 800377e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003780:	4b03      	ldr	r3, [pc, #12]	; (8003790 <HAL_RCC_GetHCLKFreq+0x14>)
 8003782:	681b      	ldr	r3, [r3, #0]
}
 8003784:	4618      	mov	r0, r3
 8003786:	46bd      	mov	sp, r7
 8003788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378c:	4770      	bx	lr
 800378e:	bf00      	nop
 8003790:	20000000 	.word	0x20000000

08003794 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003798:	f7ff fff0 	bl	800377c <HAL_RCC_GetHCLKFreq>
 800379c:	4602      	mov	r2, r0
 800379e:	4b05      	ldr	r3, [pc, #20]	; (80037b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80037a0:	689b      	ldr	r3, [r3, #8]
 80037a2:	0a9b      	lsrs	r3, r3, #10
 80037a4:	f003 0307 	and.w	r3, r3, #7
 80037a8:	4903      	ldr	r1, [pc, #12]	; (80037b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80037aa:	5ccb      	ldrb	r3, [r1, r3]
 80037ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037b0:	4618      	mov	r0, r3
 80037b2:	bd80      	pop	{r7, pc}
 80037b4:	40023800 	.word	0x40023800
 80037b8:	080052fc 	.word	0x080052fc

080037bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80037c0:	f7ff ffdc 	bl	800377c <HAL_RCC_GetHCLKFreq>
 80037c4:	4602      	mov	r2, r0
 80037c6:	4b05      	ldr	r3, [pc, #20]	; (80037dc <HAL_RCC_GetPCLK2Freq+0x20>)
 80037c8:	689b      	ldr	r3, [r3, #8]
 80037ca:	0b5b      	lsrs	r3, r3, #13
 80037cc:	f003 0307 	and.w	r3, r3, #7
 80037d0:	4903      	ldr	r1, [pc, #12]	; (80037e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80037d2:	5ccb      	ldrb	r3, [r1, r3]
 80037d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037d8:	4618      	mov	r0, r3
 80037da:	bd80      	pop	{r7, pc}
 80037dc:	40023800 	.word	0x40023800
 80037e0:	080052fc 	.word	0x080052fc

080037e4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b082      	sub	sp, #8
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d101      	bne.n	80037f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80037f2:	2301      	movs	r3, #1
 80037f4:	e03f      	b.n	8003876 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037fc:	b2db      	uxtb	r3, r3
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d106      	bne.n	8003810 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2200      	movs	r2, #0
 8003806:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800380a:	6878      	ldr	r0, [r7, #4]
 800380c:	f7fd f98a 	bl	8000b24 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2224      	movs	r2, #36	; 0x24
 8003814:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	68da      	ldr	r2, [r3, #12]
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003826:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003828:	6878      	ldr	r0, [r7, #4]
 800382a:	f000 f929 	bl	8003a80 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	691a      	ldr	r2, [r3, #16]
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800383c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	695a      	ldr	r2, [r3, #20]
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800384c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	68da      	ldr	r2, [r3, #12]
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800385c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2200      	movs	r2, #0
 8003862:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2220      	movs	r2, #32
 8003868:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2220      	movs	r2, #32
 8003870:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003874:	2300      	movs	r3, #0
}
 8003876:	4618      	mov	r0, r3
 8003878:	3708      	adds	r7, #8
 800387a:	46bd      	mov	sp, r7
 800387c:	bd80      	pop	{r7, pc}

0800387e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800387e:	b580      	push	{r7, lr}
 8003880:	b08a      	sub	sp, #40	; 0x28
 8003882:	af02      	add	r7, sp, #8
 8003884:	60f8      	str	r0, [r7, #12]
 8003886:	60b9      	str	r1, [r7, #8]
 8003888:	603b      	str	r3, [r7, #0]
 800388a:	4613      	mov	r3, r2
 800388c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800388e:	2300      	movs	r3, #0
 8003890:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003898:	b2db      	uxtb	r3, r3
 800389a:	2b20      	cmp	r3, #32
 800389c:	d17c      	bne.n	8003998 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800389e:	68bb      	ldr	r3, [r7, #8]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d002      	beq.n	80038aa <HAL_UART_Transmit+0x2c>
 80038a4:	88fb      	ldrh	r3, [r7, #6]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d101      	bne.n	80038ae <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80038aa:	2301      	movs	r3, #1
 80038ac:	e075      	b.n	800399a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038b4:	2b01      	cmp	r3, #1
 80038b6:	d101      	bne.n	80038bc <HAL_UART_Transmit+0x3e>
 80038b8:	2302      	movs	r3, #2
 80038ba:	e06e      	b.n	800399a <HAL_UART_Transmit+0x11c>
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	2201      	movs	r2, #1
 80038c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	2200      	movs	r2, #0
 80038c8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	2221      	movs	r2, #33	; 0x21
 80038ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80038d2:	f7fd ffe9 	bl	80018a8 <HAL_GetTick>
 80038d6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	88fa      	ldrh	r2, [r7, #6]
 80038dc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	88fa      	ldrh	r2, [r7, #6]
 80038e2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	689b      	ldr	r3, [r3, #8]
 80038e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038ec:	d108      	bne.n	8003900 <HAL_UART_Transmit+0x82>
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	691b      	ldr	r3, [r3, #16]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d104      	bne.n	8003900 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80038f6:	2300      	movs	r3, #0
 80038f8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80038fa:	68bb      	ldr	r3, [r7, #8]
 80038fc:	61bb      	str	r3, [r7, #24]
 80038fe:	e003      	b.n	8003908 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003900:	68bb      	ldr	r3, [r7, #8]
 8003902:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003904:	2300      	movs	r3, #0
 8003906:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	2200      	movs	r2, #0
 800390c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003910:	e02a      	b.n	8003968 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	9300      	str	r3, [sp, #0]
 8003916:	697b      	ldr	r3, [r7, #20]
 8003918:	2200      	movs	r2, #0
 800391a:	2180      	movs	r1, #128	; 0x80
 800391c:	68f8      	ldr	r0, [r7, #12]
 800391e:	f000 f840 	bl	80039a2 <UART_WaitOnFlagUntilTimeout>
 8003922:	4603      	mov	r3, r0
 8003924:	2b00      	cmp	r3, #0
 8003926:	d001      	beq.n	800392c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003928:	2303      	movs	r3, #3
 800392a:	e036      	b.n	800399a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800392c:	69fb      	ldr	r3, [r7, #28]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d10b      	bne.n	800394a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003932:	69bb      	ldr	r3, [r7, #24]
 8003934:	881b      	ldrh	r3, [r3, #0]
 8003936:	461a      	mov	r2, r3
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003940:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003942:	69bb      	ldr	r3, [r7, #24]
 8003944:	3302      	adds	r3, #2
 8003946:	61bb      	str	r3, [r7, #24]
 8003948:	e007      	b.n	800395a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800394a:	69fb      	ldr	r3, [r7, #28]
 800394c:	781a      	ldrb	r2, [r3, #0]
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003954:	69fb      	ldr	r3, [r7, #28]
 8003956:	3301      	adds	r3, #1
 8003958:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800395e:	b29b      	uxth	r3, r3
 8003960:	3b01      	subs	r3, #1
 8003962:	b29a      	uxth	r2, r3
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800396c:	b29b      	uxth	r3, r3
 800396e:	2b00      	cmp	r3, #0
 8003970:	d1cf      	bne.n	8003912 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	9300      	str	r3, [sp, #0]
 8003976:	697b      	ldr	r3, [r7, #20]
 8003978:	2200      	movs	r2, #0
 800397a:	2140      	movs	r1, #64	; 0x40
 800397c:	68f8      	ldr	r0, [r7, #12]
 800397e:	f000 f810 	bl	80039a2 <UART_WaitOnFlagUntilTimeout>
 8003982:	4603      	mov	r3, r0
 8003984:	2b00      	cmp	r3, #0
 8003986:	d001      	beq.n	800398c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003988:	2303      	movs	r3, #3
 800398a:	e006      	b.n	800399a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	2220      	movs	r2, #32
 8003990:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003994:	2300      	movs	r3, #0
 8003996:	e000      	b.n	800399a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003998:	2302      	movs	r3, #2
  }
}
 800399a:	4618      	mov	r0, r3
 800399c:	3720      	adds	r7, #32
 800399e:	46bd      	mov	sp, r7
 80039a0:	bd80      	pop	{r7, pc}

080039a2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80039a2:	b580      	push	{r7, lr}
 80039a4:	b090      	sub	sp, #64	; 0x40
 80039a6:	af00      	add	r7, sp, #0
 80039a8:	60f8      	str	r0, [r7, #12]
 80039aa:	60b9      	str	r1, [r7, #8]
 80039ac:	603b      	str	r3, [r7, #0]
 80039ae:	4613      	mov	r3, r2
 80039b0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80039b2:	e050      	b.n	8003a56 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80039b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80039ba:	d04c      	beq.n	8003a56 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80039bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d007      	beq.n	80039d2 <UART_WaitOnFlagUntilTimeout+0x30>
 80039c2:	f7fd ff71 	bl	80018a8 <HAL_GetTick>
 80039c6:	4602      	mov	r2, r0
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	1ad3      	subs	r3, r2, r3
 80039cc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80039ce:	429a      	cmp	r2, r3
 80039d0:	d241      	bcs.n	8003a56 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	330c      	adds	r3, #12
 80039d8:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039dc:	e853 3f00 	ldrex	r3, [r3]
 80039e0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80039e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039e4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80039e8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	330c      	adds	r3, #12
 80039f0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80039f2:	637a      	str	r2, [r7, #52]	; 0x34
 80039f4:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039f6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80039f8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80039fa:	e841 2300 	strex	r3, r2, [r1]
 80039fe:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003a00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d1e5      	bne.n	80039d2 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	3314      	adds	r3, #20
 8003a0c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a0e:	697b      	ldr	r3, [r7, #20]
 8003a10:	e853 3f00 	ldrex	r3, [r3]
 8003a14:	613b      	str	r3, [r7, #16]
   return(result);
 8003a16:	693b      	ldr	r3, [r7, #16]
 8003a18:	f023 0301 	bic.w	r3, r3, #1
 8003a1c:	63bb      	str	r3, [r7, #56]	; 0x38
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	3314      	adds	r3, #20
 8003a24:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003a26:	623a      	str	r2, [r7, #32]
 8003a28:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a2a:	69f9      	ldr	r1, [r7, #28]
 8003a2c:	6a3a      	ldr	r2, [r7, #32]
 8003a2e:	e841 2300 	strex	r3, r2, [r1]
 8003a32:	61bb      	str	r3, [r7, #24]
   return(result);
 8003a34:	69bb      	ldr	r3, [r7, #24]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d1e5      	bne.n	8003a06 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	2220      	movs	r2, #32
 8003a3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	2220      	movs	r2, #32
 8003a46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003a52:	2303      	movs	r3, #3
 8003a54:	e00f      	b.n	8003a76 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	681a      	ldr	r2, [r3, #0]
 8003a5c:	68bb      	ldr	r3, [r7, #8]
 8003a5e:	4013      	ands	r3, r2
 8003a60:	68ba      	ldr	r2, [r7, #8]
 8003a62:	429a      	cmp	r2, r3
 8003a64:	bf0c      	ite	eq
 8003a66:	2301      	moveq	r3, #1
 8003a68:	2300      	movne	r3, #0
 8003a6a:	b2db      	uxtb	r3, r3
 8003a6c:	461a      	mov	r2, r3
 8003a6e:	79fb      	ldrb	r3, [r7, #7]
 8003a70:	429a      	cmp	r2, r3
 8003a72:	d09f      	beq.n	80039b4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003a74:	2300      	movs	r3, #0
}
 8003a76:	4618      	mov	r0, r3
 8003a78:	3740      	adds	r7, #64	; 0x40
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	bd80      	pop	{r7, pc}
	...

08003a80 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003a80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a84:	b0c0      	sub	sp, #256	; 0x100
 8003a86:	af00      	add	r7, sp, #0
 8003a88:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	691b      	ldr	r3, [r3, #16]
 8003a94:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003a98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a9c:	68d9      	ldr	r1, [r3, #12]
 8003a9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003aa2:	681a      	ldr	r2, [r3, #0]
 8003aa4:	ea40 0301 	orr.w	r3, r0, r1
 8003aa8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003aaa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003aae:	689a      	ldr	r2, [r3, #8]
 8003ab0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ab4:	691b      	ldr	r3, [r3, #16]
 8003ab6:	431a      	orrs	r2, r3
 8003ab8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003abc:	695b      	ldr	r3, [r3, #20]
 8003abe:	431a      	orrs	r2, r3
 8003ac0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ac4:	69db      	ldr	r3, [r3, #28]
 8003ac6:	4313      	orrs	r3, r2
 8003ac8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003acc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	68db      	ldr	r3, [r3, #12]
 8003ad4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003ad8:	f021 010c 	bic.w	r1, r1, #12
 8003adc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ae0:	681a      	ldr	r2, [r3, #0]
 8003ae2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003ae6:	430b      	orrs	r3, r1
 8003ae8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003aea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	695b      	ldr	r3, [r3, #20]
 8003af2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003af6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003afa:	6999      	ldr	r1, [r3, #24]
 8003afc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b00:	681a      	ldr	r2, [r3, #0]
 8003b02:	ea40 0301 	orr.w	r3, r0, r1
 8003b06:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003b08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b0c:	681a      	ldr	r2, [r3, #0]
 8003b0e:	4b8f      	ldr	r3, [pc, #572]	; (8003d4c <UART_SetConfig+0x2cc>)
 8003b10:	429a      	cmp	r2, r3
 8003b12:	d005      	beq.n	8003b20 <UART_SetConfig+0xa0>
 8003b14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b18:	681a      	ldr	r2, [r3, #0]
 8003b1a:	4b8d      	ldr	r3, [pc, #564]	; (8003d50 <UART_SetConfig+0x2d0>)
 8003b1c:	429a      	cmp	r2, r3
 8003b1e:	d104      	bne.n	8003b2a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003b20:	f7ff fe4c 	bl	80037bc <HAL_RCC_GetPCLK2Freq>
 8003b24:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003b28:	e003      	b.n	8003b32 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003b2a:	f7ff fe33 	bl	8003794 <HAL_RCC_GetPCLK1Freq>
 8003b2e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003b32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b36:	69db      	ldr	r3, [r3, #28]
 8003b38:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b3c:	f040 810c 	bne.w	8003d58 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003b40:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003b44:	2200      	movs	r2, #0
 8003b46:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003b4a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003b4e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003b52:	4622      	mov	r2, r4
 8003b54:	462b      	mov	r3, r5
 8003b56:	1891      	adds	r1, r2, r2
 8003b58:	65b9      	str	r1, [r7, #88]	; 0x58
 8003b5a:	415b      	adcs	r3, r3
 8003b5c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003b5e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003b62:	4621      	mov	r1, r4
 8003b64:	eb12 0801 	adds.w	r8, r2, r1
 8003b68:	4629      	mov	r1, r5
 8003b6a:	eb43 0901 	adc.w	r9, r3, r1
 8003b6e:	f04f 0200 	mov.w	r2, #0
 8003b72:	f04f 0300 	mov.w	r3, #0
 8003b76:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003b7a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003b7e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003b82:	4690      	mov	r8, r2
 8003b84:	4699      	mov	r9, r3
 8003b86:	4623      	mov	r3, r4
 8003b88:	eb18 0303 	adds.w	r3, r8, r3
 8003b8c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003b90:	462b      	mov	r3, r5
 8003b92:	eb49 0303 	adc.w	r3, r9, r3
 8003b96:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003b9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b9e:	685b      	ldr	r3, [r3, #4]
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003ba6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003baa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003bae:	460b      	mov	r3, r1
 8003bb0:	18db      	adds	r3, r3, r3
 8003bb2:	653b      	str	r3, [r7, #80]	; 0x50
 8003bb4:	4613      	mov	r3, r2
 8003bb6:	eb42 0303 	adc.w	r3, r2, r3
 8003bba:	657b      	str	r3, [r7, #84]	; 0x54
 8003bbc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003bc0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003bc4:	f7fc fb6c 	bl	80002a0 <__aeabi_uldivmod>
 8003bc8:	4602      	mov	r2, r0
 8003bca:	460b      	mov	r3, r1
 8003bcc:	4b61      	ldr	r3, [pc, #388]	; (8003d54 <UART_SetConfig+0x2d4>)
 8003bce:	fba3 2302 	umull	r2, r3, r3, r2
 8003bd2:	095b      	lsrs	r3, r3, #5
 8003bd4:	011c      	lsls	r4, r3, #4
 8003bd6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003bda:	2200      	movs	r2, #0
 8003bdc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003be0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003be4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003be8:	4642      	mov	r2, r8
 8003bea:	464b      	mov	r3, r9
 8003bec:	1891      	adds	r1, r2, r2
 8003bee:	64b9      	str	r1, [r7, #72]	; 0x48
 8003bf0:	415b      	adcs	r3, r3
 8003bf2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003bf4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003bf8:	4641      	mov	r1, r8
 8003bfa:	eb12 0a01 	adds.w	sl, r2, r1
 8003bfe:	4649      	mov	r1, r9
 8003c00:	eb43 0b01 	adc.w	fp, r3, r1
 8003c04:	f04f 0200 	mov.w	r2, #0
 8003c08:	f04f 0300 	mov.w	r3, #0
 8003c0c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003c10:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003c14:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003c18:	4692      	mov	sl, r2
 8003c1a:	469b      	mov	fp, r3
 8003c1c:	4643      	mov	r3, r8
 8003c1e:	eb1a 0303 	adds.w	r3, sl, r3
 8003c22:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003c26:	464b      	mov	r3, r9
 8003c28:	eb4b 0303 	adc.w	r3, fp, r3
 8003c2c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003c30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c34:	685b      	ldr	r3, [r3, #4]
 8003c36:	2200      	movs	r2, #0
 8003c38:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003c3c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003c40:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003c44:	460b      	mov	r3, r1
 8003c46:	18db      	adds	r3, r3, r3
 8003c48:	643b      	str	r3, [r7, #64]	; 0x40
 8003c4a:	4613      	mov	r3, r2
 8003c4c:	eb42 0303 	adc.w	r3, r2, r3
 8003c50:	647b      	str	r3, [r7, #68]	; 0x44
 8003c52:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003c56:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003c5a:	f7fc fb21 	bl	80002a0 <__aeabi_uldivmod>
 8003c5e:	4602      	mov	r2, r0
 8003c60:	460b      	mov	r3, r1
 8003c62:	4611      	mov	r1, r2
 8003c64:	4b3b      	ldr	r3, [pc, #236]	; (8003d54 <UART_SetConfig+0x2d4>)
 8003c66:	fba3 2301 	umull	r2, r3, r3, r1
 8003c6a:	095b      	lsrs	r3, r3, #5
 8003c6c:	2264      	movs	r2, #100	; 0x64
 8003c6e:	fb02 f303 	mul.w	r3, r2, r3
 8003c72:	1acb      	subs	r3, r1, r3
 8003c74:	00db      	lsls	r3, r3, #3
 8003c76:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003c7a:	4b36      	ldr	r3, [pc, #216]	; (8003d54 <UART_SetConfig+0x2d4>)
 8003c7c:	fba3 2302 	umull	r2, r3, r3, r2
 8003c80:	095b      	lsrs	r3, r3, #5
 8003c82:	005b      	lsls	r3, r3, #1
 8003c84:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003c88:	441c      	add	r4, r3
 8003c8a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003c8e:	2200      	movs	r2, #0
 8003c90:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003c94:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003c98:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003c9c:	4642      	mov	r2, r8
 8003c9e:	464b      	mov	r3, r9
 8003ca0:	1891      	adds	r1, r2, r2
 8003ca2:	63b9      	str	r1, [r7, #56]	; 0x38
 8003ca4:	415b      	adcs	r3, r3
 8003ca6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003ca8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003cac:	4641      	mov	r1, r8
 8003cae:	1851      	adds	r1, r2, r1
 8003cb0:	6339      	str	r1, [r7, #48]	; 0x30
 8003cb2:	4649      	mov	r1, r9
 8003cb4:	414b      	adcs	r3, r1
 8003cb6:	637b      	str	r3, [r7, #52]	; 0x34
 8003cb8:	f04f 0200 	mov.w	r2, #0
 8003cbc:	f04f 0300 	mov.w	r3, #0
 8003cc0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003cc4:	4659      	mov	r1, fp
 8003cc6:	00cb      	lsls	r3, r1, #3
 8003cc8:	4651      	mov	r1, sl
 8003cca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003cce:	4651      	mov	r1, sl
 8003cd0:	00ca      	lsls	r2, r1, #3
 8003cd2:	4610      	mov	r0, r2
 8003cd4:	4619      	mov	r1, r3
 8003cd6:	4603      	mov	r3, r0
 8003cd8:	4642      	mov	r2, r8
 8003cda:	189b      	adds	r3, r3, r2
 8003cdc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003ce0:	464b      	mov	r3, r9
 8003ce2:	460a      	mov	r2, r1
 8003ce4:	eb42 0303 	adc.w	r3, r2, r3
 8003ce8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003cec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cf0:	685b      	ldr	r3, [r3, #4]
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003cf8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003cfc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003d00:	460b      	mov	r3, r1
 8003d02:	18db      	adds	r3, r3, r3
 8003d04:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d06:	4613      	mov	r3, r2
 8003d08:	eb42 0303 	adc.w	r3, r2, r3
 8003d0c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d0e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003d12:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003d16:	f7fc fac3 	bl	80002a0 <__aeabi_uldivmod>
 8003d1a:	4602      	mov	r2, r0
 8003d1c:	460b      	mov	r3, r1
 8003d1e:	4b0d      	ldr	r3, [pc, #52]	; (8003d54 <UART_SetConfig+0x2d4>)
 8003d20:	fba3 1302 	umull	r1, r3, r3, r2
 8003d24:	095b      	lsrs	r3, r3, #5
 8003d26:	2164      	movs	r1, #100	; 0x64
 8003d28:	fb01 f303 	mul.w	r3, r1, r3
 8003d2c:	1ad3      	subs	r3, r2, r3
 8003d2e:	00db      	lsls	r3, r3, #3
 8003d30:	3332      	adds	r3, #50	; 0x32
 8003d32:	4a08      	ldr	r2, [pc, #32]	; (8003d54 <UART_SetConfig+0x2d4>)
 8003d34:	fba2 2303 	umull	r2, r3, r2, r3
 8003d38:	095b      	lsrs	r3, r3, #5
 8003d3a:	f003 0207 	and.w	r2, r3, #7
 8003d3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	4422      	add	r2, r4
 8003d46:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003d48:	e105      	b.n	8003f56 <UART_SetConfig+0x4d6>
 8003d4a:	bf00      	nop
 8003d4c:	40011000 	.word	0x40011000
 8003d50:	40011400 	.word	0x40011400
 8003d54:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003d58:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003d62:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003d66:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003d6a:	4642      	mov	r2, r8
 8003d6c:	464b      	mov	r3, r9
 8003d6e:	1891      	adds	r1, r2, r2
 8003d70:	6239      	str	r1, [r7, #32]
 8003d72:	415b      	adcs	r3, r3
 8003d74:	627b      	str	r3, [r7, #36]	; 0x24
 8003d76:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003d7a:	4641      	mov	r1, r8
 8003d7c:	1854      	adds	r4, r2, r1
 8003d7e:	4649      	mov	r1, r9
 8003d80:	eb43 0501 	adc.w	r5, r3, r1
 8003d84:	f04f 0200 	mov.w	r2, #0
 8003d88:	f04f 0300 	mov.w	r3, #0
 8003d8c:	00eb      	lsls	r3, r5, #3
 8003d8e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003d92:	00e2      	lsls	r2, r4, #3
 8003d94:	4614      	mov	r4, r2
 8003d96:	461d      	mov	r5, r3
 8003d98:	4643      	mov	r3, r8
 8003d9a:	18e3      	adds	r3, r4, r3
 8003d9c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003da0:	464b      	mov	r3, r9
 8003da2:	eb45 0303 	adc.w	r3, r5, r3
 8003da6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003daa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003dae:	685b      	ldr	r3, [r3, #4]
 8003db0:	2200      	movs	r2, #0
 8003db2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003db6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003dba:	f04f 0200 	mov.w	r2, #0
 8003dbe:	f04f 0300 	mov.w	r3, #0
 8003dc2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003dc6:	4629      	mov	r1, r5
 8003dc8:	008b      	lsls	r3, r1, #2
 8003dca:	4621      	mov	r1, r4
 8003dcc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003dd0:	4621      	mov	r1, r4
 8003dd2:	008a      	lsls	r2, r1, #2
 8003dd4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003dd8:	f7fc fa62 	bl	80002a0 <__aeabi_uldivmod>
 8003ddc:	4602      	mov	r2, r0
 8003dde:	460b      	mov	r3, r1
 8003de0:	4b60      	ldr	r3, [pc, #384]	; (8003f64 <UART_SetConfig+0x4e4>)
 8003de2:	fba3 2302 	umull	r2, r3, r3, r2
 8003de6:	095b      	lsrs	r3, r3, #5
 8003de8:	011c      	lsls	r4, r3, #4
 8003dea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003dee:	2200      	movs	r2, #0
 8003df0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003df4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003df8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003dfc:	4642      	mov	r2, r8
 8003dfe:	464b      	mov	r3, r9
 8003e00:	1891      	adds	r1, r2, r2
 8003e02:	61b9      	str	r1, [r7, #24]
 8003e04:	415b      	adcs	r3, r3
 8003e06:	61fb      	str	r3, [r7, #28]
 8003e08:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003e0c:	4641      	mov	r1, r8
 8003e0e:	1851      	adds	r1, r2, r1
 8003e10:	6139      	str	r1, [r7, #16]
 8003e12:	4649      	mov	r1, r9
 8003e14:	414b      	adcs	r3, r1
 8003e16:	617b      	str	r3, [r7, #20]
 8003e18:	f04f 0200 	mov.w	r2, #0
 8003e1c:	f04f 0300 	mov.w	r3, #0
 8003e20:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003e24:	4659      	mov	r1, fp
 8003e26:	00cb      	lsls	r3, r1, #3
 8003e28:	4651      	mov	r1, sl
 8003e2a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003e2e:	4651      	mov	r1, sl
 8003e30:	00ca      	lsls	r2, r1, #3
 8003e32:	4610      	mov	r0, r2
 8003e34:	4619      	mov	r1, r3
 8003e36:	4603      	mov	r3, r0
 8003e38:	4642      	mov	r2, r8
 8003e3a:	189b      	adds	r3, r3, r2
 8003e3c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003e40:	464b      	mov	r3, r9
 8003e42:	460a      	mov	r2, r1
 8003e44:	eb42 0303 	adc.w	r3, r2, r3
 8003e48:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003e4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e50:	685b      	ldr	r3, [r3, #4]
 8003e52:	2200      	movs	r2, #0
 8003e54:	67bb      	str	r3, [r7, #120]	; 0x78
 8003e56:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003e58:	f04f 0200 	mov.w	r2, #0
 8003e5c:	f04f 0300 	mov.w	r3, #0
 8003e60:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003e64:	4649      	mov	r1, r9
 8003e66:	008b      	lsls	r3, r1, #2
 8003e68:	4641      	mov	r1, r8
 8003e6a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003e6e:	4641      	mov	r1, r8
 8003e70:	008a      	lsls	r2, r1, #2
 8003e72:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003e76:	f7fc fa13 	bl	80002a0 <__aeabi_uldivmod>
 8003e7a:	4602      	mov	r2, r0
 8003e7c:	460b      	mov	r3, r1
 8003e7e:	4b39      	ldr	r3, [pc, #228]	; (8003f64 <UART_SetConfig+0x4e4>)
 8003e80:	fba3 1302 	umull	r1, r3, r3, r2
 8003e84:	095b      	lsrs	r3, r3, #5
 8003e86:	2164      	movs	r1, #100	; 0x64
 8003e88:	fb01 f303 	mul.w	r3, r1, r3
 8003e8c:	1ad3      	subs	r3, r2, r3
 8003e8e:	011b      	lsls	r3, r3, #4
 8003e90:	3332      	adds	r3, #50	; 0x32
 8003e92:	4a34      	ldr	r2, [pc, #208]	; (8003f64 <UART_SetConfig+0x4e4>)
 8003e94:	fba2 2303 	umull	r2, r3, r2, r3
 8003e98:	095b      	lsrs	r3, r3, #5
 8003e9a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e9e:	441c      	add	r4, r3
 8003ea0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	673b      	str	r3, [r7, #112]	; 0x70
 8003ea8:	677a      	str	r2, [r7, #116]	; 0x74
 8003eaa:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003eae:	4642      	mov	r2, r8
 8003eb0:	464b      	mov	r3, r9
 8003eb2:	1891      	adds	r1, r2, r2
 8003eb4:	60b9      	str	r1, [r7, #8]
 8003eb6:	415b      	adcs	r3, r3
 8003eb8:	60fb      	str	r3, [r7, #12]
 8003eba:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003ebe:	4641      	mov	r1, r8
 8003ec0:	1851      	adds	r1, r2, r1
 8003ec2:	6039      	str	r1, [r7, #0]
 8003ec4:	4649      	mov	r1, r9
 8003ec6:	414b      	adcs	r3, r1
 8003ec8:	607b      	str	r3, [r7, #4]
 8003eca:	f04f 0200 	mov.w	r2, #0
 8003ece:	f04f 0300 	mov.w	r3, #0
 8003ed2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003ed6:	4659      	mov	r1, fp
 8003ed8:	00cb      	lsls	r3, r1, #3
 8003eda:	4651      	mov	r1, sl
 8003edc:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003ee0:	4651      	mov	r1, sl
 8003ee2:	00ca      	lsls	r2, r1, #3
 8003ee4:	4610      	mov	r0, r2
 8003ee6:	4619      	mov	r1, r3
 8003ee8:	4603      	mov	r3, r0
 8003eea:	4642      	mov	r2, r8
 8003eec:	189b      	adds	r3, r3, r2
 8003eee:	66bb      	str	r3, [r7, #104]	; 0x68
 8003ef0:	464b      	mov	r3, r9
 8003ef2:	460a      	mov	r2, r1
 8003ef4:	eb42 0303 	adc.w	r3, r2, r3
 8003ef8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003efa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003efe:	685b      	ldr	r3, [r3, #4]
 8003f00:	2200      	movs	r2, #0
 8003f02:	663b      	str	r3, [r7, #96]	; 0x60
 8003f04:	667a      	str	r2, [r7, #100]	; 0x64
 8003f06:	f04f 0200 	mov.w	r2, #0
 8003f0a:	f04f 0300 	mov.w	r3, #0
 8003f0e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003f12:	4649      	mov	r1, r9
 8003f14:	008b      	lsls	r3, r1, #2
 8003f16:	4641      	mov	r1, r8
 8003f18:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003f1c:	4641      	mov	r1, r8
 8003f1e:	008a      	lsls	r2, r1, #2
 8003f20:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003f24:	f7fc f9bc 	bl	80002a0 <__aeabi_uldivmod>
 8003f28:	4602      	mov	r2, r0
 8003f2a:	460b      	mov	r3, r1
 8003f2c:	4b0d      	ldr	r3, [pc, #52]	; (8003f64 <UART_SetConfig+0x4e4>)
 8003f2e:	fba3 1302 	umull	r1, r3, r3, r2
 8003f32:	095b      	lsrs	r3, r3, #5
 8003f34:	2164      	movs	r1, #100	; 0x64
 8003f36:	fb01 f303 	mul.w	r3, r1, r3
 8003f3a:	1ad3      	subs	r3, r2, r3
 8003f3c:	011b      	lsls	r3, r3, #4
 8003f3e:	3332      	adds	r3, #50	; 0x32
 8003f40:	4a08      	ldr	r2, [pc, #32]	; (8003f64 <UART_SetConfig+0x4e4>)
 8003f42:	fba2 2303 	umull	r2, r3, r2, r3
 8003f46:	095b      	lsrs	r3, r3, #5
 8003f48:	f003 020f 	and.w	r2, r3, #15
 8003f4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	4422      	add	r2, r4
 8003f54:	609a      	str	r2, [r3, #8]
}
 8003f56:	bf00      	nop
 8003f58:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003f62:	bf00      	nop
 8003f64:	51eb851f 	.word	0x51eb851f

08003f68 <__assert_func>:
 8003f68:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8003f6a:	4614      	mov	r4, r2
 8003f6c:	461a      	mov	r2, r3
 8003f6e:	4b09      	ldr	r3, [pc, #36]	; (8003f94 <__assert_func+0x2c>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	4605      	mov	r5, r0
 8003f74:	68d8      	ldr	r0, [r3, #12]
 8003f76:	b14c      	cbz	r4, 8003f8c <__assert_func+0x24>
 8003f78:	4b07      	ldr	r3, [pc, #28]	; (8003f98 <__assert_func+0x30>)
 8003f7a:	9100      	str	r1, [sp, #0]
 8003f7c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8003f80:	4906      	ldr	r1, [pc, #24]	; (8003f9c <__assert_func+0x34>)
 8003f82:	462b      	mov	r3, r5
 8003f84:	f000 f814 	bl	8003fb0 <fiprintf>
 8003f88:	f000 fbfe 	bl	8004788 <abort>
 8003f8c:	4b04      	ldr	r3, [pc, #16]	; (8003fa0 <__assert_func+0x38>)
 8003f8e:	461c      	mov	r4, r3
 8003f90:	e7f3      	b.n	8003f7a <__assert_func+0x12>
 8003f92:	bf00      	nop
 8003f94:	20000018 	.word	0x20000018
 8003f98:	0800532e 	.word	0x0800532e
 8003f9c:	0800533b 	.word	0x0800533b
 8003fa0:	08005369 	.word	0x08005369

08003fa4 <__errno>:
 8003fa4:	4b01      	ldr	r3, [pc, #4]	; (8003fac <__errno+0x8>)
 8003fa6:	6818      	ldr	r0, [r3, #0]
 8003fa8:	4770      	bx	lr
 8003faa:	bf00      	nop
 8003fac:	20000018 	.word	0x20000018

08003fb0 <fiprintf>:
 8003fb0:	b40e      	push	{r1, r2, r3}
 8003fb2:	b503      	push	{r0, r1, lr}
 8003fb4:	4601      	mov	r1, r0
 8003fb6:	ab03      	add	r3, sp, #12
 8003fb8:	4805      	ldr	r0, [pc, #20]	; (8003fd0 <fiprintf+0x20>)
 8003fba:	f853 2b04 	ldr.w	r2, [r3], #4
 8003fbe:	6800      	ldr	r0, [r0, #0]
 8003fc0:	9301      	str	r3, [sp, #4]
 8003fc2:	f000 f85d 	bl	8004080 <_vfiprintf_r>
 8003fc6:	b002      	add	sp, #8
 8003fc8:	f85d eb04 	ldr.w	lr, [sp], #4
 8003fcc:	b003      	add	sp, #12
 8003fce:	4770      	bx	lr
 8003fd0:	20000018 	.word	0x20000018

08003fd4 <__libc_init_array>:
 8003fd4:	b570      	push	{r4, r5, r6, lr}
 8003fd6:	4d0d      	ldr	r5, [pc, #52]	; (800400c <__libc_init_array+0x38>)
 8003fd8:	4c0d      	ldr	r4, [pc, #52]	; (8004010 <__libc_init_array+0x3c>)
 8003fda:	1b64      	subs	r4, r4, r5
 8003fdc:	10a4      	asrs	r4, r4, #2
 8003fde:	2600      	movs	r6, #0
 8003fe0:	42a6      	cmp	r6, r4
 8003fe2:	d109      	bne.n	8003ff8 <__libc_init_array+0x24>
 8003fe4:	4d0b      	ldr	r5, [pc, #44]	; (8004014 <__libc_init_array+0x40>)
 8003fe6:	4c0c      	ldr	r4, [pc, #48]	; (8004018 <__libc_init_array+0x44>)
 8003fe8:	f000 ffe2 	bl	8004fb0 <_init>
 8003fec:	1b64      	subs	r4, r4, r5
 8003fee:	10a4      	asrs	r4, r4, #2
 8003ff0:	2600      	movs	r6, #0
 8003ff2:	42a6      	cmp	r6, r4
 8003ff4:	d105      	bne.n	8004002 <__libc_init_array+0x2e>
 8003ff6:	bd70      	pop	{r4, r5, r6, pc}
 8003ff8:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ffc:	4798      	blx	r3
 8003ffe:	3601      	adds	r6, #1
 8004000:	e7ee      	b.n	8003fe0 <__libc_init_array+0xc>
 8004002:	f855 3b04 	ldr.w	r3, [r5], #4
 8004006:	4798      	blx	r3
 8004008:	3601      	adds	r6, #1
 800400a:	e7f2      	b.n	8003ff2 <__libc_init_array+0x1e>
 800400c:	0800540c 	.word	0x0800540c
 8004010:	0800540c 	.word	0x0800540c
 8004014:	0800540c 	.word	0x0800540c
 8004018:	08005410 	.word	0x08005410

0800401c <memset>:
 800401c:	4402      	add	r2, r0
 800401e:	4603      	mov	r3, r0
 8004020:	4293      	cmp	r3, r2
 8004022:	d100      	bne.n	8004026 <memset+0xa>
 8004024:	4770      	bx	lr
 8004026:	f803 1b01 	strb.w	r1, [r3], #1
 800402a:	e7f9      	b.n	8004020 <memset+0x4>

0800402c <__sfputc_r>:
 800402c:	6893      	ldr	r3, [r2, #8]
 800402e:	3b01      	subs	r3, #1
 8004030:	2b00      	cmp	r3, #0
 8004032:	b410      	push	{r4}
 8004034:	6093      	str	r3, [r2, #8]
 8004036:	da08      	bge.n	800404a <__sfputc_r+0x1e>
 8004038:	6994      	ldr	r4, [r2, #24]
 800403a:	42a3      	cmp	r3, r4
 800403c:	db01      	blt.n	8004042 <__sfputc_r+0x16>
 800403e:	290a      	cmp	r1, #10
 8004040:	d103      	bne.n	800404a <__sfputc_r+0x1e>
 8004042:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004046:	f000 badf 	b.w	8004608 <__swbuf_r>
 800404a:	6813      	ldr	r3, [r2, #0]
 800404c:	1c58      	adds	r0, r3, #1
 800404e:	6010      	str	r0, [r2, #0]
 8004050:	7019      	strb	r1, [r3, #0]
 8004052:	4608      	mov	r0, r1
 8004054:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004058:	4770      	bx	lr

0800405a <__sfputs_r>:
 800405a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800405c:	4606      	mov	r6, r0
 800405e:	460f      	mov	r7, r1
 8004060:	4614      	mov	r4, r2
 8004062:	18d5      	adds	r5, r2, r3
 8004064:	42ac      	cmp	r4, r5
 8004066:	d101      	bne.n	800406c <__sfputs_r+0x12>
 8004068:	2000      	movs	r0, #0
 800406a:	e007      	b.n	800407c <__sfputs_r+0x22>
 800406c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004070:	463a      	mov	r2, r7
 8004072:	4630      	mov	r0, r6
 8004074:	f7ff ffda 	bl	800402c <__sfputc_r>
 8004078:	1c43      	adds	r3, r0, #1
 800407a:	d1f3      	bne.n	8004064 <__sfputs_r+0xa>
 800407c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004080 <_vfiprintf_r>:
 8004080:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004084:	460d      	mov	r5, r1
 8004086:	b09d      	sub	sp, #116	; 0x74
 8004088:	4614      	mov	r4, r2
 800408a:	4698      	mov	r8, r3
 800408c:	4606      	mov	r6, r0
 800408e:	b118      	cbz	r0, 8004098 <_vfiprintf_r+0x18>
 8004090:	6983      	ldr	r3, [r0, #24]
 8004092:	b90b      	cbnz	r3, 8004098 <_vfiprintf_r+0x18>
 8004094:	f000 fc9a 	bl	80049cc <__sinit>
 8004098:	4b89      	ldr	r3, [pc, #548]	; (80042c0 <_vfiprintf_r+0x240>)
 800409a:	429d      	cmp	r5, r3
 800409c:	d11b      	bne.n	80040d6 <_vfiprintf_r+0x56>
 800409e:	6875      	ldr	r5, [r6, #4]
 80040a0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80040a2:	07d9      	lsls	r1, r3, #31
 80040a4:	d405      	bmi.n	80040b2 <_vfiprintf_r+0x32>
 80040a6:	89ab      	ldrh	r3, [r5, #12]
 80040a8:	059a      	lsls	r2, r3, #22
 80040aa:	d402      	bmi.n	80040b2 <_vfiprintf_r+0x32>
 80040ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80040ae:	f000 fd2b 	bl	8004b08 <__retarget_lock_acquire_recursive>
 80040b2:	89ab      	ldrh	r3, [r5, #12]
 80040b4:	071b      	lsls	r3, r3, #28
 80040b6:	d501      	bpl.n	80040bc <_vfiprintf_r+0x3c>
 80040b8:	692b      	ldr	r3, [r5, #16]
 80040ba:	b9eb      	cbnz	r3, 80040f8 <_vfiprintf_r+0x78>
 80040bc:	4629      	mov	r1, r5
 80040be:	4630      	mov	r0, r6
 80040c0:	f000 faf4 	bl	80046ac <__swsetup_r>
 80040c4:	b1c0      	cbz	r0, 80040f8 <_vfiprintf_r+0x78>
 80040c6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80040c8:	07dc      	lsls	r4, r3, #31
 80040ca:	d50e      	bpl.n	80040ea <_vfiprintf_r+0x6a>
 80040cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80040d0:	b01d      	add	sp, #116	; 0x74
 80040d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80040d6:	4b7b      	ldr	r3, [pc, #492]	; (80042c4 <_vfiprintf_r+0x244>)
 80040d8:	429d      	cmp	r5, r3
 80040da:	d101      	bne.n	80040e0 <_vfiprintf_r+0x60>
 80040dc:	68b5      	ldr	r5, [r6, #8]
 80040de:	e7df      	b.n	80040a0 <_vfiprintf_r+0x20>
 80040e0:	4b79      	ldr	r3, [pc, #484]	; (80042c8 <_vfiprintf_r+0x248>)
 80040e2:	429d      	cmp	r5, r3
 80040e4:	bf08      	it	eq
 80040e6:	68f5      	ldreq	r5, [r6, #12]
 80040e8:	e7da      	b.n	80040a0 <_vfiprintf_r+0x20>
 80040ea:	89ab      	ldrh	r3, [r5, #12]
 80040ec:	0598      	lsls	r0, r3, #22
 80040ee:	d4ed      	bmi.n	80040cc <_vfiprintf_r+0x4c>
 80040f0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80040f2:	f000 fd0a 	bl	8004b0a <__retarget_lock_release_recursive>
 80040f6:	e7e9      	b.n	80040cc <_vfiprintf_r+0x4c>
 80040f8:	2300      	movs	r3, #0
 80040fa:	9309      	str	r3, [sp, #36]	; 0x24
 80040fc:	2320      	movs	r3, #32
 80040fe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004102:	f8cd 800c 	str.w	r8, [sp, #12]
 8004106:	2330      	movs	r3, #48	; 0x30
 8004108:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80042cc <_vfiprintf_r+0x24c>
 800410c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004110:	f04f 0901 	mov.w	r9, #1
 8004114:	4623      	mov	r3, r4
 8004116:	469a      	mov	sl, r3
 8004118:	f813 2b01 	ldrb.w	r2, [r3], #1
 800411c:	b10a      	cbz	r2, 8004122 <_vfiprintf_r+0xa2>
 800411e:	2a25      	cmp	r2, #37	; 0x25
 8004120:	d1f9      	bne.n	8004116 <_vfiprintf_r+0x96>
 8004122:	ebba 0b04 	subs.w	fp, sl, r4
 8004126:	d00b      	beq.n	8004140 <_vfiprintf_r+0xc0>
 8004128:	465b      	mov	r3, fp
 800412a:	4622      	mov	r2, r4
 800412c:	4629      	mov	r1, r5
 800412e:	4630      	mov	r0, r6
 8004130:	f7ff ff93 	bl	800405a <__sfputs_r>
 8004134:	3001      	adds	r0, #1
 8004136:	f000 80aa 	beq.w	800428e <_vfiprintf_r+0x20e>
 800413a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800413c:	445a      	add	r2, fp
 800413e:	9209      	str	r2, [sp, #36]	; 0x24
 8004140:	f89a 3000 	ldrb.w	r3, [sl]
 8004144:	2b00      	cmp	r3, #0
 8004146:	f000 80a2 	beq.w	800428e <_vfiprintf_r+0x20e>
 800414a:	2300      	movs	r3, #0
 800414c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004150:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004154:	f10a 0a01 	add.w	sl, sl, #1
 8004158:	9304      	str	r3, [sp, #16]
 800415a:	9307      	str	r3, [sp, #28]
 800415c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004160:	931a      	str	r3, [sp, #104]	; 0x68
 8004162:	4654      	mov	r4, sl
 8004164:	2205      	movs	r2, #5
 8004166:	f814 1b01 	ldrb.w	r1, [r4], #1
 800416a:	4858      	ldr	r0, [pc, #352]	; (80042cc <_vfiprintf_r+0x24c>)
 800416c:	f7fc f848 	bl	8000200 <memchr>
 8004170:	9a04      	ldr	r2, [sp, #16]
 8004172:	b9d8      	cbnz	r0, 80041ac <_vfiprintf_r+0x12c>
 8004174:	06d1      	lsls	r1, r2, #27
 8004176:	bf44      	itt	mi
 8004178:	2320      	movmi	r3, #32
 800417a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800417e:	0713      	lsls	r3, r2, #28
 8004180:	bf44      	itt	mi
 8004182:	232b      	movmi	r3, #43	; 0x2b
 8004184:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004188:	f89a 3000 	ldrb.w	r3, [sl]
 800418c:	2b2a      	cmp	r3, #42	; 0x2a
 800418e:	d015      	beq.n	80041bc <_vfiprintf_r+0x13c>
 8004190:	9a07      	ldr	r2, [sp, #28]
 8004192:	4654      	mov	r4, sl
 8004194:	2000      	movs	r0, #0
 8004196:	f04f 0c0a 	mov.w	ip, #10
 800419a:	4621      	mov	r1, r4
 800419c:	f811 3b01 	ldrb.w	r3, [r1], #1
 80041a0:	3b30      	subs	r3, #48	; 0x30
 80041a2:	2b09      	cmp	r3, #9
 80041a4:	d94e      	bls.n	8004244 <_vfiprintf_r+0x1c4>
 80041a6:	b1b0      	cbz	r0, 80041d6 <_vfiprintf_r+0x156>
 80041a8:	9207      	str	r2, [sp, #28]
 80041aa:	e014      	b.n	80041d6 <_vfiprintf_r+0x156>
 80041ac:	eba0 0308 	sub.w	r3, r0, r8
 80041b0:	fa09 f303 	lsl.w	r3, r9, r3
 80041b4:	4313      	orrs	r3, r2
 80041b6:	9304      	str	r3, [sp, #16]
 80041b8:	46a2      	mov	sl, r4
 80041ba:	e7d2      	b.n	8004162 <_vfiprintf_r+0xe2>
 80041bc:	9b03      	ldr	r3, [sp, #12]
 80041be:	1d19      	adds	r1, r3, #4
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	9103      	str	r1, [sp, #12]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	bfbb      	ittet	lt
 80041c8:	425b      	neglt	r3, r3
 80041ca:	f042 0202 	orrlt.w	r2, r2, #2
 80041ce:	9307      	strge	r3, [sp, #28]
 80041d0:	9307      	strlt	r3, [sp, #28]
 80041d2:	bfb8      	it	lt
 80041d4:	9204      	strlt	r2, [sp, #16]
 80041d6:	7823      	ldrb	r3, [r4, #0]
 80041d8:	2b2e      	cmp	r3, #46	; 0x2e
 80041da:	d10c      	bne.n	80041f6 <_vfiprintf_r+0x176>
 80041dc:	7863      	ldrb	r3, [r4, #1]
 80041de:	2b2a      	cmp	r3, #42	; 0x2a
 80041e0:	d135      	bne.n	800424e <_vfiprintf_r+0x1ce>
 80041e2:	9b03      	ldr	r3, [sp, #12]
 80041e4:	1d1a      	adds	r2, r3, #4
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	9203      	str	r2, [sp, #12]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	bfb8      	it	lt
 80041ee:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80041f2:	3402      	adds	r4, #2
 80041f4:	9305      	str	r3, [sp, #20]
 80041f6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80042dc <_vfiprintf_r+0x25c>
 80041fa:	7821      	ldrb	r1, [r4, #0]
 80041fc:	2203      	movs	r2, #3
 80041fe:	4650      	mov	r0, sl
 8004200:	f7fb fffe 	bl	8000200 <memchr>
 8004204:	b140      	cbz	r0, 8004218 <_vfiprintf_r+0x198>
 8004206:	2340      	movs	r3, #64	; 0x40
 8004208:	eba0 000a 	sub.w	r0, r0, sl
 800420c:	fa03 f000 	lsl.w	r0, r3, r0
 8004210:	9b04      	ldr	r3, [sp, #16]
 8004212:	4303      	orrs	r3, r0
 8004214:	3401      	adds	r4, #1
 8004216:	9304      	str	r3, [sp, #16]
 8004218:	f814 1b01 	ldrb.w	r1, [r4], #1
 800421c:	482c      	ldr	r0, [pc, #176]	; (80042d0 <_vfiprintf_r+0x250>)
 800421e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004222:	2206      	movs	r2, #6
 8004224:	f7fb ffec 	bl	8000200 <memchr>
 8004228:	2800      	cmp	r0, #0
 800422a:	d03f      	beq.n	80042ac <_vfiprintf_r+0x22c>
 800422c:	4b29      	ldr	r3, [pc, #164]	; (80042d4 <_vfiprintf_r+0x254>)
 800422e:	bb1b      	cbnz	r3, 8004278 <_vfiprintf_r+0x1f8>
 8004230:	9b03      	ldr	r3, [sp, #12]
 8004232:	3307      	adds	r3, #7
 8004234:	f023 0307 	bic.w	r3, r3, #7
 8004238:	3308      	adds	r3, #8
 800423a:	9303      	str	r3, [sp, #12]
 800423c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800423e:	443b      	add	r3, r7
 8004240:	9309      	str	r3, [sp, #36]	; 0x24
 8004242:	e767      	b.n	8004114 <_vfiprintf_r+0x94>
 8004244:	fb0c 3202 	mla	r2, ip, r2, r3
 8004248:	460c      	mov	r4, r1
 800424a:	2001      	movs	r0, #1
 800424c:	e7a5      	b.n	800419a <_vfiprintf_r+0x11a>
 800424e:	2300      	movs	r3, #0
 8004250:	3401      	adds	r4, #1
 8004252:	9305      	str	r3, [sp, #20]
 8004254:	4619      	mov	r1, r3
 8004256:	f04f 0c0a 	mov.w	ip, #10
 800425a:	4620      	mov	r0, r4
 800425c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004260:	3a30      	subs	r2, #48	; 0x30
 8004262:	2a09      	cmp	r2, #9
 8004264:	d903      	bls.n	800426e <_vfiprintf_r+0x1ee>
 8004266:	2b00      	cmp	r3, #0
 8004268:	d0c5      	beq.n	80041f6 <_vfiprintf_r+0x176>
 800426a:	9105      	str	r1, [sp, #20]
 800426c:	e7c3      	b.n	80041f6 <_vfiprintf_r+0x176>
 800426e:	fb0c 2101 	mla	r1, ip, r1, r2
 8004272:	4604      	mov	r4, r0
 8004274:	2301      	movs	r3, #1
 8004276:	e7f0      	b.n	800425a <_vfiprintf_r+0x1da>
 8004278:	ab03      	add	r3, sp, #12
 800427a:	9300      	str	r3, [sp, #0]
 800427c:	462a      	mov	r2, r5
 800427e:	4b16      	ldr	r3, [pc, #88]	; (80042d8 <_vfiprintf_r+0x258>)
 8004280:	a904      	add	r1, sp, #16
 8004282:	4630      	mov	r0, r6
 8004284:	f3af 8000 	nop.w
 8004288:	4607      	mov	r7, r0
 800428a:	1c78      	adds	r0, r7, #1
 800428c:	d1d6      	bne.n	800423c <_vfiprintf_r+0x1bc>
 800428e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004290:	07d9      	lsls	r1, r3, #31
 8004292:	d405      	bmi.n	80042a0 <_vfiprintf_r+0x220>
 8004294:	89ab      	ldrh	r3, [r5, #12]
 8004296:	059a      	lsls	r2, r3, #22
 8004298:	d402      	bmi.n	80042a0 <_vfiprintf_r+0x220>
 800429a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800429c:	f000 fc35 	bl	8004b0a <__retarget_lock_release_recursive>
 80042a0:	89ab      	ldrh	r3, [r5, #12]
 80042a2:	065b      	lsls	r3, r3, #25
 80042a4:	f53f af12 	bmi.w	80040cc <_vfiprintf_r+0x4c>
 80042a8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80042aa:	e711      	b.n	80040d0 <_vfiprintf_r+0x50>
 80042ac:	ab03      	add	r3, sp, #12
 80042ae:	9300      	str	r3, [sp, #0]
 80042b0:	462a      	mov	r2, r5
 80042b2:	4b09      	ldr	r3, [pc, #36]	; (80042d8 <_vfiprintf_r+0x258>)
 80042b4:	a904      	add	r1, sp, #16
 80042b6:	4630      	mov	r0, r6
 80042b8:	f000 f880 	bl	80043bc <_printf_i>
 80042bc:	e7e4      	b.n	8004288 <_vfiprintf_r+0x208>
 80042be:	bf00      	nop
 80042c0:	080053c4 	.word	0x080053c4
 80042c4:	080053e4 	.word	0x080053e4
 80042c8:	080053a4 	.word	0x080053a4
 80042cc:	08005370 	.word	0x08005370
 80042d0:	0800537a 	.word	0x0800537a
 80042d4:	00000000 	.word	0x00000000
 80042d8:	0800405b 	.word	0x0800405b
 80042dc:	08005376 	.word	0x08005376

080042e0 <_printf_common>:
 80042e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80042e4:	4616      	mov	r6, r2
 80042e6:	4699      	mov	r9, r3
 80042e8:	688a      	ldr	r2, [r1, #8]
 80042ea:	690b      	ldr	r3, [r1, #16]
 80042ec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80042f0:	4293      	cmp	r3, r2
 80042f2:	bfb8      	it	lt
 80042f4:	4613      	movlt	r3, r2
 80042f6:	6033      	str	r3, [r6, #0]
 80042f8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80042fc:	4607      	mov	r7, r0
 80042fe:	460c      	mov	r4, r1
 8004300:	b10a      	cbz	r2, 8004306 <_printf_common+0x26>
 8004302:	3301      	adds	r3, #1
 8004304:	6033      	str	r3, [r6, #0]
 8004306:	6823      	ldr	r3, [r4, #0]
 8004308:	0699      	lsls	r1, r3, #26
 800430a:	bf42      	ittt	mi
 800430c:	6833      	ldrmi	r3, [r6, #0]
 800430e:	3302      	addmi	r3, #2
 8004310:	6033      	strmi	r3, [r6, #0]
 8004312:	6825      	ldr	r5, [r4, #0]
 8004314:	f015 0506 	ands.w	r5, r5, #6
 8004318:	d106      	bne.n	8004328 <_printf_common+0x48>
 800431a:	f104 0a19 	add.w	sl, r4, #25
 800431e:	68e3      	ldr	r3, [r4, #12]
 8004320:	6832      	ldr	r2, [r6, #0]
 8004322:	1a9b      	subs	r3, r3, r2
 8004324:	42ab      	cmp	r3, r5
 8004326:	dc26      	bgt.n	8004376 <_printf_common+0x96>
 8004328:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800432c:	1e13      	subs	r3, r2, #0
 800432e:	6822      	ldr	r2, [r4, #0]
 8004330:	bf18      	it	ne
 8004332:	2301      	movne	r3, #1
 8004334:	0692      	lsls	r2, r2, #26
 8004336:	d42b      	bmi.n	8004390 <_printf_common+0xb0>
 8004338:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800433c:	4649      	mov	r1, r9
 800433e:	4638      	mov	r0, r7
 8004340:	47c0      	blx	r8
 8004342:	3001      	adds	r0, #1
 8004344:	d01e      	beq.n	8004384 <_printf_common+0xa4>
 8004346:	6823      	ldr	r3, [r4, #0]
 8004348:	68e5      	ldr	r5, [r4, #12]
 800434a:	6832      	ldr	r2, [r6, #0]
 800434c:	f003 0306 	and.w	r3, r3, #6
 8004350:	2b04      	cmp	r3, #4
 8004352:	bf08      	it	eq
 8004354:	1aad      	subeq	r5, r5, r2
 8004356:	68a3      	ldr	r3, [r4, #8]
 8004358:	6922      	ldr	r2, [r4, #16]
 800435a:	bf0c      	ite	eq
 800435c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004360:	2500      	movne	r5, #0
 8004362:	4293      	cmp	r3, r2
 8004364:	bfc4      	itt	gt
 8004366:	1a9b      	subgt	r3, r3, r2
 8004368:	18ed      	addgt	r5, r5, r3
 800436a:	2600      	movs	r6, #0
 800436c:	341a      	adds	r4, #26
 800436e:	42b5      	cmp	r5, r6
 8004370:	d11a      	bne.n	80043a8 <_printf_common+0xc8>
 8004372:	2000      	movs	r0, #0
 8004374:	e008      	b.n	8004388 <_printf_common+0xa8>
 8004376:	2301      	movs	r3, #1
 8004378:	4652      	mov	r2, sl
 800437a:	4649      	mov	r1, r9
 800437c:	4638      	mov	r0, r7
 800437e:	47c0      	blx	r8
 8004380:	3001      	adds	r0, #1
 8004382:	d103      	bne.n	800438c <_printf_common+0xac>
 8004384:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004388:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800438c:	3501      	adds	r5, #1
 800438e:	e7c6      	b.n	800431e <_printf_common+0x3e>
 8004390:	18e1      	adds	r1, r4, r3
 8004392:	1c5a      	adds	r2, r3, #1
 8004394:	2030      	movs	r0, #48	; 0x30
 8004396:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800439a:	4422      	add	r2, r4
 800439c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80043a0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80043a4:	3302      	adds	r3, #2
 80043a6:	e7c7      	b.n	8004338 <_printf_common+0x58>
 80043a8:	2301      	movs	r3, #1
 80043aa:	4622      	mov	r2, r4
 80043ac:	4649      	mov	r1, r9
 80043ae:	4638      	mov	r0, r7
 80043b0:	47c0      	blx	r8
 80043b2:	3001      	adds	r0, #1
 80043b4:	d0e6      	beq.n	8004384 <_printf_common+0xa4>
 80043b6:	3601      	adds	r6, #1
 80043b8:	e7d9      	b.n	800436e <_printf_common+0x8e>
	...

080043bc <_printf_i>:
 80043bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80043c0:	7e0f      	ldrb	r7, [r1, #24]
 80043c2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80043c4:	2f78      	cmp	r7, #120	; 0x78
 80043c6:	4691      	mov	r9, r2
 80043c8:	4680      	mov	r8, r0
 80043ca:	460c      	mov	r4, r1
 80043cc:	469a      	mov	sl, r3
 80043ce:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80043d2:	d807      	bhi.n	80043e4 <_printf_i+0x28>
 80043d4:	2f62      	cmp	r7, #98	; 0x62
 80043d6:	d80a      	bhi.n	80043ee <_printf_i+0x32>
 80043d8:	2f00      	cmp	r7, #0
 80043da:	f000 80d8 	beq.w	800458e <_printf_i+0x1d2>
 80043de:	2f58      	cmp	r7, #88	; 0x58
 80043e0:	f000 80a3 	beq.w	800452a <_printf_i+0x16e>
 80043e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80043e8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80043ec:	e03a      	b.n	8004464 <_printf_i+0xa8>
 80043ee:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80043f2:	2b15      	cmp	r3, #21
 80043f4:	d8f6      	bhi.n	80043e4 <_printf_i+0x28>
 80043f6:	a101      	add	r1, pc, #4	; (adr r1, 80043fc <_printf_i+0x40>)
 80043f8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80043fc:	08004455 	.word	0x08004455
 8004400:	08004469 	.word	0x08004469
 8004404:	080043e5 	.word	0x080043e5
 8004408:	080043e5 	.word	0x080043e5
 800440c:	080043e5 	.word	0x080043e5
 8004410:	080043e5 	.word	0x080043e5
 8004414:	08004469 	.word	0x08004469
 8004418:	080043e5 	.word	0x080043e5
 800441c:	080043e5 	.word	0x080043e5
 8004420:	080043e5 	.word	0x080043e5
 8004424:	080043e5 	.word	0x080043e5
 8004428:	08004575 	.word	0x08004575
 800442c:	08004499 	.word	0x08004499
 8004430:	08004557 	.word	0x08004557
 8004434:	080043e5 	.word	0x080043e5
 8004438:	080043e5 	.word	0x080043e5
 800443c:	08004597 	.word	0x08004597
 8004440:	080043e5 	.word	0x080043e5
 8004444:	08004499 	.word	0x08004499
 8004448:	080043e5 	.word	0x080043e5
 800444c:	080043e5 	.word	0x080043e5
 8004450:	0800455f 	.word	0x0800455f
 8004454:	682b      	ldr	r3, [r5, #0]
 8004456:	1d1a      	adds	r2, r3, #4
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	602a      	str	r2, [r5, #0]
 800445c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004460:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004464:	2301      	movs	r3, #1
 8004466:	e0a3      	b.n	80045b0 <_printf_i+0x1f4>
 8004468:	6820      	ldr	r0, [r4, #0]
 800446a:	6829      	ldr	r1, [r5, #0]
 800446c:	0606      	lsls	r6, r0, #24
 800446e:	f101 0304 	add.w	r3, r1, #4
 8004472:	d50a      	bpl.n	800448a <_printf_i+0xce>
 8004474:	680e      	ldr	r6, [r1, #0]
 8004476:	602b      	str	r3, [r5, #0]
 8004478:	2e00      	cmp	r6, #0
 800447a:	da03      	bge.n	8004484 <_printf_i+0xc8>
 800447c:	232d      	movs	r3, #45	; 0x2d
 800447e:	4276      	negs	r6, r6
 8004480:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004484:	485e      	ldr	r0, [pc, #376]	; (8004600 <_printf_i+0x244>)
 8004486:	230a      	movs	r3, #10
 8004488:	e019      	b.n	80044be <_printf_i+0x102>
 800448a:	680e      	ldr	r6, [r1, #0]
 800448c:	602b      	str	r3, [r5, #0]
 800448e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004492:	bf18      	it	ne
 8004494:	b236      	sxthne	r6, r6
 8004496:	e7ef      	b.n	8004478 <_printf_i+0xbc>
 8004498:	682b      	ldr	r3, [r5, #0]
 800449a:	6820      	ldr	r0, [r4, #0]
 800449c:	1d19      	adds	r1, r3, #4
 800449e:	6029      	str	r1, [r5, #0]
 80044a0:	0601      	lsls	r1, r0, #24
 80044a2:	d501      	bpl.n	80044a8 <_printf_i+0xec>
 80044a4:	681e      	ldr	r6, [r3, #0]
 80044a6:	e002      	b.n	80044ae <_printf_i+0xf2>
 80044a8:	0646      	lsls	r6, r0, #25
 80044aa:	d5fb      	bpl.n	80044a4 <_printf_i+0xe8>
 80044ac:	881e      	ldrh	r6, [r3, #0]
 80044ae:	4854      	ldr	r0, [pc, #336]	; (8004600 <_printf_i+0x244>)
 80044b0:	2f6f      	cmp	r7, #111	; 0x6f
 80044b2:	bf0c      	ite	eq
 80044b4:	2308      	moveq	r3, #8
 80044b6:	230a      	movne	r3, #10
 80044b8:	2100      	movs	r1, #0
 80044ba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80044be:	6865      	ldr	r5, [r4, #4]
 80044c0:	60a5      	str	r5, [r4, #8]
 80044c2:	2d00      	cmp	r5, #0
 80044c4:	bfa2      	ittt	ge
 80044c6:	6821      	ldrge	r1, [r4, #0]
 80044c8:	f021 0104 	bicge.w	r1, r1, #4
 80044cc:	6021      	strge	r1, [r4, #0]
 80044ce:	b90e      	cbnz	r6, 80044d4 <_printf_i+0x118>
 80044d0:	2d00      	cmp	r5, #0
 80044d2:	d04d      	beq.n	8004570 <_printf_i+0x1b4>
 80044d4:	4615      	mov	r5, r2
 80044d6:	fbb6 f1f3 	udiv	r1, r6, r3
 80044da:	fb03 6711 	mls	r7, r3, r1, r6
 80044de:	5dc7      	ldrb	r7, [r0, r7]
 80044e0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80044e4:	4637      	mov	r7, r6
 80044e6:	42bb      	cmp	r3, r7
 80044e8:	460e      	mov	r6, r1
 80044ea:	d9f4      	bls.n	80044d6 <_printf_i+0x11a>
 80044ec:	2b08      	cmp	r3, #8
 80044ee:	d10b      	bne.n	8004508 <_printf_i+0x14c>
 80044f0:	6823      	ldr	r3, [r4, #0]
 80044f2:	07de      	lsls	r6, r3, #31
 80044f4:	d508      	bpl.n	8004508 <_printf_i+0x14c>
 80044f6:	6923      	ldr	r3, [r4, #16]
 80044f8:	6861      	ldr	r1, [r4, #4]
 80044fa:	4299      	cmp	r1, r3
 80044fc:	bfde      	ittt	le
 80044fe:	2330      	movle	r3, #48	; 0x30
 8004500:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004504:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8004508:	1b52      	subs	r2, r2, r5
 800450a:	6122      	str	r2, [r4, #16]
 800450c:	f8cd a000 	str.w	sl, [sp]
 8004510:	464b      	mov	r3, r9
 8004512:	aa03      	add	r2, sp, #12
 8004514:	4621      	mov	r1, r4
 8004516:	4640      	mov	r0, r8
 8004518:	f7ff fee2 	bl	80042e0 <_printf_common>
 800451c:	3001      	adds	r0, #1
 800451e:	d14c      	bne.n	80045ba <_printf_i+0x1fe>
 8004520:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004524:	b004      	add	sp, #16
 8004526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800452a:	4835      	ldr	r0, [pc, #212]	; (8004600 <_printf_i+0x244>)
 800452c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004530:	6829      	ldr	r1, [r5, #0]
 8004532:	6823      	ldr	r3, [r4, #0]
 8004534:	f851 6b04 	ldr.w	r6, [r1], #4
 8004538:	6029      	str	r1, [r5, #0]
 800453a:	061d      	lsls	r5, r3, #24
 800453c:	d514      	bpl.n	8004568 <_printf_i+0x1ac>
 800453e:	07df      	lsls	r7, r3, #31
 8004540:	bf44      	itt	mi
 8004542:	f043 0320 	orrmi.w	r3, r3, #32
 8004546:	6023      	strmi	r3, [r4, #0]
 8004548:	b91e      	cbnz	r6, 8004552 <_printf_i+0x196>
 800454a:	6823      	ldr	r3, [r4, #0]
 800454c:	f023 0320 	bic.w	r3, r3, #32
 8004550:	6023      	str	r3, [r4, #0]
 8004552:	2310      	movs	r3, #16
 8004554:	e7b0      	b.n	80044b8 <_printf_i+0xfc>
 8004556:	6823      	ldr	r3, [r4, #0]
 8004558:	f043 0320 	orr.w	r3, r3, #32
 800455c:	6023      	str	r3, [r4, #0]
 800455e:	2378      	movs	r3, #120	; 0x78
 8004560:	4828      	ldr	r0, [pc, #160]	; (8004604 <_printf_i+0x248>)
 8004562:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004566:	e7e3      	b.n	8004530 <_printf_i+0x174>
 8004568:	0659      	lsls	r1, r3, #25
 800456a:	bf48      	it	mi
 800456c:	b2b6      	uxthmi	r6, r6
 800456e:	e7e6      	b.n	800453e <_printf_i+0x182>
 8004570:	4615      	mov	r5, r2
 8004572:	e7bb      	b.n	80044ec <_printf_i+0x130>
 8004574:	682b      	ldr	r3, [r5, #0]
 8004576:	6826      	ldr	r6, [r4, #0]
 8004578:	6961      	ldr	r1, [r4, #20]
 800457a:	1d18      	adds	r0, r3, #4
 800457c:	6028      	str	r0, [r5, #0]
 800457e:	0635      	lsls	r5, r6, #24
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	d501      	bpl.n	8004588 <_printf_i+0x1cc>
 8004584:	6019      	str	r1, [r3, #0]
 8004586:	e002      	b.n	800458e <_printf_i+0x1d2>
 8004588:	0670      	lsls	r0, r6, #25
 800458a:	d5fb      	bpl.n	8004584 <_printf_i+0x1c8>
 800458c:	8019      	strh	r1, [r3, #0]
 800458e:	2300      	movs	r3, #0
 8004590:	6123      	str	r3, [r4, #16]
 8004592:	4615      	mov	r5, r2
 8004594:	e7ba      	b.n	800450c <_printf_i+0x150>
 8004596:	682b      	ldr	r3, [r5, #0]
 8004598:	1d1a      	adds	r2, r3, #4
 800459a:	602a      	str	r2, [r5, #0]
 800459c:	681d      	ldr	r5, [r3, #0]
 800459e:	6862      	ldr	r2, [r4, #4]
 80045a0:	2100      	movs	r1, #0
 80045a2:	4628      	mov	r0, r5
 80045a4:	f7fb fe2c 	bl	8000200 <memchr>
 80045a8:	b108      	cbz	r0, 80045ae <_printf_i+0x1f2>
 80045aa:	1b40      	subs	r0, r0, r5
 80045ac:	6060      	str	r0, [r4, #4]
 80045ae:	6863      	ldr	r3, [r4, #4]
 80045b0:	6123      	str	r3, [r4, #16]
 80045b2:	2300      	movs	r3, #0
 80045b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80045b8:	e7a8      	b.n	800450c <_printf_i+0x150>
 80045ba:	6923      	ldr	r3, [r4, #16]
 80045bc:	462a      	mov	r2, r5
 80045be:	4649      	mov	r1, r9
 80045c0:	4640      	mov	r0, r8
 80045c2:	47d0      	blx	sl
 80045c4:	3001      	adds	r0, #1
 80045c6:	d0ab      	beq.n	8004520 <_printf_i+0x164>
 80045c8:	6823      	ldr	r3, [r4, #0]
 80045ca:	079b      	lsls	r3, r3, #30
 80045cc:	d413      	bmi.n	80045f6 <_printf_i+0x23a>
 80045ce:	68e0      	ldr	r0, [r4, #12]
 80045d0:	9b03      	ldr	r3, [sp, #12]
 80045d2:	4298      	cmp	r0, r3
 80045d4:	bfb8      	it	lt
 80045d6:	4618      	movlt	r0, r3
 80045d8:	e7a4      	b.n	8004524 <_printf_i+0x168>
 80045da:	2301      	movs	r3, #1
 80045dc:	4632      	mov	r2, r6
 80045de:	4649      	mov	r1, r9
 80045e0:	4640      	mov	r0, r8
 80045e2:	47d0      	blx	sl
 80045e4:	3001      	adds	r0, #1
 80045e6:	d09b      	beq.n	8004520 <_printf_i+0x164>
 80045e8:	3501      	adds	r5, #1
 80045ea:	68e3      	ldr	r3, [r4, #12]
 80045ec:	9903      	ldr	r1, [sp, #12]
 80045ee:	1a5b      	subs	r3, r3, r1
 80045f0:	42ab      	cmp	r3, r5
 80045f2:	dcf2      	bgt.n	80045da <_printf_i+0x21e>
 80045f4:	e7eb      	b.n	80045ce <_printf_i+0x212>
 80045f6:	2500      	movs	r5, #0
 80045f8:	f104 0619 	add.w	r6, r4, #25
 80045fc:	e7f5      	b.n	80045ea <_printf_i+0x22e>
 80045fe:	bf00      	nop
 8004600:	08005381 	.word	0x08005381
 8004604:	08005392 	.word	0x08005392

08004608 <__swbuf_r>:
 8004608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800460a:	460e      	mov	r6, r1
 800460c:	4614      	mov	r4, r2
 800460e:	4605      	mov	r5, r0
 8004610:	b118      	cbz	r0, 800461a <__swbuf_r+0x12>
 8004612:	6983      	ldr	r3, [r0, #24]
 8004614:	b90b      	cbnz	r3, 800461a <__swbuf_r+0x12>
 8004616:	f000 f9d9 	bl	80049cc <__sinit>
 800461a:	4b21      	ldr	r3, [pc, #132]	; (80046a0 <__swbuf_r+0x98>)
 800461c:	429c      	cmp	r4, r3
 800461e:	d12b      	bne.n	8004678 <__swbuf_r+0x70>
 8004620:	686c      	ldr	r4, [r5, #4]
 8004622:	69a3      	ldr	r3, [r4, #24]
 8004624:	60a3      	str	r3, [r4, #8]
 8004626:	89a3      	ldrh	r3, [r4, #12]
 8004628:	071a      	lsls	r2, r3, #28
 800462a:	d52f      	bpl.n	800468c <__swbuf_r+0x84>
 800462c:	6923      	ldr	r3, [r4, #16]
 800462e:	b36b      	cbz	r3, 800468c <__swbuf_r+0x84>
 8004630:	6923      	ldr	r3, [r4, #16]
 8004632:	6820      	ldr	r0, [r4, #0]
 8004634:	1ac0      	subs	r0, r0, r3
 8004636:	6963      	ldr	r3, [r4, #20]
 8004638:	b2f6      	uxtb	r6, r6
 800463a:	4283      	cmp	r3, r0
 800463c:	4637      	mov	r7, r6
 800463e:	dc04      	bgt.n	800464a <__swbuf_r+0x42>
 8004640:	4621      	mov	r1, r4
 8004642:	4628      	mov	r0, r5
 8004644:	f000 f92e 	bl	80048a4 <_fflush_r>
 8004648:	bb30      	cbnz	r0, 8004698 <__swbuf_r+0x90>
 800464a:	68a3      	ldr	r3, [r4, #8]
 800464c:	3b01      	subs	r3, #1
 800464e:	60a3      	str	r3, [r4, #8]
 8004650:	6823      	ldr	r3, [r4, #0]
 8004652:	1c5a      	adds	r2, r3, #1
 8004654:	6022      	str	r2, [r4, #0]
 8004656:	701e      	strb	r6, [r3, #0]
 8004658:	6963      	ldr	r3, [r4, #20]
 800465a:	3001      	adds	r0, #1
 800465c:	4283      	cmp	r3, r0
 800465e:	d004      	beq.n	800466a <__swbuf_r+0x62>
 8004660:	89a3      	ldrh	r3, [r4, #12]
 8004662:	07db      	lsls	r3, r3, #31
 8004664:	d506      	bpl.n	8004674 <__swbuf_r+0x6c>
 8004666:	2e0a      	cmp	r6, #10
 8004668:	d104      	bne.n	8004674 <__swbuf_r+0x6c>
 800466a:	4621      	mov	r1, r4
 800466c:	4628      	mov	r0, r5
 800466e:	f000 f919 	bl	80048a4 <_fflush_r>
 8004672:	b988      	cbnz	r0, 8004698 <__swbuf_r+0x90>
 8004674:	4638      	mov	r0, r7
 8004676:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004678:	4b0a      	ldr	r3, [pc, #40]	; (80046a4 <__swbuf_r+0x9c>)
 800467a:	429c      	cmp	r4, r3
 800467c:	d101      	bne.n	8004682 <__swbuf_r+0x7a>
 800467e:	68ac      	ldr	r4, [r5, #8]
 8004680:	e7cf      	b.n	8004622 <__swbuf_r+0x1a>
 8004682:	4b09      	ldr	r3, [pc, #36]	; (80046a8 <__swbuf_r+0xa0>)
 8004684:	429c      	cmp	r4, r3
 8004686:	bf08      	it	eq
 8004688:	68ec      	ldreq	r4, [r5, #12]
 800468a:	e7ca      	b.n	8004622 <__swbuf_r+0x1a>
 800468c:	4621      	mov	r1, r4
 800468e:	4628      	mov	r0, r5
 8004690:	f000 f80c 	bl	80046ac <__swsetup_r>
 8004694:	2800      	cmp	r0, #0
 8004696:	d0cb      	beq.n	8004630 <__swbuf_r+0x28>
 8004698:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800469c:	e7ea      	b.n	8004674 <__swbuf_r+0x6c>
 800469e:	bf00      	nop
 80046a0:	080053c4 	.word	0x080053c4
 80046a4:	080053e4 	.word	0x080053e4
 80046a8:	080053a4 	.word	0x080053a4

080046ac <__swsetup_r>:
 80046ac:	4b32      	ldr	r3, [pc, #200]	; (8004778 <__swsetup_r+0xcc>)
 80046ae:	b570      	push	{r4, r5, r6, lr}
 80046b0:	681d      	ldr	r5, [r3, #0]
 80046b2:	4606      	mov	r6, r0
 80046b4:	460c      	mov	r4, r1
 80046b6:	b125      	cbz	r5, 80046c2 <__swsetup_r+0x16>
 80046b8:	69ab      	ldr	r3, [r5, #24]
 80046ba:	b913      	cbnz	r3, 80046c2 <__swsetup_r+0x16>
 80046bc:	4628      	mov	r0, r5
 80046be:	f000 f985 	bl	80049cc <__sinit>
 80046c2:	4b2e      	ldr	r3, [pc, #184]	; (800477c <__swsetup_r+0xd0>)
 80046c4:	429c      	cmp	r4, r3
 80046c6:	d10f      	bne.n	80046e8 <__swsetup_r+0x3c>
 80046c8:	686c      	ldr	r4, [r5, #4]
 80046ca:	89a3      	ldrh	r3, [r4, #12]
 80046cc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80046d0:	0719      	lsls	r1, r3, #28
 80046d2:	d42c      	bmi.n	800472e <__swsetup_r+0x82>
 80046d4:	06dd      	lsls	r5, r3, #27
 80046d6:	d411      	bmi.n	80046fc <__swsetup_r+0x50>
 80046d8:	2309      	movs	r3, #9
 80046da:	6033      	str	r3, [r6, #0]
 80046dc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80046e0:	81a3      	strh	r3, [r4, #12]
 80046e2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80046e6:	e03e      	b.n	8004766 <__swsetup_r+0xba>
 80046e8:	4b25      	ldr	r3, [pc, #148]	; (8004780 <__swsetup_r+0xd4>)
 80046ea:	429c      	cmp	r4, r3
 80046ec:	d101      	bne.n	80046f2 <__swsetup_r+0x46>
 80046ee:	68ac      	ldr	r4, [r5, #8]
 80046f0:	e7eb      	b.n	80046ca <__swsetup_r+0x1e>
 80046f2:	4b24      	ldr	r3, [pc, #144]	; (8004784 <__swsetup_r+0xd8>)
 80046f4:	429c      	cmp	r4, r3
 80046f6:	bf08      	it	eq
 80046f8:	68ec      	ldreq	r4, [r5, #12]
 80046fa:	e7e6      	b.n	80046ca <__swsetup_r+0x1e>
 80046fc:	0758      	lsls	r0, r3, #29
 80046fe:	d512      	bpl.n	8004726 <__swsetup_r+0x7a>
 8004700:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004702:	b141      	cbz	r1, 8004716 <__swsetup_r+0x6a>
 8004704:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004708:	4299      	cmp	r1, r3
 800470a:	d002      	beq.n	8004712 <__swsetup_r+0x66>
 800470c:	4630      	mov	r0, r6
 800470e:	f000 fa63 	bl	8004bd8 <_free_r>
 8004712:	2300      	movs	r3, #0
 8004714:	6363      	str	r3, [r4, #52]	; 0x34
 8004716:	89a3      	ldrh	r3, [r4, #12]
 8004718:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800471c:	81a3      	strh	r3, [r4, #12]
 800471e:	2300      	movs	r3, #0
 8004720:	6063      	str	r3, [r4, #4]
 8004722:	6923      	ldr	r3, [r4, #16]
 8004724:	6023      	str	r3, [r4, #0]
 8004726:	89a3      	ldrh	r3, [r4, #12]
 8004728:	f043 0308 	orr.w	r3, r3, #8
 800472c:	81a3      	strh	r3, [r4, #12]
 800472e:	6923      	ldr	r3, [r4, #16]
 8004730:	b94b      	cbnz	r3, 8004746 <__swsetup_r+0x9a>
 8004732:	89a3      	ldrh	r3, [r4, #12]
 8004734:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004738:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800473c:	d003      	beq.n	8004746 <__swsetup_r+0x9a>
 800473e:	4621      	mov	r1, r4
 8004740:	4630      	mov	r0, r6
 8004742:	f000 fa09 	bl	8004b58 <__smakebuf_r>
 8004746:	89a0      	ldrh	r0, [r4, #12]
 8004748:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800474c:	f010 0301 	ands.w	r3, r0, #1
 8004750:	d00a      	beq.n	8004768 <__swsetup_r+0xbc>
 8004752:	2300      	movs	r3, #0
 8004754:	60a3      	str	r3, [r4, #8]
 8004756:	6963      	ldr	r3, [r4, #20]
 8004758:	425b      	negs	r3, r3
 800475a:	61a3      	str	r3, [r4, #24]
 800475c:	6923      	ldr	r3, [r4, #16]
 800475e:	b943      	cbnz	r3, 8004772 <__swsetup_r+0xc6>
 8004760:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004764:	d1ba      	bne.n	80046dc <__swsetup_r+0x30>
 8004766:	bd70      	pop	{r4, r5, r6, pc}
 8004768:	0781      	lsls	r1, r0, #30
 800476a:	bf58      	it	pl
 800476c:	6963      	ldrpl	r3, [r4, #20]
 800476e:	60a3      	str	r3, [r4, #8]
 8004770:	e7f4      	b.n	800475c <__swsetup_r+0xb0>
 8004772:	2000      	movs	r0, #0
 8004774:	e7f7      	b.n	8004766 <__swsetup_r+0xba>
 8004776:	bf00      	nop
 8004778:	20000018 	.word	0x20000018
 800477c:	080053c4 	.word	0x080053c4
 8004780:	080053e4 	.word	0x080053e4
 8004784:	080053a4 	.word	0x080053a4

08004788 <abort>:
 8004788:	b508      	push	{r3, lr}
 800478a:	2006      	movs	r0, #6
 800478c:	f000 fb3c 	bl	8004e08 <raise>
 8004790:	2001      	movs	r0, #1
 8004792:	f7fc fa4f 	bl	8000c34 <_exit>
	...

08004798 <__sflush_r>:
 8004798:	898a      	ldrh	r2, [r1, #12]
 800479a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800479e:	4605      	mov	r5, r0
 80047a0:	0710      	lsls	r0, r2, #28
 80047a2:	460c      	mov	r4, r1
 80047a4:	d458      	bmi.n	8004858 <__sflush_r+0xc0>
 80047a6:	684b      	ldr	r3, [r1, #4]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	dc05      	bgt.n	80047b8 <__sflush_r+0x20>
 80047ac:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	dc02      	bgt.n	80047b8 <__sflush_r+0x20>
 80047b2:	2000      	movs	r0, #0
 80047b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80047b8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80047ba:	2e00      	cmp	r6, #0
 80047bc:	d0f9      	beq.n	80047b2 <__sflush_r+0x1a>
 80047be:	2300      	movs	r3, #0
 80047c0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80047c4:	682f      	ldr	r7, [r5, #0]
 80047c6:	602b      	str	r3, [r5, #0]
 80047c8:	d032      	beq.n	8004830 <__sflush_r+0x98>
 80047ca:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80047cc:	89a3      	ldrh	r3, [r4, #12]
 80047ce:	075a      	lsls	r2, r3, #29
 80047d0:	d505      	bpl.n	80047de <__sflush_r+0x46>
 80047d2:	6863      	ldr	r3, [r4, #4]
 80047d4:	1ac0      	subs	r0, r0, r3
 80047d6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80047d8:	b10b      	cbz	r3, 80047de <__sflush_r+0x46>
 80047da:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80047dc:	1ac0      	subs	r0, r0, r3
 80047de:	2300      	movs	r3, #0
 80047e0:	4602      	mov	r2, r0
 80047e2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80047e4:	6a21      	ldr	r1, [r4, #32]
 80047e6:	4628      	mov	r0, r5
 80047e8:	47b0      	blx	r6
 80047ea:	1c43      	adds	r3, r0, #1
 80047ec:	89a3      	ldrh	r3, [r4, #12]
 80047ee:	d106      	bne.n	80047fe <__sflush_r+0x66>
 80047f0:	6829      	ldr	r1, [r5, #0]
 80047f2:	291d      	cmp	r1, #29
 80047f4:	d82c      	bhi.n	8004850 <__sflush_r+0xb8>
 80047f6:	4a2a      	ldr	r2, [pc, #168]	; (80048a0 <__sflush_r+0x108>)
 80047f8:	40ca      	lsrs	r2, r1
 80047fa:	07d6      	lsls	r6, r2, #31
 80047fc:	d528      	bpl.n	8004850 <__sflush_r+0xb8>
 80047fe:	2200      	movs	r2, #0
 8004800:	6062      	str	r2, [r4, #4]
 8004802:	04d9      	lsls	r1, r3, #19
 8004804:	6922      	ldr	r2, [r4, #16]
 8004806:	6022      	str	r2, [r4, #0]
 8004808:	d504      	bpl.n	8004814 <__sflush_r+0x7c>
 800480a:	1c42      	adds	r2, r0, #1
 800480c:	d101      	bne.n	8004812 <__sflush_r+0x7a>
 800480e:	682b      	ldr	r3, [r5, #0]
 8004810:	b903      	cbnz	r3, 8004814 <__sflush_r+0x7c>
 8004812:	6560      	str	r0, [r4, #84]	; 0x54
 8004814:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004816:	602f      	str	r7, [r5, #0]
 8004818:	2900      	cmp	r1, #0
 800481a:	d0ca      	beq.n	80047b2 <__sflush_r+0x1a>
 800481c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004820:	4299      	cmp	r1, r3
 8004822:	d002      	beq.n	800482a <__sflush_r+0x92>
 8004824:	4628      	mov	r0, r5
 8004826:	f000 f9d7 	bl	8004bd8 <_free_r>
 800482a:	2000      	movs	r0, #0
 800482c:	6360      	str	r0, [r4, #52]	; 0x34
 800482e:	e7c1      	b.n	80047b4 <__sflush_r+0x1c>
 8004830:	6a21      	ldr	r1, [r4, #32]
 8004832:	2301      	movs	r3, #1
 8004834:	4628      	mov	r0, r5
 8004836:	47b0      	blx	r6
 8004838:	1c41      	adds	r1, r0, #1
 800483a:	d1c7      	bne.n	80047cc <__sflush_r+0x34>
 800483c:	682b      	ldr	r3, [r5, #0]
 800483e:	2b00      	cmp	r3, #0
 8004840:	d0c4      	beq.n	80047cc <__sflush_r+0x34>
 8004842:	2b1d      	cmp	r3, #29
 8004844:	d001      	beq.n	800484a <__sflush_r+0xb2>
 8004846:	2b16      	cmp	r3, #22
 8004848:	d101      	bne.n	800484e <__sflush_r+0xb6>
 800484a:	602f      	str	r7, [r5, #0]
 800484c:	e7b1      	b.n	80047b2 <__sflush_r+0x1a>
 800484e:	89a3      	ldrh	r3, [r4, #12]
 8004850:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004854:	81a3      	strh	r3, [r4, #12]
 8004856:	e7ad      	b.n	80047b4 <__sflush_r+0x1c>
 8004858:	690f      	ldr	r7, [r1, #16]
 800485a:	2f00      	cmp	r7, #0
 800485c:	d0a9      	beq.n	80047b2 <__sflush_r+0x1a>
 800485e:	0793      	lsls	r3, r2, #30
 8004860:	680e      	ldr	r6, [r1, #0]
 8004862:	bf08      	it	eq
 8004864:	694b      	ldreq	r3, [r1, #20]
 8004866:	600f      	str	r7, [r1, #0]
 8004868:	bf18      	it	ne
 800486a:	2300      	movne	r3, #0
 800486c:	eba6 0807 	sub.w	r8, r6, r7
 8004870:	608b      	str	r3, [r1, #8]
 8004872:	f1b8 0f00 	cmp.w	r8, #0
 8004876:	dd9c      	ble.n	80047b2 <__sflush_r+0x1a>
 8004878:	6a21      	ldr	r1, [r4, #32]
 800487a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800487c:	4643      	mov	r3, r8
 800487e:	463a      	mov	r2, r7
 8004880:	4628      	mov	r0, r5
 8004882:	47b0      	blx	r6
 8004884:	2800      	cmp	r0, #0
 8004886:	dc06      	bgt.n	8004896 <__sflush_r+0xfe>
 8004888:	89a3      	ldrh	r3, [r4, #12]
 800488a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800488e:	81a3      	strh	r3, [r4, #12]
 8004890:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004894:	e78e      	b.n	80047b4 <__sflush_r+0x1c>
 8004896:	4407      	add	r7, r0
 8004898:	eba8 0800 	sub.w	r8, r8, r0
 800489c:	e7e9      	b.n	8004872 <__sflush_r+0xda>
 800489e:	bf00      	nop
 80048a0:	20400001 	.word	0x20400001

080048a4 <_fflush_r>:
 80048a4:	b538      	push	{r3, r4, r5, lr}
 80048a6:	690b      	ldr	r3, [r1, #16]
 80048a8:	4605      	mov	r5, r0
 80048aa:	460c      	mov	r4, r1
 80048ac:	b913      	cbnz	r3, 80048b4 <_fflush_r+0x10>
 80048ae:	2500      	movs	r5, #0
 80048b0:	4628      	mov	r0, r5
 80048b2:	bd38      	pop	{r3, r4, r5, pc}
 80048b4:	b118      	cbz	r0, 80048be <_fflush_r+0x1a>
 80048b6:	6983      	ldr	r3, [r0, #24]
 80048b8:	b90b      	cbnz	r3, 80048be <_fflush_r+0x1a>
 80048ba:	f000 f887 	bl	80049cc <__sinit>
 80048be:	4b14      	ldr	r3, [pc, #80]	; (8004910 <_fflush_r+0x6c>)
 80048c0:	429c      	cmp	r4, r3
 80048c2:	d11b      	bne.n	80048fc <_fflush_r+0x58>
 80048c4:	686c      	ldr	r4, [r5, #4]
 80048c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d0ef      	beq.n	80048ae <_fflush_r+0xa>
 80048ce:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80048d0:	07d0      	lsls	r0, r2, #31
 80048d2:	d404      	bmi.n	80048de <_fflush_r+0x3a>
 80048d4:	0599      	lsls	r1, r3, #22
 80048d6:	d402      	bmi.n	80048de <_fflush_r+0x3a>
 80048d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80048da:	f000 f915 	bl	8004b08 <__retarget_lock_acquire_recursive>
 80048de:	4628      	mov	r0, r5
 80048e0:	4621      	mov	r1, r4
 80048e2:	f7ff ff59 	bl	8004798 <__sflush_r>
 80048e6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80048e8:	07da      	lsls	r2, r3, #31
 80048ea:	4605      	mov	r5, r0
 80048ec:	d4e0      	bmi.n	80048b0 <_fflush_r+0xc>
 80048ee:	89a3      	ldrh	r3, [r4, #12]
 80048f0:	059b      	lsls	r3, r3, #22
 80048f2:	d4dd      	bmi.n	80048b0 <_fflush_r+0xc>
 80048f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80048f6:	f000 f908 	bl	8004b0a <__retarget_lock_release_recursive>
 80048fa:	e7d9      	b.n	80048b0 <_fflush_r+0xc>
 80048fc:	4b05      	ldr	r3, [pc, #20]	; (8004914 <_fflush_r+0x70>)
 80048fe:	429c      	cmp	r4, r3
 8004900:	d101      	bne.n	8004906 <_fflush_r+0x62>
 8004902:	68ac      	ldr	r4, [r5, #8]
 8004904:	e7df      	b.n	80048c6 <_fflush_r+0x22>
 8004906:	4b04      	ldr	r3, [pc, #16]	; (8004918 <_fflush_r+0x74>)
 8004908:	429c      	cmp	r4, r3
 800490a:	bf08      	it	eq
 800490c:	68ec      	ldreq	r4, [r5, #12]
 800490e:	e7da      	b.n	80048c6 <_fflush_r+0x22>
 8004910:	080053c4 	.word	0x080053c4
 8004914:	080053e4 	.word	0x080053e4
 8004918:	080053a4 	.word	0x080053a4

0800491c <std>:
 800491c:	2300      	movs	r3, #0
 800491e:	b510      	push	{r4, lr}
 8004920:	4604      	mov	r4, r0
 8004922:	e9c0 3300 	strd	r3, r3, [r0]
 8004926:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800492a:	6083      	str	r3, [r0, #8]
 800492c:	8181      	strh	r1, [r0, #12]
 800492e:	6643      	str	r3, [r0, #100]	; 0x64
 8004930:	81c2      	strh	r2, [r0, #14]
 8004932:	6183      	str	r3, [r0, #24]
 8004934:	4619      	mov	r1, r3
 8004936:	2208      	movs	r2, #8
 8004938:	305c      	adds	r0, #92	; 0x5c
 800493a:	f7ff fb6f 	bl	800401c <memset>
 800493e:	4b05      	ldr	r3, [pc, #20]	; (8004954 <std+0x38>)
 8004940:	6263      	str	r3, [r4, #36]	; 0x24
 8004942:	4b05      	ldr	r3, [pc, #20]	; (8004958 <std+0x3c>)
 8004944:	62a3      	str	r3, [r4, #40]	; 0x28
 8004946:	4b05      	ldr	r3, [pc, #20]	; (800495c <std+0x40>)
 8004948:	62e3      	str	r3, [r4, #44]	; 0x2c
 800494a:	4b05      	ldr	r3, [pc, #20]	; (8004960 <std+0x44>)
 800494c:	6224      	str	r4, [r4, #32]
 800494e:	6323      	str	r3, [r4, #48]	; 0x30
 8004950:	bd10      	pop	{r4, pc}
 8004952:	bf00      	nop
 8004954:	08004e41 	.word	0x08004e41
 8004958:	08004e63 	.word	0x08004e63
 800495c:	08004e9b 	.word	0x08004e9b
 8004960:	08004ebf 	.word	0x08004ebf

08004964 <_cleanup_r>:
 8004964:	4901      	ldr	r1, [pc, #4]	; (800496c <_cleanup_r+0x8>)
 8004966:	f000 b8af 	b.w	8004ac8 <_fwalk_reent>
 800496a:	bf00      	nop
 800496c:	080048a5 	.word	0x080048a5

08004970 <__sfmoreglue>:
 8004970:	b570      	push	{r4, r5, r6, lr}
 8004972:	2268      	movs	r2, #104	; 0x68
 8004974:	1e4d      	subs	r5, r1, #1
 8004976:	4355      	muls	r5, r2
 8004978:	460e      	mov	r6, r1
 800497a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800497e:	f000 f997 	bl	8004cb0 <_malloc_r>
 8004982:	4604      	mov	r4, r0
 8004984:	b140      	cbz	r0, 8004998 <__sfmoreglue+0x28>
 8004986:	2100      	movs	r1, #0
 8004988:	e9c0 1600 	strd	r1, r6, [r0]
 800498c:	300c      	adds	r0, #12
 800498e:	60a0      	str	r0, [r4, #8]
 8004990:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004994:	f7ff fb42 	bl	800401c <memset>
 8004998:	4620      	mov	r0, r4
 800499a:	bd70      	pop	{r4, r5, r6, pc}

0800499c <__sfp_lock_acquire>:
 800499c:	4801      	ldr	r0, [pc, #4]	; (80049a4 <__sfp_lock_acquire+0x8>)
 800499e:	f000 b8b3 	b.w	8004b08 <__retarget_lock_acquire_recursive>
 80049a2:	bf00      	nop
 80049a4:	20000139 	.word	0x20000139

080049a8 <__sfp_lock_release>:
 80049a8:	4801      	ldr	r0, [pc, #4]	; (80049b0 <__sfp_lock_release+0x8>)
 80049aa:	f000 b8ae 	b.w	8004b0a <__retarget_lock_release_recursive>
 80049ae:	bf00      	nop
 80049b0:	20000139 	.word	0x20000139

080049b4 <__sinit_lock_acquire>:
 80049b4:	4801      	ldr	r0, [pc, #4]	; (80049bc <__sinit_lock_acquire+0x8>)
 80049b6:	f000 b8a7 	b.w	8004b08 <__retarget_lock_acquire_recursive>
 80049ba:	bf00      	nop
 80049bc:	2000013a 	.word	0x2000013a

080049c0 <__sinit_lock_release>:
 80049c0:	4801      	ldr	r0, [pc, #4]	; (80049c8 <__sinit_lock_release+0x8>)
 80049c2:	f000 b8a2 	b.w	8004b0a <__retarget_lock_release_recursive>
 80049c6:	bf00      	nop
 80049c8:	2000013a 	.word	0x2000013a

080049cc <__sinit>:
 80049cc:	b510      	push	{r4, lr}
 80049ce:	4604      	mov	r4, r0
 80049d0:	f7ff fff0 	bl	80049b4 <__sinit_lock_acquire>
 80049d4:	69a3      	ldr	r3, [r4, #24]
 80049d6:	b11b      	cbz	r3, 80049e0 <__sinit+0x14>
 80049d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80049dc:	f7ff bff0 	b.w	80049c0 <__sinit_lock_release>
 80049e0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80049e4:	6523      	str	r3, [r4, #80]	; 0x50
 80049e6:	4b13      	ldr	r3, [pc, #76]	; (8004a34 <__sinit+0x68>)
 80049e8:	4a13      	ldr	r2, [pc, #76]	; (8004a38 <__sinit+0x6c>)
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	62a2      	str	r2, [r4, #40]	; 0x28
 80049ee:	42a3      	cmp	r3, r4
 80049f0:	bf04      	itt	eq
 80049f2:	2301      	moveq	r3, #1
 80049f4:	61a3      	streq	r3, [r4, #24]
 80049f6:	4620      	mov	r0, r4
 80049f8:	f000 f820 	bl	8004a3c <__sfp>
 80049fc:	6060      	str	r0, [r4, #4]
 80049fe:	4620      	mov	r0, r4
 8004a00:	f000 f81c 	bl	8004a3c <__sfp>
 8004a04:	60a0      	str	r0, [r4, #8]
 8004a06:	4620      	mov	r0, r4
 8004a08:	f000 f818 	bl	8004a3c <__sfp>
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	60e0      	str	r0, [r4, #12]
 8004a10:	2104      	movs	r1, #4
 8004a12:	6860      	ldr	r0, [r4, #4]
 8004a14:	f7ff ff82 	bl	800491c <std>
 8004a18:	68a0      	ldr	r0, [r4, #8]
 8004a1a:	2201      	movs	r2, #1
 8004a1c:	2109      	movs	r1, #9
 8004a1e:	f7ff ff7d 	bl	800491c <std>
 8004a22:	68e0      	ldr	r0, [r4, #12]
 8004a24:	2202      	movs	r2, #2
 8004a26:	2112      	movs	r1, #18
 8004a28:	f7ff ff78 	bl	800491c <std>
 8004a2c:	2301      	movs	r3, #1
 8004a2e:	61a3      	str	r3, [r4, #24]
 8004a30:	e7d2      	b.n	80049d8 <__sinit+0xc>
 8004a32:	bf00      	nop
 8004a34:	0800536c 	.word	0x0800536c
 8004a38:	08004965 	.word	0x08004965

08004a3c <__sfp>:
 8004a3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a3e:	4607      	mov	r7, r0
 8004a40:	f7ff ffac 	bl	800499c <__sfp_lock_acquire>
 8004a44:	4b1e      	ldr	r3, [pc, #120]	; (8004ac0 <__sfp+0x84>)
 8004a46:	681e      	ldr	r6, [r3, #0]
 8004a48:	69b3      	ldr	r3, [r6, #24]
 8004a4a:	b913      	cbnz	r3, 8004a52 <__sfp+0x16>
 8004a4c:	4630      	mov	r0, r6
 8004a4e:	f7ff ffbd 	bl	80049cc <__sinit>
 8004a52:	3648      	adds	r6, #72	; 0x48
 8004a54:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004a58:	3b01      	subs	r3, #1
 8004a5a:	d503      	bpl.n	8004a64 <__sfp+0x28>
 8004a5c:	6833      	ldr	r3, [r6, #0]
 8004a5e:	b30b      	cbz	r3, 8004aa4 <__sfp+0x68>
 8004a60:	6836      	ldr	r6, [r6, #0]
 8004a62:	e7f7      	b.n	8004a54 <__sfp+0x18>
 8004a64:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004a68:	b9d5      	cbnz	r5, 8004aa0 <__sfp+0x64>
 8004a6a:	4b16      	ldr	r3, [pc, #88]	; (8004ac4 <__sfp+0x88>)
 8004a6c:	60e3      	str	r3, [r4, #12]
 8004a6e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004a72:	6665      	str	r5, [r4, #100]	; 0x64
 8004a74:	f000 f847 	bl	8004b06 <__retarget_lock_init_recursive>
 8004a78:	f7ff ff96 	bl	80049a8 <__sfp_lock_release>
 8004a7c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004a80:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004a84:	6025      	str	r5, [r4, #0]
 8004a86:	61a5      	str	r5, [r4, #24]
 8004a88:	2208      	movs	r2, #8
 8004a8a:	4629      	mov	r1, r5
 8004a8c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004a90:	f7ff fac4 	bl	800401c <memset>
 8004a94:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004a98:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004a9c:	4620      	mov	r0, r4
 8004a9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004aa0:	3468      	adds	r4, #104	; 0x68
 8004aa2:	e7d9      	b.n	8004a58 <__sfp+0x1c>
 8004aa4:	2104      	movs	r1, #4
 8004aa6:	4638      	mov	r0, r7
 8004aa8:	f7ff ff62 	bl	8004970 <__sfmoreglue>
 8004aac:	4604      	mov	r4, r0
 8004aae:	6030      	str	r0, [r6, #0]
 8004ab0:	2800      	cmp	r0, #0
 8004ab2:	d1d5      	bne.n	8004a60 <__sfp+0x24>
 8004ab4:	f7ff ff78 	bl	80049a8 <__sfp_lock_release>
 8004ab8:	230c      	movs	r3, #12
 8004aba:	603b      	str	r3, [r7, #0]
 8004abc:	e7ee      	b.n	8004a9c <__sfp+0x60>
 8004abe:	bf00      	nop
 8004ac0:	0800536c 	.word	0x0800536c
 8004ac4:	ffff0001 	.word	0xffff0001

08004ac8 <_fwalk_reent>:
 8004ac8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004acc:	4606      	mov	r6, r0
 8004ace:	4688      	mov	r8, r1
 8004ad0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004ad4:	2700      	movs	r7, #0
 8004ad6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004ada:	f1b9 0901 	subs.w	r9, r9, #1
 8004ade:	d505      	bpl.n	8004aec <_fwalk_reent+0x24>
 8004ae0:	6824      	ldr	r4, [r4, #0]
 8004ae2:	2c00      	cmp	r4, #0
 8004ae4:	d1f7      	bne.n	8004ad6 <_fwalk_reent+0xe>
 8004ae6:	4638      	mov	r0, r7
 8004ae8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004aec:	89ab      	ldrh	r3, [r5, #12]
 8004aee:	2b01      	cmp	r3, #1
 8004af0:	d907      	bls.n	8004b02 <_fwalk_reent+0x3a>
 8004af2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004af6:	3301      	adds	r3, #1
 8004af8:	d003      	beq.n	8004b02 <_fwalk_reent+0x3a>
 8004afa:	4629      	mov	r1, r5
 8004afc:	4630      	mov	r0, r6
 8004afe:	47c0      	blx	r8
 8004b00:	4307      	orrs	r7, r0
 8004b02:	3568      	adds	r5, #104	; 0x68
 8004b04:	e7e9      	b.n	8004ada <_fwalk_reent+0x12>

08004b06 <__retarget_lock_init_recursive>:
 8004b06:	4770      	bx	lr

08004b08 <__retarget_lock_acquire_recursive>:
 8004b08:	4770      	bx	lr

08004b0a <__retarget_lock_release_recursive>:
 8004b0a:	4770      	bx	lr

08004b0c <__swhatbuf_r>:
 8004b0c:	b570      	push	{r4, r5, r6, lr}
 8004b0e:	460e      	mov	r6, r1
 8004b10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b14:	2900      	cmp	r1, #0
 8004b16:	b096      	sub	sp, #88	; 0x58
 8004b18:	4614      	mov	r4, r2
 8004b1a:	461d      	mov	r5, r3
 8004b1c:	da08      	bge.n	8004b30 <__swhatbuf_r+0x24>
 8004b1e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8004b22:	2200      	movs	r2, #0
 8004b24:	602a      	str	r2, [r5, #0]
 8004b26:	061a      	lsls	r2, r3, #24
 8004b28:	d410      	bmi.n	8004b4c <__swhatbuf_r+0x40>
 8004b2a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004b2e:	e00e      	b.n	8004b4e <__swhatbuf_r+0x42>
 8004b30:	466a      	mov	r2, sp
 8004b32:	f000 f9eb 	bl	8004f0c <_fstat_r>
 8004b36:	2800      	cmp	r0, #0
 8004b38:	dbf1      	blt.n	8004b1e <__swhatbuf_r+0x12>
 8004b3a:	9a01      	ldr	r2, [sp, #4]
 8004b3c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004b40:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004b44:	425a      	negs	r2, r3
 8004b46:	415a      	adcs	r2, r3
 8004b48:	602a      	str	r2, [r5, #0]
 8004b4a:	e7ee      	b.n	8004b2a <__swhatbuf_r+0x1e>
 8004b4c:	2340      	movs	r3, #64	; 0x40
 8004b4e:	2000      	movs	r0, #0
 8004b50:	6023      	str	r3, [r4, #0]
 8004b52:	b016      	add	sp, #88	; 0x58
 8004b54:	bd70      	pop	{r4, r5, r6, pc}
	...

08004b58 <__smakebuf_r>:
 8004b58:	898b      	ldrh	r3, [r1, #12]
 8004b5a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004b5c:	079d      	lsls	r5, r3, #30
 8004b5e:	4606      	mov	r6, r0
 8004b60:	460c      	mov	r4, r1
 8004b62:	d507      	bpl.n	8004b74 <__smakebuf_r+0x1c>
 8004b64:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004b68:	6023      	str	r3, [r4, #0]
 8004b6a:	6123      	str	r3, [r4, #16]
 8004b6c:	2301      	movs	r3, #1
 8004b6e:	6163      	str	r3, [r4, #20]
 8004b70:	b002      	add	sp, #8
 8004b72:	bd70      	pop	{r4, r5, r6, pc}
 8004b74:	ab01      	add	r3, sp, #4
 8004b76:	466a      	mov	r2, sp
 8004b78:	f7ff ffc8 	bl	8004b0c <__swhatbuf_r>
 8004b7c:	9900      	ldr	r1, [sp, #0]
 8004b7e:	4605      	mov	r5, r0
 8004b80:	4630      	mov	r0, r6
 8004b82:	f000 f895 	bl	8004cb0 <_malloc_r>
 8004b86:	b948      	cbnz	r0, 8004b9c <__smakebuf_r+0x44>
 8004b88:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004b8c:	059a      	lsls	r2, r3, #22
 8004b8e:	d4ef      	bmi.n	8004b70 <__smakebuf_r+0x18>
 8004b90:	f023 0303 	bic.w	r3, r3, #3
 8004b94:	f043 0302 	orr.w	r3, r3, #2
 8004b98:	81a3      	strh	r3, [r4, #12]
 8004b9a:	e7e3      	b.n	8004b64 <__smakebuf_r+0xc>
 8004b9c:	4b0d      	ldr	r3, [pc, #52]	; (8004bd4 <__smakebuf_r+0x7c>)
 8004b9e:	62b3      	str	r3, [r6, #40]	; 0x28
 8004ba0:	89a3      	ldrh	r3, [r4, #12]
 8004ba2:	6020      	str	r0, [r4, #0]
 8004ba4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ba8:	81a3      	strh	r3, [r4, #12]
 8004baa:	9b00      	ldr	r3, [sp, #0]
 8004bac:	6163      	str	r3, [r4, #20]
 8004bae:	9b01      	ldr	r3, [sp, #4]
 8004bb0:	6120      	str	r0, [r4, #16]
 8004bb2:	b15b      	cbz	r3, 8004bcc <__smakebuf_r+0x74>
 8004bb4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004bb8:	4630      	mov	r0, r6
 8004bba:	f000 f9b9 	bl	8004f30 <_isatty_r>
 8004bbe:	b128      	cbz	r0, 8004bcc <__smakebuf_r+0x74>
 8004bc0:	89a3      	ldrh	r3, [r4, #12]
 8004bc2:	f023 0303 	bic.w	r3, r3, #3
 8004bc6:	f043 0301 	orr.w	r3, r3, #1
 8004bca:	81a3      	strh	r3, [r4, #12]
 8004bcc:	89a0      	ldrh	r0, [r4, #12]
 8004bce:	4305      	orrs	r5, r0
 8004bd0:	81a5      	strh	r5, [r4, #12]
 8004bd2:	e7cd      	b.n	8004b70 <__smakebuf_r+0x18>
 8004bd4:	08004965 	.word	0x08004965

08004bd8 <_free_r>:
 8004bd8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004bda:	2900      	cmp	r1, #0
 8004bdc:	d044      	beq.n	8004c68 <_free_r+0x90>
 8004bde:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004be2:	9001      	str	r0, [sp, #4]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	f1a1 0404 	sub.w	r4, r1, #4
 8004bea:	bfb8      	it	lt
 8004bec:	18e4      	addlt	r4, r4, r3
 8004bee:	f000 f9c1 	bl	8004f74 <__malloc_lock>
 8004bf2:	4a1e      	ldr	r2, [pc, #120]	; (8004c6c <_free_r+0x94>)
 8004bf4:	9801      	ldr	r0, [sp, #4]
 8004bf6:	6813      	ldr	r3, [r2, #0]
 8004bf8:	b933      	cbnz	r3, 8004c08 <_free_r+0x30>
 8004bfa:	6063      	str	r3, [r4, #4]
 8004bfc:	6014      	str	r4, [r2, #0]
 8004bfe:	b003      	add	sp, #12
 8004c00:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004c04:	f000 b9bc 	b.w	8004f80 <__malloc_unlock>
 8004c08:	42a3      	cmp	r3, r4
 8004c0a:	d908      	bls.n	8004c1e <_free_r+0x46>
 8004c0c:	6825      	ldr	r5, [r4, #0]
 8004c0e:	1961      	adds	r1, r4, r5
 8004c10:	428b      	cmp	r3, r1
 8004c12:	bf01      	itttt	eq
 8004c14:	6819      	ldreq	r1, [r3, #0]
 8004c16:	685b      	ldreq	r3, [r3, #4]
 8004c18:	1949      	addeq	r1, r1, r5
 8004c1a:	6021      	streq	r1, [r4, #0]
 8004c1c:	e7ed      	b.n	8004bfa <_free_r+0x22>
 8004c1e:	461a      	mov	r2, r3
 8004c20:	685b      	ldr	r3, [r3, #4]
 8004c22:	b10b      	cbz	r3, 8004c28 <_free_r+0x50>
 8004c24:	42a3      	cmp	r3, r4
 8004c26:	d9fa      	bls.n	8004c1e <_free_r+0x46>
 8004c28:	6811      	ldr	r1, [r2, #0]
 8004c2a:	1855      	adds	r5, r2, r1
 8004c2c:	42a5      	cmp	r5, r4
 8004c2e:	d10b      	bne.n	8004c48 <_free_r+0x70>
 8004c30:	6824      	ldr	r4, [r4, #0]
 8004c32:	4421      	add	r1, r4
 8004c34:	1854      	adds	r4, r2, r1
 8004c36:	42a3      	cmp	r3, r4
 8004c38:	6011      	str	r1, [r2, #0]
 8004c3a:	d1e0      	bne.n	8004bfe <_free_r+0x26>
 8004c3c:	681c      	ldr	r4, [r3, #0]
 8004c3e:	685b      	ldr	r3, [r3, #4]
 8004c40:	6053      	str	r3, [r2, #4]
 8004c42:	4421      	add	r1, r4
 8004c44:	6011      	str	r1, [r2, #0]
 8004c46:	e7da      	b.n	8004bfe <_free_r+0x26>
 8004c48:	d902      	bls.n	8004c50 <_free_r+0x78>
 8004c4a:	230c      	movs	r3, #12
 8004c4c:	6003      	str	r3, [r0, #0]
 8004c4e:	e7d6      	b.n	8004bfe <_free_r+0x26>
 8004c50:	6825      	ldr	r5, [r4, #0]
 8004c52:	1961      	adds	r1, r4, r5
 8004c54:	428b      	cmp	r3, r1
 8004c56:	bf04      	itt	eq
 8004c58:	6819      	ldreq	r1, [r3, #0]
 8004c5a:	685b      	ldreq	r3, [r3, #4]
 8004c5c:	6063      	str	r3, [r4, #4]
 8004c5e:	bf04      	itt	eq
 8004c60:	1949      	addeq	r1, r1, r5
 8004c62:	6021      	streq	r1, [r4, #0]
 8004c64:	6054      	str	r4, [r2, #4]
 8004c66:	e7ca      	b.n	8004bfe <_free_r+0x26>
 8004c68:	b003      	add	sp, #12
 8004c6a:	bd30      	pop	{r4, r5, pc}
 8004c6c:	2000013c 	.word	0x2000013c

08004c70 <sbrk_aligned>:
 8004c70:	b570      	push	{r4, r5, r6, lr}
 8004c72:	4e0e      	ldr	r6, [pc, #56]	; (8004cac <sbrk_aligned+0x3c>)
 8004c74:	460c      	mov	r4, r1
 8004c76:	6831      	ldr	r1, [r6, #0]
 8004c78:	4605      	mov	r5, r0
 8004c7a:	b911      	cbnz	r1, 8004c82 <sbrk_aligned+0x12>
 8004c7c:	f000 f88c 	bl	8004d98 <_sbrk_r>
 8004c80:	6030      	str	r0, [r6, #0]
 8004c82:	4621      	mov	r1, r4
 8004c84:	4628      	mov	r0, r5
 8004c86:	f000 f887 	bl	8004d98 <_sbrk_r>
 8004c8a:	1c43      	adds	r3, r0, #1
 8004c8c:	d00a      	beq.n	8004ca4 <sbrk_aligned+0x34>
 8004c8e:	1cc4      	adds	r4, r0, #3
 8004c90:	f024 0403 	bic.w	r4, r4, #3
 8004c94:	42a0      	cmp	r0, r4
 8004c96:	d007      	beq.n	8004ca8 <sbrk_aligned+0x38>
 8004c98:	1a21      	subs	r1, r4, r0
 8004c9a:	4628      	mov	r0, r5
 8004c9c:	f000 f87c 	bl	8004d98 <_sbrk_r>
 8004ca0:	3001      	adds	r0, #1
 8004ca2:	d101      	bne.n	8004ca8 <sbrk_aligned+0x38>
 8004ca4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8004ca8:	4620      	mov	r0, r4
 8004caa:	bd70      	pop	{r4, r5, r6, pc}
 8004cac:	20000140 	.word	0x20000140

08004cb0 <_malloc_r>:
 8004cb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004cb4:	1ccd      	adds	r5, r1, #3
 8004cb6:	f025 0503 	bic.w	r5, r5, #3
 8004cba:	3508      	adds	r5, #8
 8004cbc:	2d0c      	cmp	r5, #12
 8004cbe:	bf38      	it	cc
 8004cc0:	250c      	movcc	r5, #12
 8004cc2:	2d00      	cmp	r5, #0
 8004cc4:	4607      	mov	r7, r0
 8004cc6:	db01      	blt.n	8004ccc <_malloc_r+0x1c>
 8004cc8:	42a9      	cmp	r1, r5
 8004cca:	d905      	bls.n	8004cd8 <_malloc_r+0x28>
 8004ccc:	230c      	movs	r3, #12
 8004cce:	603b      	str	r3, [r7, #0]
 8004cd0:	2600      	movs	r6, #0
 8004cd2:	4630      	mov	r0, r6
 8004cd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004cd8:	4e2e      	ldr	r6, [pc, #184]	; (8004d94 <_malloc_r+0xe4>)
 8004cda:	f000 f94b 	bl	8004f74 <__malloc_lock>
 8004cde:	6833      	ldr	r3, [r6, #0]
 8004ce0:	461c      	mov	r4, r3
 8004ce2:	bb34      	cbnz	r4, 8004d32 <_malloc_r+0x82>
 8004ce4:	4629      	mov	r1, r5
 8004ce6:	4638      	mov	r0, r7
 8004ce8:	f7ff ffc2 	bl	8004c70 <sbrk_aligned>
 8004cec:	1c43      	adds	r3, r0, #1
 8004cee:	4604      	mov	r4, r0
 8004cf0:	d14d      	bne.n	8004d8e <_malloc_r+0xde>
 8004cf2:	6834      	ldr	r4, [r6, #0]
 8004cf4:	4626      	mov	r6, r4
 8004cf6:	2e00      	cmp	r6, #0
 8004cf8:	d140      	bne.n	8004d7c <_malloc_r+0xcc>
 8004cfa:	6823      	ldr	r3, [r4, #0]
 8004cfc:	4631      	mov	r1, r6
 8004cfe:	4638      	mov	r0, r7
 8004d00:	eb04 0803 	add.w	r8, r4, r3
 8004d04:	f000 f848 	bl	8004d98 <_sbrk_r>
 8004d08:	4580      	cmp	r8, r0
 8004d0a:	d13a      	bne.n	8004d82 <_malloc_r+0xd2>
 8004d0c:	6821      	ldr	r1, [r4, #0]
 8004d0e:	3503      	adds	r5, #3
 8004d10:	1a6d      	subs	r5, r5, r1
 8004d12:	f025 0503 	bic.w	r5, r5, #3
 8004d16:	3508      	adds	r5, #8
 8004d18:	2d0c      	cmp	r5, #12
 8004d1a:	bf38      	it	cc
 8004d1c:	250c      	movcc	r5, #12
 8004d1e:	4629      	mov	r1, r5
 8004d20:	4638      	mov	r0, r7
 8004d22:	f7ff ffa5 	bl	8004c70 <sbrk_aligned>
 8004d26:	3001      	adds	r0, #1
 8004d28:	d02b      	beq.n	8004d82 <_malloc_r+0xd2>
 8004d2a:	6823      	ldr	r3, [r4, #0]
 8004d2c:	442b      	add	r3, r5
 8004d2e:	6023      	str	r3, [r4, #0]
 8004d30:	e00e      	b.n	8004d50 <_malloc_r+0xa0>
 8004d32:	6822      	ldr	r2, [r4, #0]
 8004d34:	1b52      	subs	r2, r2, r5
 8004d36:	d41e      	bmi.n	8004d76 <_malloc_r+0xc6>
 8004d38:	2a0b      	cmp	r2, #11
 8004d3a:	d916      	bls.n	8004d6a <_malloc_r+0xba>
 8004d3c:	1961      	adds	r1, r4, r5
 8004d3e:	42a3      	cmp	r3, r4
 8004d40:	6025      	str	r5, [r4, #0]
 8004d42:	bf18      	it	ne
 8004d44:	6059      	strne	r1, [r3, #4]
 8004d46:	6863      	ldr	r3, [r4, #4]
 8004d48:	bf08      	it	eq
 8004d4a:	6031      	streq	r1, [r6, #0]
 8004d4c:	5162      	str	r2, [r4, r5]
 8004d4e:	604b      	str	r3, [r1, #4]
 8004d50:	4638      	mov	r0, r7
 8004d52:	f104 060b 	add.w	r6, r4, #11
 8004d56:	f000 f913 	bl	8004f80 <__malloc_unlock>
 8004d5a:	f026 0607 	bic.w	r6, r6, #7
 8004d5e:	1d23      	adds	r3, r4, #4
 8004d60:	1af2      	subs	r2, r6, r3
 8004d62:	d0b6      	beq.n	8004cd2 <_malloc_r+0x22>
 8004d64:	1b9b      	subs	r3, r3, r6
 8004d66:	50a3      	str	r3, [r4, r2]
 8004d68:	e7b3      	b.n	8004cd2 <_malloc_r+0x22>
 8004d6a:	6862      	ldr	r2, [r4, #4]
 8004d6c:	42a3      	cmp	r3, r4
 8004d6e:	bf0c      	ite	eq
 8004d70:	6032      	streq	r2, [r6, #0]
 8004d72:	605a      	strne	r2, [r3, #4]
 8004d74:	e7ec      	b.n	8004d50 <_malloc_r+0xa0>
 8004d76:	4623      	mov	r3, r4
 8004d78:	6864      	ldr	r4, [r4, #4]
 8004d7a:	e7b2      	b.n	8004ce2 <_malloc_r+0x32>
 8004d7c:	4634      	mov	r4, r6
 8004d7e:	6876      	ldr	r6, [r6, #4]
 8004d80:	e7b9      	b.n	8004cf6 <_malloc_r+0x46>
 8004d82:	230c      	movs	r3, #12
 8004d84:	603b      	str	r3, [r7, #0]
 8004d86:	4638      	mov	r0, r7
 8004d88:	f000 f8fa 	bl	8004f80 <__malloc_unlock>
 8004d8c:	e7a1      	b.n	8004cd2 <_malloc_r+0x22>
 8004d8e:	6025      	str	r5, [r4, #0]
 8004d90:	e7de      	b.n	8004d50 <_malloc_r+0xa0>
 8004d92:	bf00      	nop
 8004d94:	2000013c 	.word	0x2000013c

08004d98 <_sbrk_r>:
 8004d98:	b538      	push	{r3, r4, r5, lr}
 8004d9a:	4d06      	ldr	r5, [pc, #24]	; (8004db4 <_sbrk_r+0x1c>)
 8004d9c:	2300      	movs	r3, #0
 8004d9e:	4604      	mov	r4, r0
 8004da0:	4608      	mov	r0, r1
 8004da2:	602b      	str	r3, [r5, #0]
 8004da4:	f7fb ffbe 	bl	8000d24 <_sbrk>
 8004da8:	1c43      	adds	r3, r0, #1
 8004daa:	d102      	bne.n	8004db2 <_sbrk_r+0x1a>
 8004dac:	682b      	ldr	r3, [r5, #0]
 8004dae:	b103      	cbz	r3, 8004db2 <_sbrk_r+0x1a>
 8004db0:	6023      	str	r3, [r4, #0]
 8004db2:	bd38      	pop	{r3, r4, r5, pc}
 8004db4:	20000144 	.word	0x20000144

08004db8 <_raise_r>:
 8004db8:	291f      	cmp	r1, #31
 8004dba:	b538      	push	{r3, r4, r5, lr}
 8004dbc:	4604      	mov	r4, r0
 8004dbe:	460d      	mov	r5, r1
 8004dc0:	d904      	bls.n	8004dcc <_raise_r+0x14>
 8004dc2:	2316      	movs	r3, #22
 8004dc4:	6003      	str	r3, [r0, #0]
 8004dc6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004dca:	bd38      	pop	{r3, r4, r5, pc}
 8004dcc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8004dce:	b112      	cbz	r2, 8004dd6 <_raise_r+0x1e>
 8004dd0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8004dd4:	b94b      	cbnz	r3, 8004dea <_raise_r+0x32>
 8004dd6:	4620      	mov	r0, r4
 8004dd8:	f000 f830 	bl	8004e3c <_getpid_r>
 8004ddc:	462a      	mov	r2, r5
 8004dde:	4601      	mov	r1, r0
 8004de0:	4620      	mov	r0, r4
 8004de2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004de6:	f000 b817 	b.w	8004e18 <_kill_r>
 8004dea:	2b01      	cmp	r3, #1
 8004dec:	d00a      	beq.n	8004e04 <_raise_r+0x4c>
 8004dee:	1c59      	adds	r1, r3, #1
 8004df0:	d103      	bne.n	8004dfa <_raise_r+0x42>
 8004df2:	2316      	movs	r3, #22
 8004df4:	6003      	str	r3, [r0, #0]
 8004df6:	2001      	movs	r0, #1
 8004df8:	e7e7      	b.n	8004dca <_raise_r+0x12>
 8004dfa:	2400      	movs	r4, #0
 8004dfc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8004e00:	4628      	mov	r0, r5
 8004e02:	4798      	blx	r3
 8004e04:	2000      	movs	r0, #0
 8004e06:	e7e0      	b.n	8004dca <_raise_r+0x12>

08004e08 <raise>:
 8004e08:	4b02      	ldr	r3, [pc, #8]	; (8004e14 <raise+0xc>)
 8004e0a:	4601      	mov	r1, r0
 8004e0c:	6818      	ldr	r0, [r3, #0]
 8004e0e:	f7ff bfd3 	b.w	8004db8 <_raise_r>
 8004e12:	bf00      	nop
 8004e14:	20000018 	.word	0x20000018

08004e18 <_kill_r>:
 8004e18:	b538      	push	{r3, r4, r5, lr}
 8004e1a:	4d07      	ldr	r5, [pc, #28]	; (8004e38 <_kill_r+0x20>)
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	4604      	mov	r4, r0
 8004e20:	4608      	mov	r0, r1
 8004e22:	4611      	mov	r1, r2
 8004e24:	602b      	str	r3, [r5, #0]
 8004e26:	f7fb fef5 	bl	8000c14 <_kill>
 8004e2a:	1c43      	adds	r3, r0, #1
 8004e2c:	d102      	bne.n	8004e34 <_kill_r+0x1c>
 8004e2e:	682b      	ldr	r3, [r5, #0]
 8004e30:	b103      	cbz	r3, 8004e34 <_kill_r+0x1c>
 8004e32:	6023      	str	r3, [r4, #0]
 8004e34:	bd38      	pop	{r3, r4, r5, pc}
 8004e36:	bf00      	nop
 8004e38:	20000144 	.word	0x20000144

08004e3c <_getpid_r>:
 8004e3c:	f7fb bee2 	b.w	8000c04 <_getpid>

08004e40 <__sread>:
 8004e40:	b510      	push	{r4, lr}
 8004e42:	460c      	mov	r4, r1
 8004e44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e48:	f000 f8a0 	bl	8004f8c <_read_r>
 8004e4c:	2800      	cmp	r0, #0
 8004e4e:	bfab      	itete	ge
 8004e50:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004e52:	89a3      	ldrhlt	r3, [r4, #12]
 8004e54:	181b      	addge	r3, r3, r0
 8004e56:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004e5a:	bfac      	ite	ge
 8004e5c:	6563      	strge	r3, [r4, #84]	; 0x54
 8004e5e:	81a3      	strhlt	r3, [r4, #12]
 8004e60:	bd10      	pop	{r4, pc}

08004e62 <__swrite>:
 8004e62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e66:	461f      	mov	r7, r3
 8004e68:	898b      	ldrh	r3, [r1, #12]
 8004e6a:	05db      	lsls	r3, r3, #23
 8004e6c:	4605      	mov	r5, r0
 8004e6e:	460c      	mov	r4, r1
 8004e70:	4616      	mov	r6, r2
 8004e72:	d505      	bpl.n	8004e80 <__swrite+0x1e>
 8004e74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e78:	2302      	movs	r3, #2
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	f000 f868 	bl	8004f50 <_lseek_r>
 8004e80:	89a3      	ldrh	r3, [r4, #12]
 8004e82:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004e86:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004e8a:	81a3      	strh	r3, [r4, #12]
 8004e8c:	4632      	mov	r2, r6
 8004e8e:	463b      	mov	r3, r7
 8004e90:	4628      	mov	r0, r5
 8004e92:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004e96:	f000 b817 	b.w	8004ec8 <_write_r>

08004e9a <__sseek>:
 8004e9a:	b510      	push	{r4, lr}
 8004e9c:	460c      	mov	r4, r1
 8004e9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ea2:	f000 f855 	bl	8004f50 <_lseek_r>
 8004ea6:	1c43      	adds	r3, r0, #1
 8004ea8:	89a3      	ldrh	r3, [r4, #12]
 8004eaa:	bf15      	itete	ne
 8004eac:	6560      	strne	r0, [r4, #84]	; 0x54
 8004eae:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004eb2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004eb6:	81a3      	strheq	r3, [r4, #12]
 8004eb8:	bf18      	it	ne
 8004eba:	81a3      	strhne	r3, [r4, #12]
 8004ebc:	bd10      	pop	{r4, pc}

08004ebe <__sclose>:
 8004ebe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ec2:	f000 b813 	b.w	8004eec <_close_r>
	...

08004ec8 <_write_r>:
 8004ec8:	b538      	push	{r3, r4, r5, lr}
 8004eca:	4d07      	ldr	r5, [pc, #28]	; (8004ee8 <_write_r+0x20>)
 8004ecc:	4604      	mov	r4, r0
 8004ece:	4608      	mov	r0, r1
 8004ed0:	4611      	mov	r1, r2
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	602a      	str	r2, [r5, #0]
 8004ed6:	461a      	mov	r2, r3
 8004ed8:	f7fb fed3 	bl	8000c82 <_write>
 8004edc:	1c43      	adds	r3, r0, #1
 8004ede:	d102      	bne.n	8004ee6 <_write_r+0x1e>
 8004ee0:	682b      	ldr	r3, [r5, #0]
 8004ee2:	b103      	cbz	r3, 8004ee6 <_write_r+0x1e>
 8004ee4:	6023      	str	r3, [r4, #0]
 8004ee6:	bd38      	pop	{r3, r4, r5, pc}
 8004ee8:	20000144 	.word	0x20000144

08004eec <_close_r>:
 8004eec:	b538      	push	{r3, r4, r5, lr}
 8004eee:	4d06      	ldr	r5, [pc, #24]	; (8004f08 <_close_r+0x1c>)
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	4604      	mov	r4, r0
 8004ef4:	4608      	mov	r0, r1
 8004ef6:	602b      	str	r3, [r5, #0]
 8004ef8:	f7fb fedf 	bl	8000cba <_close>
 8004efc:	1c43      	adds	r3, r0, #1
 8004efe:	d102      	bne.n	8004f06 <_close_r+0x1a>
 8004f00:	682b      	ldr	r3, [r5, #0]
 8004f02:	b103      	cbz	r3, 8004f06 <_close_r+0x1a>
 8004f04:	6023      	str	r3, [r4, #0]
 8004f06:	bd38      	pop	{r3, r4, r5, pc}
 8004f08:	20000144 	.word	0x20000144

08004f0c <_fstat_r>:
 8004f0c:	b538      	push	{r3, r4, r5, lr}
 8004f0e:	4d07      	ldr	r5, [pc, #28]	; (8004f2c <_fstat_r+0x20>)
 8004f10:	2300      	movs	r3, #0
 8004f12:	4604      	mov	r4, r0
 8004f14:	4608      	mov	r0, r1
 8004f16:	4611      	mov	r1, r2
 8004f18:	602b      	str	r3, [r5, #0]
 8004f1a:	f7fb feda 	bl	8000cd2 <_fstat>
 8004f1e:	1c43      	adds	r3, r0, #1
 8004f20:	d102      	bne.n	8004f28 <_fstat_r+0x1c>
 8004f22:	682b      	ldr	r3, [r5, #0]
 8004f24:	b103      	cbz	r3, 8004f28 <_fstat_r+0x1c>
 8004f26:	6023      	str	r3, [r4, #0]
 8004f28:	bd38      	pop	{r3, r4, r5, pc}
 8004f2a:	bf00      	nop
 8004f2c:	20000144 	.word	0x20000144

08004f30 <_isatty_r>:
 8004f30:	b538      	push	{r3, r4, r5, lr}
 8004f32:	4d06      	ldr	r5, [pc, #24]	; (8004f4c <_isatty_r+0x1c>)
 8004f34:	2300      	movs	r3, #0
 8004f36:	4604      	mov	r4, r0
 8004f38:	4608      	mov	r0, r1
 8004f3a:	602b      	str	r3, [r5, #0]
 8004f3c:	f7fb fed9 	bl	8000cf2 <_isatty>
 8004f40:	1c43      	adds	r3, r0, #1
 8004f42:	d102      	bne.n	8004f4a <_isatty_r+0x1a>
 8004f44:	682b      	ldr	r3, [r5, #0]
 8004f46:	b103      	cbz	r3, 8004f4a <_isatty_r+0x1a>
 8004f48:	6023      	str	r3, [r4, #0]
 8004f4a:	bd38      	pop	{r3, r4, r5, pc}
 8004f4c:	20000144 	.word	0x20000144

08004f50 <_lseek_r>:
 8004f50:	b538      	push	{r3, r4, r5, lr}
 8004f52:	4d07      	ldr	r5, [pc, #28]	; (8004f70 <_lseek_r+0x20>)
 8004f54:	4604      	mov	r4, r0
 8004f56:	4608      	mov	r0, r1
 8004f58:	4611      	mov	r1, r2
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	602a      	str	r2, [r5, #0]
 8004f5e:	461a      	mov	r2, r3
 8004f60:	f7fb fed2 	bl	8000d08 <_lseek>
 8004f64:	1c43      	adds	r3, r0, #1
 8004f66:	d102      	bne.n	8004f6e <_lseek_r+0x1e>
 8004f68:	682b      	ldr	r3, [r5, #0]
 8004f6a:	b103      	cbz	r3, 8004f6e <_lseek_r+0x1e>
 8004f6c:	6023      	str	r3, [r4, #0]
 8004f6e:	bd38      	pop	{r3, r4, r5, pc}
 8004f70:	20000144 	.word	0x20000144

08004f74 <__malloc_lock>:
 8004f74:	4801      	ldr	r0, [pc, #4]	; (8004f7c <__malloc_lock+0x8>)
 8004f76:	f7ff bdc7 	b.w	8004b08 <__retarget_lock_acquire_recursive>
 8004f7a:	bf00      	nop
 8004f7c:	20000138 	.word	0x20000138

08004f80 <__malloc_unlock>:
 8004f80:	4801      	ldr	r0, [pc, #4]	; (8004f88 <__malloc_unlock+0x8>)
 8004f82:	f7ff bdc2 	b.w	8004b0a <__retarget_lock_release_recursive>
 8004f86:	bf00      	nop
 8004f88:	20000138 	.word	0x20000138

08004f8c <_read_r>:
 8004f8c:	b538      	push	{r3, r4, r5, lr}
 8004f8e:	4d07      	ldr	r5, [pc, #28]	; (8004fac <_read_r+0x20>)
 8004f90:	4604      	mov	r4, r0
 8004f92:	4608      	mov	r0, r1
 8004f94:	4611      	mov	r1, r2
 8004f96:	2200      	movs	r2, #0
 8004f98:	602a      	str	r2, [r5, #0]
 8004f9a:	461a      	mov	r2, r3
 8004f9c:	f7fb fe54 	bl	8000c48 <_read>
 8004fa0:	1c43      	adds	r3, r0, #1
 8004fa2:	d102      	bne.n	8004faa <_read_r+0x1e>
 8004fa4:	682b      	ldr	r3, [r5, #0]
 8004fa6:	b103      	cbz	r3, 8004faa <_read_r+0x1e>
 8004fa8:	6023      	str	r3, [r4, #0]
 8004faa:	bd38      	pop	{r3, r4, r5, pc}
 8004fac:	20000144 	.word	0x20000144

08004fb0 <_init>:
 8004fb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fb2:	bf00      	nop
 8004fb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004fb6:	bc08      	pop	{r3}
 8004fb8:	469e      	mov	lr, r3
 8004fba:	4770      	bx	lr

08004fbc <_fini>:
 8004fbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fbe:	bf00      	nop
 8004fc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004fc2:	bc08      	pop	{r3}
 8004fc4:	469e      	mov	lr, r3
 8004fc6:	4770      	bx	lr
